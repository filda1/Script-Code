TUTO 
  peladonerd =====> https://www.youtube.com/watch?v=DCoBcpOA7W4
                    https://github.com/pablokbs/peladonerd

  Kubectl (Cliente) === LENS =========>: https://www.youtube.com/watch?v=DFMKcR4BqwM&t=0s
  Helm =============================> https://www.youtube.com/watch?v=CPjfb-I_BKU


  MACORATTi ===> https://www.youtube.com/watch?v=fXYKWH70Uoo&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW   (PLAYLIST)
         minikube = https://www.youtube.com/watch?v=OjwQMwgACJk&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=2
         replicaset = https://www.youtube.com/watch?v=do7XKKTg0wg&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=3
         ingress = https://www.youtube.com/watch?v=6rbLsnsy1Gc&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=10
         volumen = https://www.youtube.com/watch?v=L1Te4U-yWKE&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=10

   ASPNET + K8s = https://www.youtube.com/watch?v=On45IAXFEaI&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8
    https://github.com/macoratti/KubernetesDeploy

  Minikube = crea Node/nodos en Local ( Tienes que ter run un container)
  Helm = Gestor de paquetes K8s

-----
  1- 3 HERRAMIETAS PARA TRABAJAR CON K8s en LOcal == CREAR CLUSTER EN LOCAL
    *  Crea Node/nodos == Minikube 
    *  Linea de comandos == Kubectl (Accede a los nodos o clusters creados)
    *  Gestor de Paquetes para K8s = Helm

  2- TRBAJAR CON K8s emn PRODUCCION
    - Modo Imperativa: EJ:  ======> kubectl run nginx --image nginx
      O
    - Modo Declarativa:  EJ:  =======> kubectl apply -f newpod.yaml  (Utilizada)
-----

  Cluster = Grupo de Nodes  ( Dos tipos de node: WORKER Y MASTER(es control de k8s))
  Node = Grupo de Pods

  Pods == SET de CONTAINERS (Es Pods tiene un namespace= ip) = GRUPO DE CONTAINERS/recursos
  * Deploymens (instrucciones en .yaml) == crear PODS
  StatefulSet  == Deploymens StatefulSet (Es la Persistencia) = EL volumen( == DISCO) esta atado a un disco q tiene una DATABASE por ejemplo == Otro MANIFIESTO (Es parecido a un Service)

  ReplicaSet = numero de Replicas/copias del POD ( es un archivo .yaml)

  Daemonset (instrucciones en .yaml) = crear PODS para C/nodo ( Se utiliza para monitoreo, logs...)

 SERVICES == COMUNICACION ENTRE PODS
  -services Cluster ID = Pods relacionados ( solo con etiqueta lo relacionas ==> role:"nombre") == Crea IP del cluster = es IP interno
  -services  Node Port = puerto pata c/nodo == Crea IP para c/nodo == Ip externo
  - service LoadBaÃ§ancer = crear un loadBalancer con el Host

  ****Ingress = a traves De un Serivor Instalado, a traves de rutas/url accede a los Pods == CREA RUTAS URL PARA ACCEDER A PODS a traves de services
            Es necesarios un Ingres Controller = ingress-nginx (Ejemplo), === servidor    
           (DOC produccion ===https://docs.nginx.com/nginx-ingress-controller/)
           tuto = https://kubernetes.io/docs/concepts/services-networking/ingress/
           https://www.youtube.com/watch?v=us0roqn48EA

  

  ConfigMap === text/ valores guardado en archivo dentyro de los POds, === es La configuracion
  Secrets = text/ valores guardado en archivo dentyro de los POds, === es La configuracion en Base64
  Kustomize = crear manifiestos( Deploymens)
  Stern = trae todo logs por ejemplo...
  
  Volumenes ===> Pesistencia para todos los conatiners del POD
*************************************************************

  COMANDS minikube
  >> minikube start
  >> minikube --help

  COMANDS Kubectl

  >> kubectl version --client
  >> kubectl cluster-info  ================================> INFO
  >> kubectl get all  ================================> VER CLUSTERs RUNs

  >>   ================================> Info Pods
  >> kubectl describe pods  ================================> Descripcion Pods
  >> kubectl delete pod NAME_POD  ================================> Elimina 1 Pod
  >> kubectl delete pod -all  ================================> Elimina Todos Pod
  >> kubectl exec -it NAME_POD -- sh  ================================> Accedo dentro de POD

  >> kubectl scale replicaset NOMBRE_POD --replicas=6  ================================> Replicando automaticamente
  >> kubectl scale deployment NOMBRE_DEPLPYMET --replicas=6  ================================> Replicando automaticamente
  >> kubectl rollout undo deploy NOMBRE_DEPLOYMENT -n default ==============================> Retorna para los PODS antiguos, depues que fueron actualizados

  >> kubectl get nodes  ================================> Info Nodes
 * >> kubectl apply -f newpod.yaml   ===================> RUN Manifesto = Deploymens
  >> kubectl delete -f newpod.yaml   ===================> DELETE Manifesto = Deploymens
  >> kubectl describe deplyment NOMBRE_DEPLOYMET  ================================> Descripcion del Manifiesto Deployment
  >> type deployment_nombre.yaml   ===============================================> Ver archivo en console


* >> kubectl apply -f newservice.yaml   ===================> RUN Manifesto para Services 
                                                       ====> IGUAL >> kubectl expose deplpoyment meu-deploy -name = apache-service --type=ClusterIP --port=8080 --target-port= 8080

  >> kubectl get deploy  =========> Todos los Deploys
  >> kubectl get pod -o wide  =====================> Pods con IPs

  >> type config ==================> Ver config
  >> kubectl config current-context ==> Info
  >> kubectl config get-context ==> Info
  >> kubectl config get-closter ==> Info
  >> kubectl config --help

  >> kubectl get svc ===================> Ver servivios
  >> kubectl delete svc nombre_service ===================> Eliminar servivio

  >> kubectl logs NOMBRE_POD  =========> Logs
  >> kubectl logs NOMBRE_POD -c NOMBRE_CONTENEDOR =========> Logs para Contenedor especifico

  >> minikube dashboard
    minikube dashboard --url

  >> minikube addons enable ingress =========> Ingress para TESTE minikube
  >> kubectl apply -f NOMBRE_INGRESS.yaml ========> Manifiesto INGRESS
  >> kubectl get ingress 
    VER URLS === ( para Linux y MAc)
     WINDOWS: === FUNCIONA MAL SOLO VES LA PAGINA EN CONSOLA
       minikube tunnel (otra consola)
       minikube ssh
       curl 192.168.49.2

  >> kubectl port-forward service/NOMBRE_SERVICE 7000:8080  =====================> Comando de TEST para enviar de 7000 (Accede a clusterIP en este caso para llegar a Los PODS)

  
*****************
 PASO A PASO  =======> Solo FRONTEND

 *******ASP NET MVC (FRONTEND) ====> https://www.youtube.com/watch?v=On45IAXFEaI&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8
   https://github.com/macoratti/KubernetesDeploy

  OJO. Tienes que ter encendido DOCKER

  Dockerfile =======> docker build frontend\Dockerfile -t pizzafrontend  =====> CREA UNA IMAGEN 
   * Build, y frontend\Dockerfile es la direciion de Dockefile

  Teste ====> docker container run -d -p 8090:80 --name testemvc pizzafrontend  ====> CREA UN CONATINER
  
  ENVIAR PARA DOCKER HUB
  >> docker login
  >> docker tag pizzafrontend NOMBRE_LOGIN/pizzafrontend
  >> docker push NOMBRE_LOGIN/pizzafrontend

  >> kubectl apply -f frontend-deploy.yaml
  >> kubectl get all
  >> kubectl describe deploy pizzafrontend

  >> kubectl apply -f frontend-service.yaml
  >> kubectl get all
  >> kubectl describe svc pizzafrontend

  >> kubectl port-forward service/pizzafrontend 7080/8080 ==========> Activar ACCCESO SOLO PARA TESTE
  >> kubectl port-forward --address 0.0.0.0 NOMBRE_POD 8080/80   ============> TEST para PRODUCTION
  >> curl NOMBRE_SERVICE.NOMBRE_ARCHIVO.svc.cluster.local ==========> PROBAR ACCESSO en Producion

  >> kubectl get nodes
  >> kubectl cluster-info
  >> kubectl top node NOMBRE_NODE ==============> VER CPU, MEMORIA .... del Nodo === RECURSO Q UE CONSUME UN NODO
  >> kubectl uncordon NOMBRE_NODE ===============> para NODE para mantenimiento
  >> kubectl drain NOMBRE_NODE ===============> para NODE para mantenimiento
  >> kubectl cp /hom/origen pod:/llllllll -c NOMBRE_CONTENEDOR  ========> Copiar un manifiesto de local a Contenedor


PASO A PASO  =======>  FRONTEND  + BACKEND en 2 NODES diferentes

  *********https://www.youtube.com/watch?v=yVnyDiqYMWg&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8


__________________________________________________________________________________________________________________

 HELM (chart, repository, release) === GESTOT DE PAQUETES de KUBERNTES
    Macoratti === https://www.youtube.com/watch?v=aOQZihEn5fA&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=14

 >> docker images
 >> helm version

 >> proyecto> helm create  NOMBRE_PASTA ==================> CREAR CHARS
  - Crear chart.yaml y values.yaml (Aqui va images) =======> Hacer ajustes

 >> proyecto/NOMBRE_PASTA> helm install --dry-run debug .  ===================> Ver lo que va ser INstalado 
 >> proyecto/NOMBRE_PASTA> helm install NOMBRE_CHART .  ====================> INSTALA CHART

 >> proyecto/NOMBRE_PASTA> kubectl gel all
 >> proyecto/NOMBRE_PASTA> kubectl get deploy
 >> proyecto/NOMBRE_PASTA> kubectl get pod
 >> proyecto/NOMBRE_PASTA> kubectl get svc

 >> proyecto/NOMBRE_PASTA> helm uninstall NOMBRE

 ACTULIZAR CHART
  Macoratti === https://www.youtube.com/watch?v=28AON63i2k8&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=15

 1- Creo nuevo archivo production.values.yaml  ===============> (Aqui solo lleva un/o varias propiedades que quieres cambiar y no todo)
 >> helm upgrade -f  production.values.yaml NOMBRE_CHART .

 >> heml list
 >> helm history NOMBRE_CHART
 >> heml lint   ======================> Chequeo si esta todo bien

 >> heml ls   =========================> Buscar Release actual
 >> helm history NOMBRE_CHART  =============> Ver Todas las version

 >> helm rollback NOMBRE_RELESE/CHART NOMBRE_REVISION --force
     EJ: helm rollback NOMBRE_CHART 1   ==========> Estaba en las 2 por la actualizacion y quiero pasar a la 1


 >> helm uninstall NOMBRE_CHART  =========> Desintalar o CHART


 >> helm package NOMBRE_APP/  ===============> Empaquetar
 >> helm repo index .    ============================> Resumen del Empaquetado/Proyecto

 >> helm repo add NOMBRE_REPO_RANDOW https://www......  =============================> Instalar REpositorio de Internet
    helm show NOMBRE_REPO_RANDOW/NOMBRE_APP
    helm install NOMBRE_INSTALCION NOMBRE_REPO_RANDOW/NOMBRE_APP
    >>kubectl gel all
    helm uninstall NOMBRE_INSTALCION

 ENVIANDO Paquete Helm a REPOSITORIO GITHUB ===https://www.youtube.com/watch?v=jScW2XaS8uI
 HERRAMIENTAS === https://www.youtube.com/watch?v=ZjnMpMXmKZQ&list=RDCMUCrBzBOMcUVV8ryyAU_c6P5g&index=3

 -INSTALAR K8s en SERVER (Alberto coronado) === https://www.youtube.com/watch?v=gmFSmzAWcig&list=RDCMUCLek8zeRbg3gm5usDe6YFzw&start_radio=1&rv=gmFSmzAWcig&t=2108
                              https://www.albertcoronado.com/2021/08/31/tutorial-kubernetes-de-0-a-100-segunda-parte/
 -INGRESS === ALBERTO CRONADO = https://www.youtube.com/watch?v=gPALJhVYMz0
    VOLUMENE ==== https://www.gluster.org
