TUTO 
  peladonerd =====> https://www.youtube.com/watch?v=DCoBcpOA7W4
                    https://github.com/pablokbs/peladonerd

  albertocoronado => https://www.youtube.com/watch?v=gmFSmzAWcig&list=RDCMUCLek8zeRbg3gm5usDe6YFzw&start_radio=1&t=2108s (Parte 1)
                  =>https://www.youtube.com/watch?v=gPALJhVYMz0&t=484s (Parte 2)


  Kubectl (Cliente) === LENS =========>: https://www.youtube.com/watch?v=DFMKcR4BqwM&t=0s === Interfaz para Kubernetes
  Helm =============================> https://www.youtube.com/watch?v=CPjfb-I_BKU

 GENERADOR YAML
           https://8gwifi.org/kube.jsp
           ******https://k8syaml.com/


***************************************************************DOCKER******************************************************************************
             
   *****  >>docker build -f Dockerfile -t pizzafrontend .    CREAR IMAGEN(Despues de tener Dockerfile) ====> ESTA FUNCIONA (Poner el Punto separado) y estar dentro de la carpeta
                      >>docker build -f frontend\Dockerfile -t pizzafrontend  (Despues de tener Dockerfile)  ====> CREAR IMAGEN

                      >>docker login
                      >>docker tag pizzafrontend macoratti/pizzafrontend    ==================================> Enviar Docker HUB
                      >>docker push macoratti/pizzafrontend       ==================================> Enviar Docker HUB
***************************************************************DOCKER******************************************************************************
--
  MACORATTi ===> https://www.youtube.com/watch?v=fXYKWH70Uoo&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW   (PLAYLIST)
                  https://github.com/macoratti/KubernetesDeploy
         minikube = https://www.youtube.com/watch?v=OjwQMwgACJk&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=2
         replicaset = https://www.youtube.com/watch?v=do7XKKTg0wg&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=3
         ingress = https://www.youtube.com/watch?v=6rbLsnsy1Gc&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=10
                 ****(pelado nerd ) == https://www.youtube.com/watch?v=pzFirwIpMag
                                       https://github.com/pablokbs/peladonerd
                                       >> carpeta_Ingress/ kubectl apply -f .  ==========================================> CREA todo el DIrectorio
                                       >> kubectl get ns        ===================================> Ver namesapce Corriendo
                                       >> kubectl -n nginx-ingress get all  =======================> Ver Todo de INGRESS

                                       >>  kubectl apply -f 01-.....yaml  =========> Correr Los Ejemplos...

                                       >> kubectl apply -f 03-hello-svc-v1.yaml ==================================> Servicio de Acceso a los POD1
                                       >> kubectl apply -f 04-hello-svc-v1.yaml ==================================> Servicion de Acceso a los POD2
                                       >> kubectl decribe service/NOMBRE_SERVICE  ================================> Ves adentro los ENDPOINTS

                                       >> kubectl apply -f 05-ingress.yaml   ======================================> ReGLAS de INGRESS (A dentro estan los Subdominios a c/servicio y  C/POD

                                       >> kubectl get all
                                       >> kubectl get ing  ========================================================> Ver los INGRESS ( ves los subdominios...)
                                       >> kubectl describe ing ingress ============================================> TODOS los INGRESS

                                       >> curl v1.peladonerd.local:3000  ===========================================> Sálida
                                       >> curl v1.peladonerd.local:3000  ===========================================> Sálida

         Ingress + SSL  =Kubernetes con CERT-MANAGER ( NECESARIO EN HOST LOAD BALANCER)
                       (peladonerd) = https://www.youtube.com/watch?v=ZKrC261Rxqo&t=200s
                       (That DevOps Guy) = https://www.youtube.com/watch?v=hoLUigg4V18
                                           ***https://github.com/marcel-dempers/docker-development-youtube-series
    



         volumen = https://www.youtube.com/watch?v=L1Te4U-yWKE&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=10 
                   https://www.youtube.com/watch?v=L1Te4U-yWKE&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=12 (EmptyDir == Los datos del Volumen solo se Pierde si matas el Pod)
                   https://www.youtube.com/watch?v=7ImUf_qWW2Y&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=11 ( Volumes Persistentes)
         ASPNET MVC + SQL SERVER = https://www.youtube.com/watch?v=beA9nKlrBM4&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=12

   ASPNET + K8s = https://www.youtube.com/watch?v=On45IAXFEaI&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8
    https://github.com/macoratti/KubernetesDeploy

  Minikube = crea Node/nodos en Local ( Tienes que ter run un container)
  Helm = Gestor de paquetes K8s

-----
  1- 3 HERRAMIETAS PARA TRABAJAR CON K8s en LOcal == CREAR CLUSTER EN LOCAL
    *  Crea Node/nodos == Minikube 
    *  Linea de comandos == Kubectl (Accede a los nodos o clusters creados)
    *  Gestor de Paquetes para K8s = Helm

  2- TRBAJAR CON K8s emn PRODUCCION
    - Modo Imperativa: EJ:  ======> kubectl run nginx --image nginx
      O
    - Modo Declarativa:  EJ:  =======> kubectl apply -f newpod.yaml  (Utilizada)
-----

  Cluster = Grupo de Nodes  ( Dos tipos de node: WORKER Y MASTER(es control de k8s))
  Node = Grupo de Pods

  Pods == SET de CONTAINERS (Es Pods tiene un namespace= ip) = GRUPO DE CONTAINERS/recursos
  * Deploymens (instrucciones en .yaml) == crear PODS
  StatefulSet  == Ordena los Pods con NOMBRES (con status) ( StatefulSet = Deplpyment + Service
                == Deploymens StatefulSet (Es la Persistencia) = EL volumen( == DISCO) esta atado a un disco q tiene una DATABASE por ejemplo == Otro MANIFIESTO (Es parecido a un Service)
             

  ReplicaSet = numero de Replicas/copias del POD ( es un archivo .yaml)

  Daemonset (instrucciones en .yaml) = crear PODS para C/nodo ( Se utiliza para monitoreo, logs...)

 SERVICES == COMUNICACION ENTRE PODS
  -services Cluster ID = Pods relacionados ( solo con etiqueta lo relacionas ==> role:"nombre") == Crea IP del cluster = es IP interno
  -services  Node Port = puerto pata c/nodo == Crea IP para c/nodo == Ip externo
  - service LoadBalancer = crear un loadBalancer con el Host (Load balancer te lo da tu HOST) (va cada NODO es fica la IP)
         ***peladonerd = https://www.youtube.com/watch?v=0iMEcrcfG5A&list=WL&index=64&t=270s

  ****Ingress = a traves De un Serivor Instalado, a traves de rutas/url accede a los Pods == CREA RUTAS URL PARA ACCEDER A PODS a traves de services
            Es necesarios un Ingres Controller = ingress-nginx (Ejemplo), === servidor    
           (DOC produccion ===https://docs.nginx.com/nginx-ingress-controller/)
           tuto = https://kubernetes.io/docs/concepts/services-networking/ingress/
           https://www.youtube.com/watch?v=us0roqn48EA

  

  ConfigMap === text/ valores guardado en archivo dentyro de los POds, === es La configuracion
  Secrets = text/ valores guardado en archivo dentyro de los POds, === es La configuracion en Base64 (Se guardan DB de K8s == etcd)
          = son almacenados en el volumen
          = (macoratti) https://www.youtube.com/watch?v=myJCg1f0kQI&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=17

    * 2 formas de crerar Secret . 1 comando y 2 Con Kustomize

    tipos: Integrados y Custimizados
      >> echo -n 'MY_USER' > username.txt   =============> Escrivo y guardo
      >> echo -n 'MY_PASS' > password.txt   =============> Escrivo y guardo
      >> echo -n 'MY_USER' > username.txt | base64   =============> Escrivo y guardo (Otra forma, Tienes que hacer YAML a mano y convertilo en BASE64): Otra forma es dejar las variables abierta sin  base64 y  con'' y el comando no lleva | base64,  solo lo aplicas
      >> dir
      >> kubectl create secret generic user-cred --from=./username.txt --from=./password.txt  ======> CREO
      * user-cred = Nombre del Secret

      >> kubectl create secret generic test-cred --from-literal=username=... --from-literal=password=..... ========================> Comando Directo

      >> kubectl get secrets  ===========================> Todos Secrets
      >> kubectl describe secrets/user-cred  ============> Descripcion de Secret
      >> kubectl edit secret/user-cred      =============> Edit Secret

      >> kubectl get secret user-cred -o yaml    ====================> Exibe el Contenido
      >> kubectl get secret user-cred -o jsonpath='{.data}' ====================> Exibe el Contenido

      * kubectl apply -f secret1.yaml  =========================> CREA el SECRET


       CREAR SECRET CON KUZTOMIZE
       * hacer Deployment/ o POD YAML
       >> kubectl apply -k .
       >> kubectl get secrets
       >> kubectl apply -f pod1.YML

       >> kubectl exec -i NOMBRE_POD --/bin/bash    >========> DEntro del POD
       >> cd /etc/mysecret     ==================> voy a la direcion que .YAML (mountPath)
       >> ls
       >> cat password
       >> cat username

  Kustomize = crear manifiestos( Deploymens)
  Stern = trae todo logs por ejemplo...
  
  Volumenes ===> Pesistencia para todos los conatiners del POD === Manifiesto de Volumen
    >> kubectl describe pod NOMBRE_POD  =======> Busca el volumen si esta

    Volumens Efimero:
     EmptyDir  === Los datos del Volumen solo se Pierde si matas el Pod)
    Volumes Persistentes (idea es que tiene que adicionar PV a PVC, las 3 cosas estan CONECTADAS):
     Persistent Volumes(PV) === Manifiesto YAML
     Persistent Volumen CLaim (PVC) === Manifiesto YAML
     StorageClass === 
     * Para Manifiesto son 3:
           POD.yaml
           volumen-PVC.YAML
           volumen_PV.YAML
   
*************************************************************
  OJO: DOCKER siempre en RUN
       MINIKUBE siempre en RUN

  COMANDS minikube
  >> minikube start
  >> minikube --help
  >> minikube status

  >> minikube dashboard
    minikube dashboard --url

  >> minikube addons enable ingress =========> Ingress para TESTE minikube


  COMANDS Kubectl  == https://www.bluematador.com/learn/kubectl-cheatsheet

 
  >> kubectl version --client
  >> kubectl cluster-info  ================================> INFO CLUSTERS
  >> kubectl get all  ================================> VER CLUSTERs RUNs

  >>   ================================> Info Pods
  >> kubectl describe pods  ================================> Descripcion Pods
  >> kubectl delete pod NAME_POD  ================================> Elimina 1 Pod
  >> kubectl delete pod --all  ================================> Elimina Todos Pod
  >> kubectl exec -it NAME_POD -- sh  ================================> Accedo dentro de POD
  >> kubectl exec -it NAME_POD -- /bin/bash ==========================> DENTRO DE  CONAINER ( Ver Volumen por Ejemplo)
    >> ls -l
    >> cd NOMBRE_VOLUMEN
    >> ls -l
    >> echo 'Teste de volumen EmptyDir' > text.txt  ============> Escrivo y Guardo en .txt
    >> ls
    >> tail text.txt   ==============================> Ves lo guardado temporal (es EmptyDir)  O  >> cat text.txt
    >> exit

  >> kubectl exec NAME_POD -c NOMBRE_CONAINER -- /bin/bash -c "kill 1" ==========================> Matar Container del Pod ( El COnatiner y Volumen se crea sin perder datos)
  >> kubectl delete pod NAME_POD  ================================> Elimina 1 Pod ( Al elimanr el Pod se pierde datos del VOlumen)

  >> kubectl scale replicaset NOMBRE_POD --replicas=6  ================================> Replicando automaticamente
  >> kubectl scale deployment NOMBRE_DEPLPYMET --replicas=6  ================================> Replicando automaticamente
  >> kubectl rollout undo deploy NOMBRE_DEPLOYMENT -n default ==============================> Retorna para los PODS antiguos, depues que fueron actualizados

  >> kubectl get nodes  ================================> Info Nodes
 * >> kubectl apply -f newpod.yaml   ===================> RUN Manifesto = Deploymens
  >> kubectl delete -f newpod.yaml   ===================> DELETE Manifesto = Deploymens
  >> kubectl describe deplyment NOMBRE_DEPLOYMET  ================================> Descripcion del Manifiesto Deployment
  >> type deployment_nombre.yaml   ===============================================> Ver archivo en console


* >> kubectl apply -f newservice.yaml   ===================> RUN Manifesto para Services 
                                                       ====> IGUAL >> kubectl expose deplpoyment meu-deploy -name = apache-service --type=ClusterIP --port=8080 --target-port= 8080

  >> kubectl get deploy  =========> Todos los Deploys
  >> kubectl get pod -o wide  =====================> Pods con IPs

  >> type config ==================> Ver config
  >> kubectl config current-context ==> Info
  >> kubectl config get-context ==> Info
  >> kubectl config get-cluster ==> Info
  >> kubectl config --help

  >> kubectl get svc ===================> Ver servivios
  >> kubectl delete svc nombre_service ===================> Eliminar servivio

  >> kubectl logs NOMBRE_POD  =========> Logs
  >> kubectl logs NOMBRE_POD -c NOMBRE_CONTENEDOR =========> Logs para Contenedor especifico

  >> kubectl get node        ================================> todos loa NODOS
  >>kubectl describe nodes my-node  ========================> NODO esoecifico
  >> kubectl get nodes -o wide     ==========================> Para NODEPORT , te trae la IP url...
  >> kubectl top NOMBRE_NODE       ===========================> Tarae info Memoria, CPU...

  INGRESS (macoratti) === INGRESS va Conectado a 1 SERVICE/o varios Services por label
  >> minikube addons enable ingress =========> Ingress para TESTE minikube
  >> kubectl apply -f NOMBRE_INGRESS.yaml ========> Manifiesto INGRESS
  >> kubectl get ingress 
    VER URLS === ( para Linux y MAc)
     WINDOWS: === FUNCIONA MAL SOLO VES LA PAGINA EN CONSOLA
       minikube tunnel (otra consola)
       minikube ssh
       curl 192.168.49.2

  >> kubectl port-forward service/NOMBRE_SERVICE 7000:8080  =====================> Comando de TEST para enviar de 7000 (Accede a clusterIP en este caso para llegar a Los PODS)

  
*****************
 PASO A PASO  =======> Solo FRONTEND

 *******ASP NET MVC (FRONTEND) ====> https://www.youtube.com/watch?v=On45IAXFEaI&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8
   https://github.com/macoratti/KubernetesDeploy
   https://macoratti.net/22/05/kubern_aspndeplo1.htm

  OJO. Tienes que ter encendido DOCKER

  Dockerfile =======> docker build frontend\Dockerfile -t pizzafrontend . =====> CREA UNA IMAGEN 
   * Build, y frontend\Dockerfile es la direciion de Dockefile

  Teste ====> docker container run -d -p 8090:80 --name testemvc pizzafrontend  ====> CREA UN CONATINER
  
  ENVIAR PARA DOCKER HUB
  >> docker login
  >> docker tag pizzafrontend NOMBRE_LOGIN/pizzafrontend
  >> docker push NOMBRE_LOGIN/pizzafrontend

  >> kubectl apply -f frontend-deploy.yaml
  >> kubectl get all
  >> kubectl describe deploy pizzafrontend

  >> kubectl apply -f frontend-service.yaml
  >> kubectl get all
  >> kubectl describe svc pizzafrontend

  >> kubectl port-forward service/pizzafrontend 7080/8080 ==========> Activar ACCCESO SOLO PARA TESTE
  >> kubectl port-forward --address 0.0.0.0 NOMBRE_POD 8080/80   ============> TEST para PRODUCTION
  >> curl NOMBRE_SERVICE.NOMBRE_ARCHIVO.svc.cluster.local ==========> PROBAR ACCESSO en Producion

  >> kubectl get nodes
  >> kubectl cluster-info
  >> kubectl top node NOMBRE_NODE ==============> VER CPU, MEMORIA .... del Nodo === RECURSO Q UE CONSUME UN NODO
  >> kubectl uncordon NOMBRE_NODE ===============> para NODE para mantenimiento
  >> kubectl drain NOMBRE_NODE ===============> para NODE para mantenimiento
  >> kubectl cp /hom/origen pod:/llllllll -c NOMBRE_CONTENEDOR  ========> Copiar un manifiesto de local a Contenedor


PASO A PASO  =======>  FRONTEND  + BACKEND en 2 NODES diferentes

  *********MACoartty =https://www.youtube.com/watch?v=yVnyDiqYMWg&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=8


__________________________________________________________________________________________________________________

 HELM (chart, repository, release) === GESTOT DE PAQUETES de KUBERNTES === EMpaqueta todo junto 
    Macoratti === https://www.youtube.com/watch?v=aOQZihEn5fA&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=14
    KebuApp = Helm Hubs == https://kubeapps.dev/resources/ = https://www.youtube.com/watch?v=kURggugffoQ
    prometheus junto con Splunk para monitoreo todo desde docker

 >> docker images
 >> helm version

 >> proyecto> helm create  NOMBRE_PASTA ==================> CREAR CHARS
  - Crear chart.yaml y values.yaml (Aqui va images) =======> Hacer ajustes

 >> proyecto/NOMBRE_PASTA> helm install --dry-run debug .  ===================> Ver lo que va ser INstalado 
 >> proyecto/NOMBRE_PASTA> helm install NOMBRE_CHART .  ====================> INSTALA CHART

 >> proyecto/NOMBRE_PASTA> kubectl gel all
 >> proyecto/NOMBRE_PASTA> kubectl get deploy
 >> proyecto/NOMBRE_PASTA> kubectl get pod
 >> proyecto/NOMBRE_PASTA> kubectl get svc

 >> proyecto/NOMBRE_PASTA> helm uninstall NOMBRE

 ACTULIZAR CHART
  Macoratti === https://www.youtube.com/watch?v=28AON63i2k8&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=15

 1- Creo nuevo archivo production.values.yaml  ===============> (Aqui solo lleva un/o varias propiedades que quieres cambiar y no todo)
 >> helm upgrade -f  production.values.yaml NOMBRE_CHART .

 >> heml list
 >> helm history NOMBRE_CHART
 >> heml lint   ======================> Chequeo si esta todo bien

 >> heml ls   =========================> Buscar Release actual
 >> helm history NOMBRE_CHART  =============> Ver Todas las version

 >> helm rollback NOMBRE_RELESE/CHART NOMBRE_REVISION --force
     EJ: helm rollback NOMBRE_CHART 1   ==========> Estaba en las 2 por la actualizacion y quiero pasar a la 1


 >> helm uninstall NOMBRE_CHART  =========> Desintalar o CHART


 >> helm package NOMBRE_APP/  ===============> Empaquetar
 >> helm repo index .    ============================> Resumen del Empaquetado/Proyecto

 >> helm repo add NOMBRE_REPO_RANDOW https://www......  =============================> Instalar REpositorio de Internet
    helm show NOMBRE_REPO_RANDOW/NOMBRE_APP
    helm install NOMBRE_INSTALCION NOMBRE_REPO_RANDOW/NOMBRE_APP
    >>kubectl gel all
    helm uninstall NOMBRE_INSTALCION

--
 ENVIANDO Paquete Helm a REPOSITORIO GITHUB ===https://www.youtube.com/watch?v=jScW2XaS8uI
 HERRAMIENTAS === https://www.youtube.com/watch?v=ZjnMpMXmKZQ&list=RDCMUCrBzBOMcUVV8ryyAU_c6P5g&index=3

 -INSTALAR K8s en SERVER (Alberto coronado) === https://www.youtube.com/watch?v=gmFSmzAWcig&list=RDCMUCLek8zeRbg3gm5usDe6YFzw&start_radio=1&rv=gmFSmzAWcig&t=2108
                              https://www.albertcoronado.com/2021/08/31/tutorial-kubernetes-de-0-a-100-segunda-parte/
 -INGRESS === ALBERTO CRONADO = https://www.youtube.com/watch?v=gPALJhVYMz0

 -JOBS === Activa un PODS para procese una Tarea (https://www.youtube.com/watch?v=gPALJhVYMz0&t=484s)

 -CRONJOBS ==== ACTIVA pods con TIME (https://www.youtube.com/watch?v=gPALJhVYMz0&t=484s)

    VOLUMENE ==== https://www.gluster.org

 SERVER ============================> https://www.hetzner.com/cloud
  doc ==============================> https://docs.hetzner.com/cloud/servers/getting-started/creating-a-server
--


 ASPNET MVC + SQL SERVER (Macoratti )= https://www.youtube.com/watch?v=beA9nKlrBM4&list=PLJ4k1IC8GhW3vTpsfKl1gw2f5TlPugkVW&index=12
   2 NODOS , c/uno POD

  1-  1 PVC
  2-  1 PV
  3-  1 Deployment SQL SERVER
  4-  1 Service para SQL SERVER
                                      *=======>"DefaultConnection": "Server=NOMBRE_SERVICE, PUERTO_SERVICIO;Database=demo;Trusted_Connection=True;MultipleActiveResultSets=true, User ID=SA;Password=mysenha"

  MVC
  5- visual Studio => Docker Suport ==> Genera DOCKERFILE ====> Clieck DOCKER IMAGE
   5.1 Enviar para DOcker HUB
  6- Deployment de ASPNET.MVC
  7- Service de ASPNET.MVC                      
--


  En visual Studio
   . Ena appSetting ====> DB poner como service
   . Un Controlar hace las MIgarciones A Contaner =====> ENDPOINT
   . Dockerfile   =======> Add =====> Docker Support
      encima Dockerfile =====> Build Docker Image

  SQL SERVER
  1- DEployment General
  2 - Deployment PVC
  3- Service ( Conecta APP con BD)


 ASPNETMVC = APP
  1- Deployment
  2- Service (acceso exterior === desde Web )

  >> minikube service NOMBRE_SERVICE =====================> Acceso EXTERNO ( FALLA)
  >> kubectl port-forward service/NOMBRE_SERVICE 7400/8080   ============> Modo TEST 
   localhost:7400/home/runmigrate  =================> y hace MIGRATION al CONTROLLER en la APP(ASPNET MVC) definido



***************************************************** COMANDOS *************************************************************

 =================================================== MINICUBE ===================================================
 OJO: DOCKER siempre en RUN
       MINIKUBE siempre en RUN

  COMANDS minikube
  >> minikube start
  >> minikube --help
  >> minikube status

  >> minikube stop

  >> minikube dashboard
    minikube dashboard --url

  >> minikube addons enable ingress =========> Ingress para TESTE minikube

=================================================== CLUSTER ===================================================
  >> kubectl version --client
  >> kubectl cluster-info  ================================> INFO CLUSTERS
  >> kubectl get all  ================================> VER CLUSTERs RUNs

  >> kubectl config current-context ==> Info
  >> kubectl config get-context ==> Info
  >> kubectl config get-cluster ==> Info

=================================================== NODES ===================================================


=================================================== VOLUMEN ===================================================


=================================================== INGRESS ===================================================


=================================================== SECRECT ===================================================



=================================================== HELM ===================================================



=================================================== DEPLOYMENT ===================================================



=================================================== SERVICES ===================================================






Ej: Projectos : https://github.com/ValdirFerreira/PROJETO_CRUD_MVC_SQL