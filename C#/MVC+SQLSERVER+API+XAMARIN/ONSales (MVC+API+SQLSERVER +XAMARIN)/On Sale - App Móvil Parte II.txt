On Sale - App Móvil Parte II
Juan Carlos Zuluaga Cardona
Medellín
2020
________________


Tabla de contenido
Validación de usuario logeado        2
Calificar productos        4
Adicionado una TabbedPage        13
Agregando una nueva calificación        23
Registrar usuarios desde la App        33
Adicionando imágenes en el registro de usuarios        55
Recuperación de contraseña        63
Modificar usuario        70
Cambio de contraseña        85
Adicionar productos al carro de compras        94
Ver carro de compras        104
Modificar el pedido        114
Finalizar pedido        122
Integración con portal de pagos        137
Ver historial de pedidos        149
Integración con Facebook        167
Create a Facebook App        168
General Setup        174
Integration with OnSale App        178
Utilización del API para crear usuarios y preparar el sistema para mapas        192
Mapas        204
Notificaciones Push        213
Setup Android Services        213
Android Implementation        220
Create a notification dispatcher        229
Modify the backend to send notifications        232
Setup iOS Services        235
iOS Implementation        253
Fin        257
Validación de usuario logeado
1. Adicionar el literal:


Ingles


 <data name="LoginFirstMessage" xml:space="preserve">
    <value>You must be logged in to complete this action. You can login or register as a user below.</value>
  </data>


Español


 <data name="LoginFirstMessage" xml:space="preserve">
    <value>Para completar esta acción debe haber iniciado sesión. Puede iniciar sesión o registrarse como usuario a continuación.</value>
  </data>


Portuguez


 <data name="LoginFirstMessage" xml:space="preserve">
    <value>Você deve estar logado para concluir esta ação. Você pode fazer o login ou registrar-se como um usuário abaixo.</value>
  </data>


2. Adicionar esta propiedad a Languages:


public static string LoginFirstMessage => Resource.LoginFirstMessage;


3. Modificamos la MenuItemViewModel:


private async void SelectMenuAsync()
{
    if (PageName == "LoginPage" && Settings.IsLogin)
    {
        Settings.IsLogin = false;
        Settings.Token = null;
    }


    if (IsLoginRequired && !Settings.IsLogin)
    {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.LoginFirstMessage, Languages.Accept);
        NavigationParameters parameters = new NavigationParameters
        {
            { "pageReturn", PageName }
        };


        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(LoginPage)}", parameters);
    }
    else
    {
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{PageName}");
    }
}


4. Modificamos la LoginPageViewModel:


private string _pageReturn;
…
public override void OnNavigatedTo(INavigationParameters parameters)
{
    base.OnNavigatedTo(parameters);
    if (parameters.ContainsKey("pageReturn"))
    {
        _pageReturn = parameters.GetValue<string>("pageReturn");
    }
}
...
if (string.IsNullOrEmpty(_pageReturn))
{
    await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
}
else
{
    await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{_pageReturn}");
}


5. Probamos.
Calificar productos
1. Adicionar estos literales:


Ingles


  <data name="Qualification" xml:space="preserve">
    <value>Qualification</value>
  </data>
  <data name="Qualifications" xml:space="preserve">
    <value>Qualifications</value>
  </data>
  <data name="QualificationNumber" xml:space="preserve">
    <value>Number of qualifications</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Remarks" xml:space="preserve">
    <value>Remarks</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>


Español


  <data name="Qualification" xml:space="preserve">
    <value>Calificación</value>
  </data>
  <data name="Qualifications" xml:space="preserve">
    <value>Calificaciones</value>
  </data>
  <data name="QualificationNumber" xml:space="preserve">
    <value>Número de calificaciones</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Fecha</value>
  </data>
  <data name="Remarks" xml:space="preserve">
    <value>Comentarios</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Detalles</value>
  </data>


Portuguez


  <data name="Qualification" xml:space="preserve">
    <value>Qualificação</value>
  </data>
  <data name="Qualifications" xml:space="preserve">
    <value>Avaliações</value>
  </data>
  <data name="QualificationNumber" xml:space="preserve">
    <value>Número de avaliações</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Encontro</value>
  </data>
  <data name="Remarks" xml:space="preserve">
    <value>Comentários</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Detalhes</value>
  </data>


2. Modificar Languages:


public static string Qualification => Resource.Qualification;


public static string Qualifications => Resource.Qualifications;


public static string QualificationNumber => Resource.QualificationNumber;


public static string Details => Resource.Details;


3. Agregar el nuget Syncfusion.Xamarin.SfRating a todos los proyectos de movilidad.


6. Inicializar el componente para iOS:


LoadApplication(new App(new iOSInitializer()));
SfRatingRenderer.Init();
return base.FinishedLaunching(app, options);


7. Modificamos la ProductsPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:rating="clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms"
             x:Class="OnSale.Prism.Views.ProductsPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <SearchBar Placeholder="{i18n:Translate SearchProduct}"
                       SearchCommand="{Binding SearchCommand}"
                       Text="{Binding Search}"/>
            <CollectionView ItemsSource="{Binding Products}">
                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                            <Grid>
                                <Grid.GestureRecognizers>
                                    <TapGestureRecognizer Command="{Binding SelectProductCommand}"/>
                                </Grid.GestureRecognizers>
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ffimageloading:CachedImage Grid.Column="0"
                                                        Aspect="AspectFill"
                                                        Source="{Binding ImageFullPath}" 
                                                        CacheDuration= "50"
                                                        Margin="5"
                                                        RetryCount= "3"
                                                        RetryDelay= "600"
                                                        WidthRequest="100"/>
                            <StackLayout Grid.Column="1"
                                         VerticalOptions="Center">
                                <Label Text="{Binding Name}" 
                                       FontAttributes="Bold"
                                       FontSize="Medium"
                                       LineBreakMode="TailTruncation" />
                                <Label Text="{Binding Price, StringFormat='{0:C2}'}"
                                       LineBreakMode="TailTruncation"
                                       FontAttributes="Italic" 
                                       VerticalOptions="End" />
                                <rating:SfRating ItemSize="20"
                                                 IsEnabled="False"
                                                 Precision="Exact"
                                                 Value="{Binding Qualification}"/>
                            </StackLayout>
                            <Image Grid.Column="2" 
                                   Source="ic_more_vert"/>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


8. Modificamos la ProductsPageViewModel:


private void ShowProducts()
{
    if (string.IsNullOrEmpty(Search))
    {
        Products = new ObservableCollection<ProductItemViewModel>(_myProducts.Select(p => new ProductItemViewModel(_navigationService)
        {
            Category = p.Category,
            Description = p.Description,
            Id = p.Id,
            IsActive = p.IsActive,
            IsStarred = p.IsStarred,
            Name = p.Name,
            Price = p.Price,
            ProductImages = p.ProductImages,
            Qualifications = p.Qualifications
        })
            .ToList());
    }
    else
    {
        Products = new ObservableCollection<ProductItemViewModel>(_myProducts.Select(p => new ProductItemViewModel(_navigationService)
        {
            Category = p.Category,
            Description = p.Description,
            Id = p.Id,
            IsActive = p.IsActive,
            IsStarred = p.IsStarred,
            Name = p.Name,
            Price = p.Price,
            ProductImages = p.ProductImages,
            Qualifications = p.Qualifications
        })
            .Where(p => p.Name.ToLower().Contains(Search.ToLower()))
            .ToList());
    }
}




9. Probemos lo que llevamos hasta el momento.


10. Modificamos la ProductDetailPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             xmlns:syncfusion="clr-namespace:Syncfusion.SfRotator.XForms;assembly=Syncfusion.SfRotator.XForms"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"  
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:rating="clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms"
             x:Class="OnSale.Prism.Views.ProductDetailPage"
             BackgroundColor="{StaticResource ColorBackground}"
             IconImageSource="ic_action_card_giftcard"
             Title="{Binding Title}">


    <StackLayout Padding="5">
        <ScrollView>
            <StackLayout>
                <StackLayout HorizontalOptions="Center"
                             Orientation="Horizontal">
                    <Label Text="{i18n:Translate Qualification}"
                            VerticalOptions="Center"/>
                    <Label FontAttributes="Bold"
                            FontSize="Large"
                            Text="{Binding Product.Qualification, StringFormat='{0:N2}'}"/>
                    <Label Text="{i18n:Translate QualificationNumber}"
                            VerticalOptions="Center"/>
                    <Label FontAttributes="Bold"
                            FontSize="Large"
                            Text="{Binding Product.ProductQualifications, StringFormat='{0:N0}'}"/>
                </StackLayout>
                <rating:SfRating IsEnabled="False"
                                 HorizontalOptions="Center"
                                 Precision="Exact"
                                 Value="{Binding Product.Qualification}"/>
                <syncfusion:SfRotator EnableAutoPlay="True"  
                                      EnableLooping="True"
                                      HeightRequest="300"
                                      ItemsSource="{Binding Images}"
                                      NavigationDelay="5000"
                                      NavigationDirection="Horizontal"
                                      NavigationStripMode="Dots"
                                      NavigationStripPosition="Bottom">
                    <syncfusion:SfRotator.ItemTemplate>
                        <DataTemplate>
                            <ffimageloading:CachedImage Aspect="AspectFit"
                                                        CacheDuration= "50"
                                                        DownsampleToViewSize = "true"
                                                        ErrorPlaceholder= "ErrorImage"
                                                        HeightRequest="300"
                                                        LoadingPlaceholder= "LoaderImage"
                                                        RetryCount= "3"
                                                        RetryDelay= "600"
                                                        Source="{Binding ImageFullPath}"/>
                        </DataTemplate>
                    </syncfusion:SfRotator.ItemTemplate>
                </syncfusion:SfRotator>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Row="0"
                           Grid.Column="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Name}"/>
                    <Label Grid.Row="0"
                           Grid.Column="1"
                           Text="{Binding Product.Name}"/>
                    <Label Grid.Row="1"
                           Grid.Column="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Description}"/>
                    <Label Grid.Row="1"
                           Grid.Column="1"
                           Text="{Binding Product.Description}"/>
                    <Label Grid.Row="2"
                           Grid.Column="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Price}"/>
                    <Label Grid.Row="2"
                           Grid.Column="1"
                           Text="{Binding Product.Price, StringFormat='{0:C2}'}"/>
                    <Label Grid.Row="3"
                           Grid.Column="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Category}"/>
                    <Label Grid.Row="3"
                           Grid.Column="1"
                           Text="{Binding Product.Category.Name}"/>
                    <Label Grid.Row="4"
                           Grid.Column="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate IsStarred}"
                           VerticalOptions="Center"/>
                    <CheckBox Grid.Row="4"
                              Grid.Column="1"
                              HorizontalOptions="Start"
                              IsEnabled="False"
                              IsChecked="{Binding Product.IsStarred}"/>
                </Grid>
            </StackLayout>
        </ScrollView>
        <Button BackgroundColor="Navy"
                Command="{Binding AddToCartBinding}" 
                CornerRadius="10"
                Text="{i18n:Translate AddToCart}"
                TextColor="White"
                VerticalOptions="EndAndExpand"/>
    </StackLayout>


</ContentPage>


11. Probamos.
________________
Adicionado una TabbedPage
Vamos a implementar estas pantallas:


Android
  

	iOS
  

	

12. Agregamos los íconos que va a tener nuestra tabbed page y un ícono para adicionar nuevas calificaciones.


13. Adicionar este atributo a la QualificationResponse:


public DateTime DateLocal => Date.ToLocalTime();


14. Agregamos la QualificationsPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:rating="clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms"
             x:Class="OnSale.Prism.Views.QualificationsPage"
             BackgroundColor="{StaticResource ColorBackground}"
             IconImageSource="ic_action_star_half"
             Title="{Binding Title}">


    <ContentPage.ToolbarItems>
        <ToolbarItem IconImageSource="ic_action_add_circle" Command="{Binding AddQualificationCommand}"/>
    </ContentPage.ToolbarItems>


    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <CollectionView ItemsSource="{Binding Qualifications}">
                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                            <Grid>
                                <Grid.GestureRecognizers>
                                    <TapGestureRecognizer Command="{Binding SelectQualificationCommand}"/>
                                </Grid.GestureRecognizers>
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0"
                                   Text="{Binding DateLocal, StringFormat='{0:yyyy/MM/dd hh:mm}'}"/>
                            <rating:SfRating Grid.Column="1"
                                             ItemSize="20"
                                             IsEnabled="False"
                                             Precision="Exact"
                                             Value="{Binding Score}"/>
                            <Image Grid.Column="2" 
                                   Source="ic_more_vert"/>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


15. Agregamos la QualificationDetailPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:rating="clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms"
             x:Class="OnSale.Prism.Views.QualificationDetailPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <StackLayout Padding="5">
        <ScrollView>
            <StackLayout>
                <rating:SfRating IsEnabled="False"
                                 HorizontalOptions="Center"
                                 Precision="Exact"
                                 Value="{Binding Qualification.Score}"/>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>


                    <Label Grid.Column="0"
                           Grid.Row="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Qualification}"
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="0"
                           FontAttributes="Bold"
                           FontSize="Large"
                           Text="{Binding Qualification.Score, StringFormat='{0:N2}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="1"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Date}"
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="1"
                           FontAttributes="Bold"
                           FontSize="Large"
                           Text="{Binding Qualification.Date, StringFormat='{0:yyyy/MM/dd hh:mm}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="2"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Remarks}"
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="2"
                           Text="{Binding Qualification.Remarks}"/>


                </Grid>
            </StackLayout>
        </ScrollView>
    </StackLayout>


</ContentPage>


16. Agregamos la QualificationItemViewModel:


public class QualificationItemViewModel : QualificationResponse
{
    private readonly INavigationService _navigationService;
    private DelegateCommand _selectQualificationCommand;


    public QualificationItemViewModel(INavigationService navigationService)
    {
        _navigationService = navigationService;
    }


    public DelegateCommand SelectQualificationCommand => _selectQualificationCommand ?? (_selectQualificationCommand = new DelegateCommand(SelectQualificationAsync));


    private async void SelectQualificationAsync()
    {
        NavigationParameters parameters = new NavigationParameters
        {
            { "qualification", this }
        };


        await _navigationService.NavigateAsync(nameof(QualificationDetailPage), parameters);
    }
}


17. Modificamos la QualificationsPageViewModel:


public class QualificationsPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private ProductResponse _product;
    private bool _isRunning;
    private ObservableCollection<QualificationItemViewModel> _qualifications;


    public QualificationsPageViewModel(INavigationService navigationService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        Title = Languages.Qualifications;
    }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public ObservableCollection<QualificationItemViewModel> Qualifications
    {
        get => _qualifications;
        set => SetProperty(ref _qualifications, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);


        if (parameters.ContainsKey("product"))
        {
            IsRunning = true;
            _product = parameters.GetValue<ProductResponse>("product");
            if (_product.Qualifications != null)
            {
                Qualifications = new ObservableCollection<QualificationItemViewModel>(
                    _product.Qualifications.Select(q => new QualificationItemViewModel(_navigationService)
                {
                    Date = q.Date,
                    Id = q.Id,
                    Remarks = q.Remarks,
                    Score = q.Score
                }).ToList());
            }


            IsRunning = false;
        }
    }
}


18. Modificamos la QualificationDetailPageViewModel:


public class QualificationDetailPageViewModel : ViewModelBase
{
    private QualificationResponse _qualification;


    public QualificationDetailPageViewModel(INavigationService navigationService)
        : base(navigationService)
    {
        Title = Languages.Qualification;
    }


    public QualificationResponse Qualification
    {
        get => _qualification;
        set => SetProperty(ref _qualification, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);


        if (parameters.ContainsKey("qualification"))
        {
            Qualification = parameters.GetValue<QualificationResponse>("qualification");
        }
    }
}


19. Temporalmente modificamos la ProductItemViewModel para que navegue a la página de QualificationsPage:


private async void SelectProductAsync()
{
    NavigationParameters parameters = new NavigationParameters
    {
        { "product", this }
    };


    await _navigationService.NavigateAsync(nameof(QualificationsPage), parameters);
}


20. Probamos.


21. Ahora agregamos la ProductTabbedPage:


<?xml version="1.0" encoding="utf-8" ?>
<TabbedPage xmlns="http://xamarin.com/schemas/2014/forms"
                xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
            xmlns:prism="http://prismlibrary.com"
                xmlns:local="clr-namespace:OnSale.Prism.Views"
                prism:ViewModelLocator.AutowireViewModel="True"
            x:Class="OnSale.Prism.Views.ProductTabbedPage"
                Title="{Binding Title}">


    <TabbedPage.Children>
        <local:ProductDetailPage />
        <local:QualificationsPage />
    </TabbedPage.Children>


</TabbedPage>


22. En el Code behind de la ProductTabbedPage colocamos estas líneas:


public partial class ProductTabbedPage : TabbedPage, INavigatedAware
{
    public ProductTabbedPage()
    {
        InitializeComponent();
    }


    public void OnNavigatedFrom(INavigationParameters parameters)
    {
    }


    public void OnNavigatedTo(INavigationParameters parameters)
    {
        if (parameters.GetNavigationMode() == NavigationMode.New)
        {
            if (Children.Count == 1)
            {
                return;
            }
            for (var pageIndex = 1; pageIndex < Children.Count; pageIndex++)
            {
                var page = Children[pageIndex];
                (page?.BindingContext as INavigationAware)?.OnNavigatedTo(parameters);
            }
        }
    }
}


23. Modificamos la ProductTabbedPageViewModel:


public class ProductTabbedPageViewModel : ViewModelBase
{
    public ProductTabbedPageViewModel(INavigationService navigationService)
        : base(navigationService)
    {
        Title = Languages.Product;
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);


        if (parameters.ContainsKey("product"))
        {
            var product = parameters.GetValue<ProductResponse>("product");
            Title = product.Name;
        }
    }
}


24. Modificamos la ProductDetailPageViewModel:


Title = Languages.Details;


25. Agregamos la ProductItemViewModel:


await _navigationService.NavigateAsync(nameof(ProductTabbedPage), parameters);


26. Probamos.
________________


Agregando una nueva calificación
Vamos a implementar estas pantallas:


Android
  

	iOS
  

	

27. Adicionar estos literales:


Ingles


 <data name="RemarksPlaceHolder" xml:space="preserve">
    <value>Enter your remarks...</value>
  </data>
  <data name="QualificationError" xml:space="preserve">
    <value>You must select a qualification.</value>
  </data>
  <data name="NewQualification" xml:space="preserve">
    <value>New Qualification</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>


Español


 <data name="RemarksPlaceHolder" xml:space="preserve">
    <value>Ingrese sus comentarios...</value>
  </data>
  <data name="QualificationError" xml:space="preserve">
    <value>Debes seleccionar una calificación.</value>
  </data>
  <data name="NewQualification" xml:space="preserve">
    <value>Nueva Calificación</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Guardar</value>
  </data>


Portuguez


 <data name="RemarksPlaceHolder" xml:space="preserve">
    <value>Insira seus comentários...</value>
  </data>
  <data name="QualificationError" xml:space="preserve">
    <value>Você deve selecionar uma classificação.</value>
  </data>
  <data name="NewQualification" xml:space="preserve">
    <value>Nova Classificação</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Salve</value>
  </data>




28. Modificar Languages:


public static string RemarksPlaceHolder => Resource.RemarksPlaceHolder;


public static string QualificationError => Resource.QualificationError;


public static string NewQualification => Resource.NewQualification;


public static string Save => Resource.Save;


29. Agregamos la AddQualificationPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:rating="clr-namespace:Syncfusion.SfRating.XForms;assembly=Syncfusion.SfRating.XForms"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
             x:Class="OnSale.Prism.Views.AddQualificationPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <ScrollView>
                <StackLayout>
                    <rating:SfRating HorizontalOptions="Center"
                                     Precision="Half"
                                     Value="{Binding Qualification}"/>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Remarks}" 
                                                   ContainerType="Outlined">
                        <Editor Placeholder="{i18n:Translate RemarksPlaceHolder}"
                                HeightRequest="100"
                                Text="{Binding Remarks}" />
                    </inputLayout:SfTextInputLayout>
                </StackLayout>
            </ScrollView>
            <Button Command="{Binding SaveCommand}" 
                    IsEnabled="{Binding IsEnabled}"
                    Text="{i18n:Translate Save}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


30. Modificamos Settings:


public static class Settings
{
    private const string _token = "token";
    private const string _isLogin = "isLogin";
    private const string _product = "product";
    private static readonly string _stringDefault = string.Empty;
    private static readonly bool _boolDefault = false;


    private static ISettings AppSettings => CrossSettings.Current;


    public static string Token
    {
        get => AppSettings.GetValueOrDefault(_token, _stringDefault);
        set => AppSettings.AddOrUpdateValue(_token, value);
    }


    public static bool IsLogin
    {
        get => AppSettings.GetValueOrDefault(_isLogin, _boolDefault);
        set => AppSettings.AddOrUpdateValue(_isLogin, value);
    }


    public static string Product
    {
        get => AppSettings.GetValueOrDefault(_product, _stringDefault);
        set => AppSettings.AddOrUpdateValue(_product, value);
    }
}




31. Adicionar este método al IApiService:


Task<Response> PostQualificationAsync(string urlBase, string servicePrefix, string controller, QualificationRequest qualificationRequest, string token);


32. Adicionar este método al ApiService:


public async Task<Response> PostQualificationAsync(string urlBase, string servicePrefix, string controller, QualificationRequest qualificationRequest, string token)
{
    try
    {
        string request = JsonConvert.SerializeObject(qualificationRequest);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return new Response
            {
                IsSuccess = false,
                Message = result,
            };
        }


        ProductResponse product = JsonConvert.DeserializeObject<ProductResponse>(result);


        return new Response
        {
            IsSuccess = true,
            Result = product
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


33. Modificamos la AddQualificationPageViewModel:


public class AddQualificationPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private bool _isRunning;
    private bool _isEnabled;
    private DelegateCommand _saveCommand;


    public AddQualificationPageViewModel(INavigationService navigationService, IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        Title = Languages.NewQualification;
        IsEnabled = true;
    }


    public DelegateCommand SaveCommand => _saveCommand ?? (_saveCommand = new DelegateCommand(SaveAsync));


    public float Qualification { get; set; }


    public string Remarks { get; set; }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    private async void SaveAsync()
    {
        if (Qualification == 0)
        {
            await App.Current.MainPage.DisplayAlert(
                Languages.Error,
                Languages.QualificationError,
                Languages.Accept);
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        ProductResponse myProduct = JsonConvert.DeserializeObject<ProductResponse>(Settings.Product);
        string url = App.Current.Resources["UrlAPI"].ToString();
        QualificationRequest request = new QualificationRequest
        {
            ProductId = myProduct.Id,
            Remarks = Remarks,
            Score = Qualification
        };


        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        Response response = await _apiService.PostQualificationAsync(url, "api", "/Qualifications", request, token.Token);
        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            return;
        }


        ProductResponse product = (ProductResponse)response.Result;
        NavigationParameters parameters = new NavigationParameters
        {
            { "product", product }
        };


        await _navigationService.GoBackAsync(parameters);
    }
}


34. Modificar la ProductItemViewModel:


private async void SelectProductAsync()
{
    NavigationParameters parameters = new NavigationParameters
    {
        { "product", this }
    };


    Settings.Product = JsonConvert.SerializeObject(this);
    await _navigationService.NavigateAsync(nameof(ProductTabbedPage), parameters);
}


35. Modificamos la QualificationsPageViewModel:


public override void OnNavigatedFrom(INavigationParameters parameters)
{
    base.OnNavigatedFrom(parameters);


    if (parameters.ContainsKey("product"))
    {
        LoadProduct(parameters);
    }
}


public override void OnNavigatedTo(INavigationParameters parameters)
{
    base.OnNavigatedTo(parameters);


    if (parameters.ContainsKey("product"))
    {
        LoadProduct(parameters);
    }
}


private void LoadProduct(INavigationParameters parameters)
{
    IsRunning = true;
    _product = parameters.GetValue<ProductResponse>("product");
    if (_product.Qualifications != null)
    {
        Qualifications = new ObservableCollection<QualificationItemViewModel>(
            _product.Qualifications.Select(q => new QualificationItemViewModel(_navigationService)
            {
                Date = q.Date,
                Id = q.Id,
                Remarks = q.Remarks,
                Score = q.Score
            })
            .OrderByDescending(q => q.Date)
            .ToList());
    }


    IsRunning = false;
}


36. Probamos.
________________
Registrar usuarios desde la App
Vamos a implementar la siguiente pantalla:


Android
  

	iOS
  

	

1. Adicionar la RegisterPage, inicialmente con este diseño:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             x:Class="OnSale.Prism.Views.RegisterPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


</ContentPage>


2. Modificamos la RegisterPageViewModel:


public class RegisterPageViewModel : ViewModelBase
{
    public RegisterPageViewModel(INavigationService navigationService)
        : base(navigationService)
    {
        Title = Languages.Register;
    }
}


3. Modificamos la LoginPageViewModel:


private async void RegisterAsync()
{
    await _navigationService.NavigateAsync(nameof(RegisterPage));
}


37. Probamos.


38. Adicionar la IRegexHelper:


public interface IRegexHelper
{
    bool IsValidEmail(string emailaddress);
}


39. Adicioar la RegexHelper:


public class RegexHelper : IRegexHelper
{
    public bool IsValidEmail(string emailaddress)
    {
        try
        {
            new MailAddress(emailaddress);
            return true;
        }
        catch (FormatException)
        {
            return false;
        }
    }
}


40. Adicionamos la inyección:


containerRegistry.RegisterSingleton<IAppInfo, AppInfoImplementation>();
containerRegistry.Register<IApiService, ApiService>();
containerRegistry.Register<IRegexHelper, RegexHelper>();


containerRegistry.RegisterForNavigation<NavigationPage>();


41. Adicionamos esta clave al diccionario de recursos:


<x:String x:Key="UrlNoImage">https://onsaleprepweb.azurewebsites.net/images/noimage.png</x:String>


42. Agregamos estos literales:


English


  <data name="Document" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="DocumentPlaceHolder" xml:space="preserve">
    <value>Enter your document number...</value>
  </data>
  <data name="DocumentError" xml:space="preserve">
    <value>You must enter a document.</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="FirstNamePlaceHolder" xml:space="preserve">
    <value>Enter your first name...</value>
  </data>
  <data name="FirstNameError" xml:space="preserve">
    <value>You must enter a first name.</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="LastNamePlaceHolder" xml:space="preserve">
    <value>Enter your last name...</value>
  </data>
  <data name="LastNameError" xml:space="preserve">
    <value>You must enter a last name.</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AddressPlaceHolder" xml:space="preserve">
    <value>Enter your address...</value>
  </data>
  <data name="AddressError" xml:space="preserve">
    <value>You must enter an address.</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="PhoneError" xml:space="preserve">
    <value>Enter your phone...</value>
  </data>
  <data name="PhonePlaceHolder" xml:space="preserve">
    <value>You must enter a phone.</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="CityError" xml:space="preserve">
    <value>You must select a city.</value>
  </data>
  <data name="CityPlaceHolder" xml:space="preserve">
    <value>Select your city...</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="DepartmentError" xml:space="preserve">
    <value>You must select a department.</value>
  </data>
  <data name="DepartmentPlaceHolder" xml:space="preserve">
    <value>Select your department...</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CountryError" xml:space="preserve">
    <value>You must select a country.</value>
  </data>
  <data name="CountryPlaceHolder" xml:space="preserve">
    <value>Select your country...</value>
  </data>
  <data name="PasswordConfirm" xml:space="preserve">
    <value>Password confirm</value>
  </data>
  <data name="PasswordConfirmError1" xml:space="preserve">
    <value>You must enter a password confirm.</value>
  </data>
  <data name="PasswordConfirmError2" xml:space="preserve">
    <value>The password and confirm does not match.</value>
  </data>
  <data name="PasswordConfirmPlaceHolder" xml:space="preserve">
    <value>Enter the password confirm...</value>
  </data>
  <data name="Error001" xml:space="preserve">
    <value>User no found.</value>
  </data>
  <data name="Error002" xml:space="preserve">
    <value>Product no found.</value>
  </data>
  <data name="Error003" xml:space="preserve">
    <value>A user with that email is already registered.</value>
  </data>
  <data name="Error004" xml:space="preserve">
    <value>City no found.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="RegisterMessge" xml:space="preserve">
    <value>Your user has been registered ok, an email was sent to confirm the user account.</value>
  </data>


Español


  <data name="Document" xml:space="preserve">
    <value>Documento</value>
  </data>
  <data name="DocumentPlaceHolder" xml:space="preserve">
    <value>Ingresa tu documento...</value>
  </data>
  <data name="DocumentError" xml:space="preserve">
    <value>Debes ingresar un documento.</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>Nombres</value>
  </data>
  <data name="FirstNamePlaceHolder" xml:space="preserve">
    <value>Ingresa tus nombres...</value>
  </data>
  <data name="FirstNameError" xml:space="preserve">
    <value>Debes ingresar al menos un nombre.</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Apellidos</value>
  </data>
  <data name="LastNamePlaceHolder" xml:space="preserve">
    <value>Ingresa tus apellidos...</value>
  </data>
  <data name="LastNameError" xml:space="preserve">
    <value>Debes ingresar al menos un apellido.</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Dirección</value>
  </data>
  <data name="AddressPlaceHolder" xml:space="preserve">
    <value>Ingresa tu dirección...</value>
  </data>
  <data name="AddressError" xml:space="preserve">
    <value>Debes ingresar tu dirección.</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Teléfono</value>
  </data>
  <data name="PhoneError" xml:space="preserve">
    <value>Ingresa tu teléfono...</value>
  </data>
  <data name="PhonePlaceHolder" xml:space="preserve">
    <value>Debes ingresar tu teléfono.</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>Ciudad</value>
  </data>
  <data name="CityError" xml:space="preserve">
    <value>Debes seleccionar una ciudad.</value>
  </data>
  <data name="CityPlaceHolder" xml:space="preserve">
    <value>Selecciona una ciudad...</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Departamento</value>
  </data>
  <data name="DepartmentError" xml:space="preserve">
    <value>Debes seleccionar un departamento.</value>
  </data>
  <data name="DepartmentPlaceHolder" xml:space="preserve">
    <value>Selecciona un departamento...</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>País</value>
  </data>
  <data name="CountryError" xml:space="preserve">
    <value>Debes seleccionar un país.</value>
  </data>
  <data name="CountryPlaceHolder" xml:space="preserve">
    <value>Selecciona un país...</value>
  </data>
  <data name="PasswordConfirm" xml:space="preserve">
    <value>Confirmación de contraseña</value>
  </data>
  <data name="PasswordConfirmError1" xml:space="preserve">
    <value>Debes ingresar una confirmación de contraseña.</value>
  </data>
  <data name="PasswordConfirmError2" xml:space="preserve">
    <value>La contraseña y la confirmación no concuerdan.</value>
  </data>
  <data name="PasswordConfirmPlaceHolder" xml:space="preserve">
    <value>Ingresa una confirmación de contraseña...</value>
  </data>
  <data name="Error001" xml:space="preserve">
    <value>Usuario no encontrado.</value>
  </data>
  <data name="Error002" xml:space="preserve">
    <value>Producto no encontrado.</value>
  </data>
  <data name="Error003" xml:space="preserve">
    <value>Un usuario con ese email ya se encuentra registrado.</value>
  </data>
  <data name="Error004" xml:space="preserve">
    <value>Ciudad no encontrada.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="RegisterMessge" xml:space="preserve">
    <value>Su usuario se ha registrado correctamente, se envió un correo electrónico para confirmar la cuenta de usuario.</value>
  </data>


Portuguez


  <data name="Document" xml:space="preserve">
    <value>Documento</value>
  </data>
  <data name="DocumentPlaceHolder" xml:space="preserve">
    <value>Insira seu documento...</value>
  </data>
  <data name="DocumentError" xml:space="preserve">
    <value>Você deve inserir um documento.</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>Nomes</value>
  </data>
  <data name="FirstNamePlaceHolder" xml:space="preserve">
    <value>Insira seus nomes...</value>
  </data>
  <data name="FirstNameError" xml:space="preserve">
    <value>Você deve inserir pelo menos um nome.</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Sobrenomes</value>
  </data>
  <data name="LastNamePlaceHolder" xml:space="preserve">
    <value>Digite seu sobrenome...</value>
  </data>
  <data name="LastNameError" xml:space="preserve">
    <value>Você deve inserir pelo menos um sobrenome.</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Endereço</value>
  </data>
  <data name="AddressPlaceHolder" xml:space="preserve">
    <value>Digite seu endereço...</value>
  </data>
  <data name="AddressError" xml:space="preserve">
    <value>Você deve inserir seu endereço.</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telefone</value>
  </data>
  <data name="PhoneError" xml:space="preserve">
    <value>Digite seu telefone...</value>
  </data>
  <data name="PhonePlaceHolder" xml:space="preserve">
    <value>Você deve inserir o seu telefone.</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>Cidade</value>
  </data>
  <data name="CityError" xml:space="preserve">
    <value>Você deve selecionar uma cidade.</value>
  </data>
  <data name="CityPlaceHolder" xml:space="preserve">
    <value>Selecione uma cidade...</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>Departamento</value>
  </data>
  <data name="DepartmentError" xml:space="preserve">
    <value>Você deve selecionar um departamento.</value>
  </data>
  <data name="DepartmentPlaceHolder" xml:space="preserve">
    <value>Selecione um departamento...</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>País</value>
  </data>
  <data name="CountryError" xml:space="preserve">
    <value>Você deve selecionar um país.</value>
  </data>
  <data name="CountryPlaceHolder" xml:space="preserve">
    <value>Selecione um pais...</value>
  </data>
  <data name="PasswordConfirm" xml:space="preserve">
    <value>ConfirmaÇão Da Senha</value>
  </data>
  <data name="PasswordConfirmError1" xml:space="preserve">
    <value>Você deve inserir uma confirmação de senha.</value>
  </data>
  <data name="PasswordConfirmError2" xml:space="preserve">
    <value>Senha e confirmação não coincidem.</value>
  </data>
  <data name="PasswordConfirmPlaceHolder" xml:space="preserve">
    <value>Digite uma confirmação de senha...</value>
  </data>
  <data name="Error001" xml:space="preserve">
    <value>Usuário não encontrado.</value>
  </data>
  <data name="Error002" xml:space="preserve">
    <value>Produto não encontrado.</value>
  </data>
  <data name="Error003" xml:space="preserve">
    <value>Um usuário com esse e-mail já está registrado.</value>
  </data>
  <data name="Error004" xml:space="preserve">
    <value>Cidade não encontrada.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="RegisterMessge" xml:space="preserve">
    <value>Seu usuário foi cadastrado ok, um email foi enviado para confirmar a conta do usuário.</value>
  </data>


43. Adicionar estas propiedades en Languages:


public static string Document => Resource.Document;


public static string DocumentError => Resource.DocumentError;


public static string DocumentPlaceHolder => Resource.DocumentPlaceHolder;


public static string FirstName => Resource.FirstName;


public static string FirstNameError => Resource.FirstNameError;


public static string FirstNamePlaceHolder => Resource.FirstNamePlaceHolder;


public static string LastName => Resource.LastName;


public static string LastNameError => Resource.LastNameError;


public static string LastNamePlaceHolder => Resource.LastNamePlaceHolder;


public static string Address => Resource.Address;


public static string AddressError => Resource.AddressError;


public static string AddressPlaceHolder => Resource.AddressPlaceHolder;


public static string Phone => Resource.Phone;


public static string PhoneError => Resource.PhoneError;


public static string PhonePlaceHolder => Resource.PhonePlaceHolder;


public static string City => Resource.City;


public static string CityError => Resource.CityError;


public static string CityPlaceHolder => Resource.CityPlaceHolder;


public static string Department => Resource.Department;


public static string DepartmentError => Resource.DepartmentError;


public static string DepartmentPlaceHolder => Resource.DepartmentPlaceHolder;


public static string Country => Resource.Country;


public static string CountryError => Resource.CountryError;


public static string CountryPlaceHolder => Resource.CountryPlaceHolder;


public static string PasswordConfirm => Resource.PasswordConfirm;


public static string PasswordConfirmError1 => Resource.PasswordConfirmError1;


public static string PasswordConfirmError2 => Resource.PasswordConfirmError2;


public static string PasswordConfirmPlaceHolder => Resource.PasswordConfirmPlaceHolder;


public static string Error001 => Resource.Error001;


public static string Error002 => Resource.Error002;


public static string Error003 => Resource.Error003;


public static string Error004 => Resource.Error004;


public static string Ok => Resource.Ok;


public static string RegisterMessge => Resource.RegisterMessge;


44. Modificamos la RegisterPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:fftransformations="clr-namespace:FFImageLoading.Transformations;assembly=FFImageLoading.Transformations"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"             x:Class="OnSale.Prism.Views.RegisterPage"
             xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


       <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All"
                     Padding="5">
            <ScrollView>
                <StackLayout Spacing="0">
                    <ffimageloading:CachedImage Aspect="AspectFit"
                                                Source="{Binding Image}" 
                                                CacheDuration= "50"
                                                HeightRequest="150"
                                                Margin="5"
                                                RetryCount= "3"
                                                RetryDelay= "600">
                        <ffimageloading:CachedImage.Transformations>
                            <fftransformations:CircleTransformation />
                        </ffimageloading:CachedImage.Transformations>
                        <ffimageloading:CachedImage.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding ChangeImageCommand}"/>
                        </ffimageloading:CachedImage.GestureRecognizers>
                    </ffimageloading:CachedImage>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Email}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate EmailPlaceHolder}"
                               Keyboard="Email"
                               Text="{Binding User.Email}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Document}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate DocumentPlaceHolder}" 
                               Text="{Binding User.Document}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate FirstName}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate FirstNamePlaceHolder}" 
                               Text="{Binding User.FirstName}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate LastName}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate LastName}" 
                               Text="{Binding User.LastName}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Country}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Countries}"
                                SelectedItem="{Binding Country}"
                                Title="{i18n:Translate CountryPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Department}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Departments}"
                                SelectedItem="{Binding Department}"
                                Title="{i18n:Translate DepartmentPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate City}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Cities}"
                                SelectedItem="{Binding City}"
                                Title="{i18n:Translate CityPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Address}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate AddressPlaceHolder}" 
                               Text="{Binding User.Address}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Phone} " 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate PhonePlaceHolder}" 
                               Keyboard="Telephone"
                               Text="{Binding User.Phone}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Password}" 
                                                   EnablePasswordVisibilityToggle="true"
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate PasswordPlaceHolder}" 
                               IsPassword="True"
                               Text="{Binding User.Password}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate PasswordConfirm}" 
                                                   EnablePasswordVisibilityToggle="true"
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate PasswordConfirmPlaceHolder}" 
                               IsPassword="True"
                               Text="{Binding User.PasswordConfirm}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <Button Command="{Binding RegisterCommand}"
                    IsEnabled="{Binding IsEnabled}"
                    Text="{i18n:Translate Register}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


45. Modificamos la RegisterPageViewModel:


public class RegisterPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IRegexHelper _regexHelper;
    private readonly IApiService _apiService;
    private ImageSource _image;
    private UserRequest _user;
    private City _city;
    private ObservableCollection<City> _cities;
    private Department _department;
    private ObservableCollection<Department> _departments;
    private Country _country;
    private ObservableCollection<Country> _countries;
    private bool _isRunning;
    private bool _isEnabled;
    private DelegateCommand _registerCommand;


    public RegisterPageViewModel(
        INavigationService navigationService,
        IRegexHelper regexHelper,
        IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _regexHelper = regexHelper;
        _apiService = apiService;
        Title = Languages.Register;
        Image = App.Current.Resources["UrlNoImage"].ToString();
        IsEnabled = true;
        User = new UserRequest();
        LoadCountriesAsync();


    }


    public DelegateCommand RegisterCommand => _registerCommand ?? (_registerCommand = new DelegateCommand(RegisterAsync));


    public ImageSource Image
    {
        get => _image;
        set => SetProperty(ref _image, value);
    }


    public UserRequest User
    {
        get => _user;
        set => SetProperty(ref _user, value);
    }


    public Country Country
    {
        get => _country;
        set
        {
            Departments = value != null ? new ObservableCollection<Department>(value.Departments) : null;
            Cities = new ObservableCollection<City>();
            Department = null;
            City = null;
            SetProperty(ref _country, value);
        }
    }


    public ObservableCollection<Country> Countries
    {
        get => _countries;
        set => SetProperty(ref _countries, value);
    }


    public Department Department
    {
        get => _department;
        set
        {
            Cities = value != null ? new ObservableCollection<City>(value.Cities) : null;
            City = null;
            SetProperty(ref _department, value);
        }
    }


    public ObservableCollection<Department> Departments
    {
        get => _departments;
        set => SetProperty(ref _departments, value);
    }


    public City City
    {
        get => _city;
        set => SetProperty(ref _city, value);
    }


    public ObservableCollection<City> Cities
    {
        get => _cities;
        set => SetProperty(ref _cities, value);
    }
    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    private async void LoadCountriesAsync()
    {
        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.GetListAsync<Country>(url, "/api", "/Countries");
        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert("Error", response.Message, "Aceptar");
            return;
        }


        List<Country> list = (List<Country>)response.Result;
        Countries = new ObservableCollection<Country>(list.OrderBy(c => c.Name));
    }


    private async void RegisterAsync()
    {
        bool isValid = await ValidateDataAsync();
        if (!isValid)
        {
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }
    }


    private async Task<bool> ValidateDataAsync()
    {
        if (string.IsNullOrEmpty(User.Document))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DocumentError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.FirstName))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.FirstNameError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.LastName))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.LastNameError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.Address))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.AddressError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.Email) || !_regexHelper.IsValidEmail(User.Email))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.EmailError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.Phone))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PhoneError, Languages.Accept);
            return false;
        }


        if (Country == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CountryError, Languages.Accept);
            return false;
        }


        if (Department == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DepartmentError, Languages.Accept);
            return false;
        }


        if (City == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CityError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.Password) || User.Password?.Length < 6)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PasswordError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.PasswordConfirm))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PasswordConfirmError1, Languages.Accept);
            return false;
        }


        if (User.Password != User.PasswordConfirm)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PasswordConfirmError2, Languages.Accept);
            return false;
        }


        return true;
    }
}


46. Probamos lo que llevamos hasta el momento.


47. Adicionar este método al IApiService:


Task<Response> RegisterUserAsync(string urlBase, string servicePrefix, string controller, UserRequest userRequest);


48. Adicionar este método al ApiService:


public async Task<Response> RegisterUserAsync(string urlBase, string servicePrefix, string controller, UserRequest userRequest)
{
    try
    {
        string request = JsonConvert.SerializeObject(userRequest);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string answer = await response.Content.ReadAsStringAsync();
        Response obj = JsonConvert.DeserializeObject<Response>(answer);
        return obj;
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


49. Modificamos la RegisterPageViewModel:


private async void RegisterAsync()
{
    bool isValid = await ValidateDataAsync();
    if (!isValid)
    {
        return;
    }


    IsRunning = true;
    IsEnabled = false;


    if (Connectivity.NetworkAccess != NetworkAccess.Internet)
    {
        IsRunning = false;
        IsEnabled = true;
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
        return;
    }


    string url = App.Current.Resources["UrlAPI"].ToString();


    User.CityId = City.Id;


    Response response = await _apiService.RegisterUserAsync(url, "/api", "/Account/Register", User);
    IsRunning = false;
    IsEnabled = true;


    if (!response.IsSuccess)
    {
        if (response.Message == "Error003")
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error003, Languages.Accept);
        }
        else if (response.Message == "Error004")
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error004, Languages.Accept);
        }
        else
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
        }


        return;
    }


    await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.RegisterMessge, Languages.Accept);
    await _navigationService.GoBackAsync();
}
Adicionando imágenes en el registro de usuarios
1. Adicionamos el Xam.Plugin.Media a todos los proyectos de movilidad. Adicional al proyecto Android le agregamos los siguientes nuggets: Plugin.Permissions, Plugin.CurrentActivity y Xamarin.Android.Support.v4.


2. Modificamos la MainActivity:


using Android.App;
using Android.Content.PM;
using Android.OS;
using Plugin.CurrentActivity;
using Prism;
using Prism.Ioc;
using Syncfusion.SfBusyIndicator.XForms.Droid;
using Syncfusion.SfRotator.XForms.Droid;
using Plugin.Permissions;


namespace OnSale.Prism.Droid
{
    [Activity(Label = "On Sale", Icon = "@mipmap/ic_launcher", Theme = "@style/MainTheme", MainLauncher = false, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]
    public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity
    {
        protected override void OnCreate(Bundle savedInstanceState)
        {
            TabLayoutResource = Resource.Layout.Tabbar;
            ToolbarResource = Resource.Layout.Toolbar;


            base.OnCreate(savedInstanceState);


            Xamarin.Essentials.Platform.Init(this, savedInstanceState);
            CrossCurrentActivity.Current.Init(this, savedInstanceState);
            global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
            FFImageLoading.Forms.Platform.CachedImageRenderer.Init(true);
            new SfBusyIndicatorRenderer();
            new SfRotatorRenderer();
            LoadApplication(new App(new AndroidInitializer()));
        }


        public override void OnRequestPermissionsResult(int requestCode, string[] permissions, Android.Content.PM.Permission[] grantResults)
        {
            Xamarin.Essentials.Platform.OnRequestPermissionsResult(requestCode, permissions, grantResults);
PermissionsImplementation.Current.OnRequestPermissionsResult(requestCode, permissions, grantResults);
            base.OnRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }


    public class AndroidInitializer : IPlatformInitializer
    {
        public void RegisterTypes(IContainerRegistry containerRegistry)
        {
        }
    }
}


3. Modificamos el AndroidManifest:


<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="1" android:versionName="1.0" package="com.companyname.appname" android:installLocation="auto">
    <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="29" />
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <application android:label="On Sale" android:icon="@mipmap/ic_launcher">
        <provider android:name="android.support.v4.content.FileProvider"
                android:authorities="${applicationId}.fileprovider"
                android:exported="false"
                android:grantUriPermissions="true">
          <meta-data android:name="android.support.FILE_PROVIDER_PATHS"
                    android:resource="@xml/file_paths"></meta-data>
        </provider>
    </application>
</manifest>


4. Adicionamos la carpeta xml dentro de Resources y en esta, adicionamos el file_paths.xml:


<?xml version="1.0" encoding="UTF-8" ?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
  <external-files-path name="my_images" path="Pictures" />
  <external-files-path name="my_movies" path="Movies" />
</paths>


5. Adicionamos estos permisos al info.plist:


<key>NSCameraUsageDescription</key>
<string>This app needs access to the camera to take photos.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to photos.</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to microphone.</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to the photo gallery.</string>


6. Adicionar estos literales:


Ingles


  <data name="PictureSource" xml:space="preserve">
    <value>Where do you want to take the picture?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="FromCamera" xml:space="preserve">
    <value>From Camera</value>
  </data>
  <data name="FromGallery" xml:space="preserve">
    <value>From Gallery</value>
  </data>
  <data name="NoCameraSupported" xml:space="preserve">
    <value>The device does not support access to the camera.</value>
  </data>
  <data name="NoGallerySupported" xml:space="preserve">
    <value>The device does not support access to the gallery.</value>
  </data>


Español


  <data name="PictureSource" xml:space="preserve">
    <value>¿De donde quieres tomar la imagen?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="FromCamera" xml:space="preserve">
    <value>De la cámara</value>
  </data>
  <data name="FromGallery" xml:space="preserve">
    <value>De la galería</value>
  </data>
  <data name="NoCameraSupported" xml:space="preserve">
    <value>El dispositivo no admite el acceso a la cámara.</value>
  </data>
  <data name="NoGallerySupported" xml:space="preserve">
    <value>El dispositivo no admite el acceso a la galería.</value>
  </data>




Portuguez


  <data name="RegisterMessge" xml:space="preserve">
    <value>Seu usuário foi cadastrado ok, um email foi enviado para confirmar a conta do usuário.</value>
  </data>
  <data name="PictureSource" xml:space="preserve">
    <value>De onde você quer tirar a imagem?</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="FromCamera" xml:space="preserve">
    <value>Da camera</value>
  </data>
  <data name="FromGallery" xml:space="preserve">
    <value>Da galeria</value>
  </data>
  <data name="NoCameraSupported" xml:space="preserve">
    <value>O dispositivo não suporta acesso à câmera.</value>
  </data>
  <data name="NoGallerySupported" xml:space="preserve">
    <value>O dispositivo não suporta acesso à galeria.</value>
  </data>


7. Modificar Languages:


public static string PictureSource => Resource.PictureSource;


public static string Cancel => Resource.Cancel;


public static string FromCamera => Resource.FromCamera;


public static string FromGallery => Resource.FromGallery;


public static string NoCameraSupported => Resource.NoCameraSupported;


public static string NoGallerySupported => Resource.NoGallerySupported;


8. Modificamos el IFilesHelper:


public interface IFilesHelper
{
    byte[] ReadFully(Stream input);
}


9. Modificamos el FilesHelper:


public class FilesHelper : IFilesHelper
{
    public byte[] ReadFully(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            input.CopyTo(ms);
            return ms.ToArray();
        }
    }
}


10. Configuramos la inyección del nuevo helper:
...
containerRegistry.RegisterSingleton<IAppInfo, AppInfoImplementation>();


containerRegistry.Register<IApiService, ApiService>();
containerRegistry.Register<IRegexHelper, RegexHelper>();
containerRegistry.Register<IFilesHelper, FilesHelper>();


containerRegistry.RegisterForNavigation<NavigationPage>();
containerRegistry.RegisterForNavigation<ProductsPage, ProductsPageViewModel>();
containerRegistry.RegisterForNavigation<ProductDetailPage, ProductDetailPageViewModel>();
...


11. Modificamos el RegisterPageViewModel:


private readonly IFilesHelper _filesHelper;
…
private MediaFile _file;
private DelegateCommand _changeImageCommand;
…
public RegisterPageViewModel(
    INavigationService navigationService,
    IRegexHelper regexHelper,
    IApiService apiService,
    IFilesHelper filesHelper)
    : base(navigationService)
{
    _navigationService = navigationService;
    _regexHelper = regexHelper;
    _apiService = apiService;
    _filesHelper = filesHelper;
    Title = Languages.Register;
    Image = App.Current.Resources["UrlNoImage"].ToString();
    IsEnabled = true;
    User = new UserRequest();
    LoadCountriesAsync();
}
…
public DelegateCommand ChangeImageCommand => _changeImageCommand ??
    (_changeImageCommand = new DelegateCommand(ChangeImageAsync));
...
private async void RegisterAsync()
{
    bool isValid = await ValidateDataAsync();
    if (!isValid)
    {
        return;
    }


    IsRunning = true;
    IsEnabled = false;


    if (Connectivity.NetworkAccess != NetworkAccess.Internet)
    {
        IsRunning = false;
        IsEnabled = true;
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
        return;
    }


    byte[] imageArray = null;
    if (_file != null)
    {
        imageArray = _filesHelper.ReadFully(_file.GetStream());
    }


    User.ImageArray = imageArray;
    User.CityId = City.Id;


    string url = App.Current.Resources["UrlAPI"].ToString();
    Response response = await _apiService.RegisterUserAsync(url, "/api", "/Account/Register", User);
    IsRunning = false;
    IsEnabled = true;


    if (!response.IsSuccess)
    {
        if (response.Message == "Error003")
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error003, Languages.Accept);
        }
        else if (response.Message == "Error004")
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error004, Languages.Accept);
        }
        else
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
        }


        return;
    }


    await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.RegisterMessge, Languages.Accept);
    await _navigationService.GoBackAsync();
}


private async void ChangeImageAsync()
{
    await CrossMedia.Current.Initialize();


    string source = await Application.Current.MainPage.DisplayActionSheet(
        Languages.PictureSource,
        Languages.Cancel,
        null,
        Languages.FromGallery,
        Languages.FromCamera);


    if (source == Languages.Cancel)
    {
        _file = null;
        return;
    }


    if (source == Languages.FromCamera)
    {
        if (!CrossMedia.Current.IsCameraAvailable)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.NoCameraSupported, Languages.Accept);
            return;
        }


        _file = await CrossMedia.Current.TakePhotoAsync(
            new StoreCameraMediaOptions
            {
                Directory = "Sample",
                Name = "test.jpg",
                PhotoSize = PhotoSize.Small,
            }
        );
    }
    else
    {
        if (!CrossMedia.Current.IsPickPhotoSupported)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.NoGallerySupported, Languages.Accept);
            return;
        }


        _file = await CrossMedia.Current.PickPhotoAsync();
    }


    if (_file != null)
    {
        Image = ImageSource.FromStream(() =>
        {
            System.IO.Stream stream = _file.GetStream();
            return stream;
        });
    }
}


12. Probamos.
Recuperación de contraseña
13. Adicionar estos literales:


Ingles


  <data name="RecoverPassword" xml:space="preserve">
    <value>Recover Password</value>
  </data>
  <data name="RecoverPasswordMessage" xml:space="preserve">
    <value>An email was sent to change your password.</value>
  </data>


Español


  <data name="RecoverPassword" xml:space="preserve">
    <value>Recuperar Contraseña</value>
  </data>
  <data name="RecoverPasswordMessage" xml:space="preserve">
    <value>Se envió un correo electrónico para cambiar su contraseña.</value>
  </data>


Portuguez


  <data name="RecoverPassword" xml:space="preserve">
    <value>Recuperar Senha</value>
  </data>
  <data name="RecoverPasswordMessage" xml:space="preserve">
    <value>Um email foi enviado para alterar sua senha.</value>
  </data>


14. Modificar Languages:


public static string RecoverPassword => Resource.RecoverPassword;


public static string RecoverPasswordMessage => Resource.RecoverPasswordMessage;


15. Adicionar este método al IApiService:


Task<Response> RecoverPasswordAsync(string urlBase, string servicePrefix, string controller, EmailRequest emailRequest);


16. Adicionar este método al ApiService:


public async Task<Response> RecoverPasswordAsync(string urlBase, string servicePrefix, string controller, EmailRequest emailRequest)
{
    try
    {
        string request = JsonConvert.SerializeObject(emailRequest);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string answer = await response.Content.ReadAsStringAsync();
        Response obj = JsonConvert.DeserializeObject<Response>(answer);
        return obj;
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message,
        };
    }
}


17. Adicionar la RecoverPasswordPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             x:Class="OnSale.Prism.Views.RecoverPasswordPage"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
    
    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All"
                     Padding="5">
            <ScrollView>
                <StackLayout Spacing="0">


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Email}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate EmailPlaceHolder}" 
                               Keyboard="Email"
                               Text="{Binding Email}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <Button Command="{Binding RecoverCommand}"
                    IsEnabled="{Binding IsEnabled}"
                    Text="{i18n:Translate RecoverPassword}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


18. Modificar la RecoverPasswordPageViewModel:


public class RecoverPasswordPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private readonly IRegexHelper _regexHelper;
    private bool _isRunning;
    private bool _isEnabled;
    private DelegateCommand _recoverCommand;


    public RecoverPasswordPageViewModel(
        INavigationService navigationService,
        IApiService apiService,
        IRegexHelper regexHelper)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        _regexHelper = regexHelper;
        Title = Languages.RecoverPassword;
        IsEnabled = true;
    }


    public DelegateCommand RecoverCommand => _recoverCommand ?? (_recoverCommand = new DelegateCommand(RecoverAsync));


    public string Email { get; set; }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    private async void RecoverAsync()
    {
        bool isValid = await ValidateData();
        if (!isValid)
        {
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        EmailRequest request = new EmailRequest { Email = Email };
        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.RecoverPasswordAsync(url, "/api", "/Account/RecoverPassword", request);


        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            if (response.Message == "Error001")
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error001, Languages.Accept);
            }
            else
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            }


            return;
        }


        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.RecoverPasswordMessage, Languages.Accept);
        await _navigationService.GoBackAsync();
    }


    private async Task<bool> ValidateData()
    {
        if (string.IsNullOrEmpty(Email) || !_regexHelper.IsValidEmail(Email))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.EmailError, Languages.Accept);
            return false;
        }


        return true;
    }
}


19. Modificar la LoginViewModel:


private async void ForgotPasswordAsync()
{
    await _navigationService.NavigateAsync(nameof(RecoverPasswordPage));
}


20. Probamos.
________________
Modificar usuario
Vamos a implementar la siguiente pantalla:


Android
  

	iOS
  

	

21. Adicionar estos literales:


Ingles


  <data name="ChangePassword" xml:space="preserve">
    <value>Change Password</value>
  </data>
  <data name="ChangeUserMessage" xml:space="preserve">
    <value>User updated.</value>
  </data>


Español


  <data name="ChangePassword" xml:space="preserve">
    <value>Cambiar Contraseña</value>
  </data>
  <data name="ChangeUserMessage" xml:space="preserve">
    <value>Usuario actualizado.</value>
  </data>


Portuguez


  <data name="ChangePassword" xml:space="preserve">
    <value>Mudar Senha</value>
  </data>
   <data name="ChangeUserMessage" xml:space="preserve">
    <value>Usuário atualizado.</value>
  </data>


22. Modificar Languages:


public static string ChangePassword => Resource.ChangePassword;


public static string ChangeUserMessage => Resource.ChangeUserMessage;


23. Adicionar este método al IApiService:


Task<Response> ModifyUserAsync(string urlBase, string servicePrefix, string controller, UserRequest userRequest, string token);


24. Adicionar este método al ApiService:


public async Task<Response> ModifyUserAsync(string urlBase, string servicePrefix, string controller, UserRequest userRequest, string token)
{
    try
    {
        string request = JsonConvert.SerializeObject(userRequest);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PutAsync(url, content);
        string answer = await response.Content.ReadAsStringAsync();


        if(!response.IsSuccessStatusCode)
        {
            return JsonConvert.DeserializeObject<Response>(answer);
        }


        UserResponse user = JsonConvert.DeserializeObject<UserResponse>(answer);
        return new Response
        {
            IsSuccess = true,
            Result = user
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


25. Modificamos la ModifyUserPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:fftransformations="clr-namespace:FFImageLoading.Transformations;assembly=FFImageLoading.Transformations"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             x:Class="OnSale.Prism.Views.ModifyUserPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
       <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All"
                     Padding="5">
            <ScrollView>
                <StackLayout Spacing="0">
                    <ffimageloading:CachedImage Aspect="AspectFit"
                                                Source="{Binding Image}" 
                                                CacheDuration= "50"
                                                HeightRequest="150"
                                                Margin="5"
                                                RetryCount= "3"
                                                RetryDelay= "600">
                        <ffimageloading:CachedImage.Transformations>
                            <fftransformations:CircleTransformation />
                        </ffimageloading:CachedImage.Transformations>
                        <ffimageloading:CachedImage.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding ChangeImageCommand}"/>
                        </ffimageloading:CachedImage.GestureRecognizers>
                    </ffimageloading:CachedImage>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Document}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate DocumentPlaceHolder}" 
                               Text="{Binding User.Document}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate FirstName}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate FirstNamePlaceHolder}" 
                               Text="{Binding User.FirstName}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate LastName}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate LastName}" 
                               Text="{Binding User.LastName}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Country}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Countries}"
                                SelectedItem="{Binding Country}"
                                Title="{i18n:Translate CountryPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Department}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Departments}"
                                SelectedItem="{Binding Department}"
                                Title="{i18n:Translate DepartmentPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate City}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding Cities}"
                                SelectedItem="{Binding City}"
                                Title="{i18n:Translate CityPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Address}" 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate AddressPlaceHolder}" 
                               Text="{Binding User.Address}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Phone} " 
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate PhonePlaceHolder}" 
                               Keyboard="Telephone"
                               Text="{Binding User.Phone}" />
                    </inputLayout:SfTextInputLayout>
                </StackLayout>
            </ScrollView>
            <StackLayout Orientation="Horizontal"
                         VerticalOptions="EndAndExpand">
                <Button Command="{Binding SaveCommand}"
                        IsEnabled="{Binding IsEnabled}"
                        Text="{i18n:Translate Save}"/>
                <Button Command="{Binding ChangePasswordCommand}"
                        IsEnabled="{Binding IsEnabled}"
                        Style="{StaticResource SecondaryButton}"
                        Text="{i18n:Translate ChangePassword}"/>
            </StackLayout>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


26. Modificamos la OnSaleMasterDetailPageViewModel:


private static OnSaleMasterDetailPageViewModel _instance;
        
public OnSaleMasterDetailPageViewModel(INavigationService navigationService) : base(navigationService)
{
    _instance = this;
    _navigationService = navigationService;
    LoadMenus();
    LoadUser();
}
…
public static OnSaleMasterDetailPageViewModel GetInstance()
{
    return _instance;
}


public void LoadUser()
{
    if (Settings.IsLogin)
    {
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        User = token.User;
    }
}


27. Modificamos la ModifyUserPageViewModel:


public class ModifyUserPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private readonly IFilesHelper _filesHelper;
    private ImageSource _image;
    private UserResponse _user;
    private City _city;
    private ObservableCollection<City> _cities;
    private Department _department;
    private ObservableCollection<Department> _departments;
    private Country _country;
    private ObservableCollection<Country> _countries;
    private bool _isRunning;
    private bool _isEnabled;
    private MediaFile _file;
    private DelegateCommand _changeImageCommand;
    private DelegateCommand _saveCommand;
    private DelegateCommand _changePasswordCommand;


    public ModifyUserPageViewModel(
        INavigationService navigationService,
        IApiService apiService,
        IFilesHelper filesHelper)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        _filesHelper = filesHelper;
        Title = Languages.ModifyUser;
        IsEnabled = true;
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        User = token.User;
        Image = User.ImageFullPath;
        LoadCountriesAsync();
    }


    public DelegateCommand ChangeImageCommand => _changeImageCommand ??
        (_changeImageCommand = new DelegateCommand(ChangeImageAsync));


    public DelegateCommand SaveCommand => _saveCommand ??
        (_saveCommand = new DelegateCommand(SaveAsync));


    public DelegateCommand ChangePasswordCommand => _changePasswordCommand ??
        (_changePasswordCommand = new DelegateCommand(ChangePasswordAsync));


    public ImageSource Image
    {
        get => _image;
        set => SetProperty(ref _image, value);
    }


    public UserResponse User
    {
        get => _user;
        set => SetProperty(ref _user, value);
    }


    public Country Country
    {
        get => _country;
        set
        {
            Departments = value != null ? new ObservableCollection<Department>(value.Departments) : null;
            Cities = new ObservableCollection<City>();
            Department = null;
            City = null;
            SetProperty(ref _country, value);
        }
    }


    public ObservableCollection<Country> Countries
    {
        get => _countries;
        set => SetProperty(ref _countries, value);
    }


    public Department Department
    {
        get => _department;
        set
        {
            Cities = value != null ? new ObservableCollection<City>(value.Cities) : null;
            City = null;
            SetProperty(ref _department, value);
        }
    }


    public ObservableCollection<Department> Departments
    {
        get => _departments;
        set => SetProperty(ref _departments, value);
    }


    public City City
    {
        get => _city;
        set => SetProperty(ref _city, value);
    }


    public ObservableCollection<City> Cities
    {
        get => _cities;
        set => SetProperty(ref _cities, value);
    }
    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    private async void LoadCountriesAsync()
    {
        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.GetListAsync<Country>(url, "/api", "/Countries");
        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert("Error", response.Message, "Aceptar");
            return;
        }


        List<Country> list = (List<Country>)response.Result;
        Countries = new ObservableCollection<Country>(list.OrderBy(c => c.Name));
        LoadCurrentCountyDepartmentCity();
    }


    private void LoadCurrentCountyDepartmentCity()
    {
        Country = Countries.FirstOrDefault(c => c.Departments.FirstOrDefault(d => d.Cities.FirstOrDefault(ci => ci.Id == User.City.Id) != null) != null);
        Department = Country.Departments.FirstOrDefault(d => d.Cities.FirstOrDefault(c => c.Id == User.City.Id) != null);
        City = Department.Cities.FirstOrDefault(c => c.Id == User.City.Id);
    }


    private async void ChangeImageAsync()
    {
        await CrossMedia.Current.Initialize();


        string source = await Application.Current.MainPage.DisplayActionSheet(
            Languages.PictureSource,
            Languages.Cancel,
            null,
            Languages.FromGallery,
            Languages.FromCamera);


        if (source == Languages.Cancel)
        {
            _file = null;
            return;
        }


        if (source == Languages.FromCamera)
        {
            if (!CrossMedia.Current.IsCameraAvailable)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.NoCameraSupported, Languages.Accept);
                return;
            }


            _file = await CrossMedia.Current.TakePhotoAsync(
                new StoreCameraMediaOptions
                {
                    Directory = "Sample",
                    Name = "test.jpg",
                    PhotoSize = PhotoSize.Small,
                }
            );
        }
        else
        {
            if (!CrossMedia.Current.IsPickPhotoSupported)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.NoGallerySupported, Languages.Accept);
                return;
            }


            _file = await CrossMedia.Current.PickPhotoAsync();
        }


        if (_file != null)
        {
            Image = ImageSource.FromStream(() =>
            {
                System.IO.Stream stream = _file.GetStream();
                return stream;
            });
        }
    }


    private async void SaveAsync()
    {
        bool isValid = await ValidateDataAsync();
        if (!isValid)
        {
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        byte[] imageArray = null;
        if (_file != null)
        {
            imageArray = _filesHelper.ReadFully(_file.GetStream());
        }


        UserRequest request = new UserRequest
        {
            Address = User.Address,
            CityId = City.Id,
            Document = User.Document,
            Email = User.Email,
            FirstName = User.FirstName,
            ImageArray = imageArray,
            LastName = User.LastName,
            Password = "123456", // Doen't matter, it's only to pass the data annotation
            Phone = User.PhoneNumber
        };


        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.ModifyUserAsync(url, "/api", "/Account", request, token.Token);
        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            if (response.Message == "Error001")
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error001, Languages.Accept);
            }
            else if (response.Message == "Error004")
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error004, Languages.Accept);
            }
            else
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            }


            return;
        }


        UserResponse updatedUser = (UserResponse)response.Result;
        token.User = updatedUser;
        Settings.Token = JsonConvert.SerializeObject(token);
        OnSaleMasterDetailPageViewModel.GetInstance().LoadUser();
        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.ChangeUserMessage, Languages.Accept);
    }


    private async Task<bool> ValidateDataAsync()
    {
        if (string.IsNullOrEmpty(User.Document))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DocumentError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.FirstName))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.FirstNameError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.LastName))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.LastNameError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.Address))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.AddressError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(User.PhoneNumber))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PhoneError, Languages.Accept);
            return false;
        }


        if (Country == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CountryError, Languages.Accept);
            return false;
        }


        if (Department == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DepartmentError, Languages.Accept);
            return false;
        }


        if (City == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CityError, Languages.Accept);
            return false;
        }


        return true;
    }


    private async void ChangePasswordAsync()
    {
    }
}


28. Probamos.
Cambio de contraseña
29. Adicionar estos literales:


Ingles


  <data name="ConfirmNewPassword" xml:space="preserve">
    <value>Confirm new password</value>
  </data>
  <data name="ConfirmNewPasswordError1" xml:space="preserve">
    <value>You must enter a confirmation for the new password.</value>
  </data>
  <data name="ConfirmNewPasswordError2" xml:space="preserve">
    <value>The password and the confirmation doesn't match.</value>
  </data>
  <data name="ConfirmNewPasswordError2" xml:space="preserve">
    <value>User updated.</value>
  </data>
  <data name="ConfirmNewPasswordPlaceHolder" xml:space="preserve">
    <value>Enter the confirmation for the new password...</value>
  </data>
  <data name="CurrentPassword" xml:space="preserve">
    <value>Current password</value>
  </data>
  <data name="CurrentPasswordError" xml:space="preserve">
    <value>You must enter your new password.</value>
  </data>
  <data name="CurrentPasswordPlaceHolder" xml:space="preserve">
    <value>Enter your current password....</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="NewPasswordError" xml:space="preserve">
    <value>You must enter the new password.</value>
  </data>
  <data name="NewPasswordPlaceHolder" xml:space="preserve">
    <value>Enter the new password...</value>
  </data>
 <data name="Error005" xml:space="preserve">
    <value>The current password is incorrect.</value>
  </data>
  <data name="ChangePassworrdMessage" xml:space="preserve">
    <value>The password was changed successfully.</value>
  </data>


Español


 <data name="ConfirmNewPassword" xml:space="preserve">
    <value>Confirmación de contraseña nueva</value>
  </data>
  <data name="ConfirmNewPasswordError1" xml:space="preserve">
    <value>Debes ingresar una confirmación para la nueva contraseña.</value>
  </data>
  <data name="ConfirmNewPasswordError2" xml:space="preserve">
    <value>La nueva contraseña y la confirmación no concuerdan.</value>
  </data>
  <data name="ConfirmNewPasswordPlaceHolder" xml:space="preserve">
    <value>Ingrese la confirmación para la contraseña nueva...</value>
  </data>
  <data name="CurrentPassword" xml:space="preserve">
    <value>Contraseña actual</value>
  </data>
  <data name="CurrentPasswordError" xml:space="preserve">
    <value>Debes ingresar tu contraseña actual.</value>
  </data>
  <data name="CurrentPasswordPlaceHolder" xml:space="preserve">
    <value>Ingresa tu contraseña actual...</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>Nueva contraseña</value>
  </data>
  <data name="NewPasswordError" xml:space="preserve">
    <value>Debes ingresar una nueva cotraseña.</value>
  </data>
  <data name="NewPasswordPlaceHolder" xml:space="preserve">
    <value>Ingrese la contraseña nueva...</value>
  </data>
  <data name="Error005" xml:space="preserve">
    <value>La contraseña actual es incorrecta.</value>
  </data>
  <data name="ChangePassworrdMessage" xml:space="preserve">
    <value>La contraseña se cambió con éxito.</value>
  </data>


Portuguez


 <data name="ConfirmNewPassword" xml:space="preserve">
    <value>Nova confirmação de senha</value>
  </data>
  <data name="ConfirmNewPasswordError1" xml:space="preserve">
    <value>Você deve inserir uma confirmação para a nova senha.</value>
  </data>
  <data name="ConfirmNewPasswordError2" xml:space="preserve">
    <value>A nova senha e a confirmação não correspondem.</value>
  </data>
  <data name="ConfirmNewPasswordPlaceHolder" xml:space="preserve">
    <value>Digite a confirmação para a nova senha ...</value>
  </data>
  <data name="CurrentPassword" xml:space="preserve">
    <value>Senha atual</value>
  </data>
  <data name="CurrentPasswordError" xml:space="preserve">
    <value>Você deve inserir sua senha atual.</value>
  </data>
  <data name="CurrentPasswordPlaceHolder" xml:space="preserve">
    <value>Digite sua senha atual ...</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>Nova senha</value>
  </data>
  <data name="NewPasswordError" xml:space="preserve">
    <value>Você deve inserir uma nova senha.</value>
  </data>
  <data name="NewPasswordPlaceHolder" xml:space="preserve">
    <value>Digite a nova senha ...</value>
  </data>
  <data name="Error005" xml:space="preserve">
    <value>A senha atual está incorreta.</value>
  </data>
  <data name="ChangePassworrdMessage" xml:space="preserve">
    <value>A senha foi alterada com sucesso.</value>
  </data>


30. Modificar Languages:


public static string ConfirmNewPassword => Resource.ConfirmNewPassword;


public static string ConfirmNewPasswordError1 => Resource.ConfirmNewPasswordError1;


public static string ConfirmNewPasswordError2 => Resource.ConfirmNewPasswordError2;


public static string ConfirmNewPasswordPlaceHolder => Resource.ConfirmNewPasswordPlaceHolder;


public static string CurrentPassword => Resource.CurrentPassword;


public static string CurrentPasswordError => Resource.CurrentPasswordError;


public static string CurrentPasswordPlaceHolder => Resource.CurrentPasswordPlaceHolder;


public static string NewPassword => Resource.NewPassword;


public static string NewPasswordError => Resource.NewPasswordError;


public static string NewPasswordPlaceHolder => Resource.NewPasswordPlaceHolder;


public static string Error005 => Resource.Error005;


public static string ChangePassworrdMessage => Resource.ChangePassworrdMessage;


31. Adicionar este método al IApiService:


Task<Response> ChangePasswordAsync(string urlBase, string servicePrefix, string controller, ChangePasswordRequest changePasswordRequest, string token);


32. Adicionar este método al ApiService:


public async Task<Response> ChangePasswordAsync(string urlBase, string servicePrefix, string controller, ChangePasswordRequest changePasswordRequest, string token)
{
    try
    {
        string request = JsonConvert.SerializeObject(changePasswordRequest);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string answer = await response.Content.ReadAsStringAsync();
        Response obj = JsonConvert.DeserializeObject<Response>(answer);
        return obj;
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message,
        };
    }
}


33. Adicionamos la ChangePasswordPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             x:Class="OnSale.Prism.Views.ChangePasswordPage"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
    
    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All"
                     Padding="5">
            <ScrollView>
                <StackLayout Spacing="0">


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate CurrentPassword}" 
                                                   EnablePasswordVisibilityToggle="true"
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate CurrentPasswordPlaceHolder}" 
                               IsPassword="True"
                               Text="{Binding CurrentPassword}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate NewPassword}" 
                                                   EnablePasswordVisibilityToggle="true"
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate NewPasswordPlaceHolder}" 
                               IsPassword="True"
                               Text="{Binding NewPassword}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate ConfirmNewPassword}" 
                                                   EnablePasswordVisibilityToggle="true"
                                                   ContainerType="Outlined">
                        <Entry Placeholder="{i18n:Translate ConfirmNewPasswordPlaceHolder}" 
                               IsPassword="True"
                               Text="{Binding PasswordConfirm}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <Button Command="{Binding ChangePasswordCommand}"
                    IsEnabled="{Binding IsEnabled}"
                    Text="{i18n:Translate ChangePassword}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


34. Modificamos la ChangePasswordPageViewModel:


public class ChangePasswordPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private bool _isRunning;
    private bool _isEnabled;
    private DelegateCommand _changePasswordCommand;


    public ChangePasswordPageViewModel(INavigationService navigationService, IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        IsEnabled = true;
        Title = Languages.ChangePassword;
    }
    public DelegateCommand ChangePasswordCommand => _changePasswordCommand ?? (_changePasswordCommand = new DelegateCommand(ChangePasswordAsync));


    public string CurrentPassword { get; set; }


    public string NewPassword { get; set; }


    public string PasswordConfirm { get; set; }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    private async void ChangePasswordAsync()
    {
        var isValid = await ValidateDataAsync();
        if (!isValid)
        {
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        ChangePasswordRequest request = new ChangePasswordRequest
        {
            NewPassword = NewPassword,
            OldPassword = CurrentPassword,
        };


        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.ChangePasswordAsync(url, "/api", "/Account/ChangePassword", request, token.Token);


        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            if (response.Message == "Error001")
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error001, Languages.Accept);
            }
            else if (response.Message == "Error005")
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.Error005, Languages.Accept);
            }
            else
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            }


            return;
        }


        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.ChangePassworrdMessage, Languages.Accept);
        await _navigationService.GoBackAsync();
    }


    private async Task<bool> ValidateDataAsync()
    {
        if (string.IsNullOrEmpty(CurrentPassword))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CurrentPasswordError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(NewPassword) || NewPassword?.Length < 6)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.NewPasswordError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(PasswordConfirm))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConfirmNewPasswordError1, Languages.Accept);
            return false;
        }


        if (NewPassword != PasswordConfirm)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConfirmNewPasswordError2, Languages.Accept);
            return false;
        }


        return true;
    }
}


35. Modificar la ModifyUserPageViewModel:


private async void ChangePasswordAsync()
{
    await _navigationService.NavigateAsync(nameof(ChangePasswordPage));
}


36. Probamos.
Adicionar productos al carro de compras
37. Adicionar estos literales:


Ingles


  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="QuantityError" xml:space="preserve">
    <value>You must enter a quantity.</value>
  </data>
  <data name="QuantityPlaceHolder" xml:space="preserve">
    <value>Enter the product quantity...</value>
  </data>
  <data name="AddToCartMessage" xml:space="preserve">
    <value>The product was added to cart successfully.</value>
  </data>
  <data name="ProductExistInOrder" xml:space="preserve">
    <value>The product already exists on the order. You can modify the order in 'View shopping cart'.</value>
  </data>


Español


 <data name="Quantity" xml:space="preserve">
    <value>Cantidad</value>
  </data>
  <data name="QuantityError" xml:space="preserve">
    <value>Debes ingresar una cantidad.</value>
  </data>
  <data name="QuantityPlaceHolder" xml:space="preserve">
    <value>Ingresa la cantidad del producto...</value>
  </data>
  <data name="AddToCartMessage" xml:space="preserve">
    <value>El producto fue agregado al carro de compras con éxito.</value>
  </data>
  <data name="ProductExistInOrder" xml:space="preserve">
    <value>El producto ya existe en la orden. Puede modificar el pedido en 'Ver carro de compras'.</value>
  </data>


Portuguez


 <data name="Quantity" xml:space="preserve">
    <value>Quantidade</value>
  </data>
  <data name="QuantityError" xml:space="preserve">
    <value>Você deve inserir um valor.</value>
  </data>
  <data name="QuantityPlaceHolder" xml:space="preserve">
    <value>Insira a quantidade do produto...</value>
  </data>
  <data name="AddToCartMessage" xml:space="preserve">
    <value>O produto foi adicionado ao carrinho de compras com sucesso.</value>
  </data>
  <data name="ProductExistInOrder" xml:space="preserve">
    <value>O produto já existe no pedido. Você pode modificar o pedido em 'Ver carrinho de compras'.</value>
  </data>


38. Modificar Languages:


public static string Quantity => Resource.Quantity;


public static string QuantityError => Resource.QuantityError;


public static string QuantityPlaceHolder => Resource.QuantityPlaceHolder;


public static string AddToCartMessage => Resource.AddToCartMessage;


public static string ProductExistInOrder => Resource.ProductExistInOrder;


39. Agregar el nuget Syncfusion.Xamarin.SfNumericTextBox a todos los proyectos de movilidad.


40. Inicializar el nuget para iOS:


global::Xamarin.Forms.Forms.Init();
new SfNumericTextBoxRenderer();
FFImageLoading.Forms.Platform.CachedImageRenderer.Init();


41. Agregamos la propiedad OrderDetails a la clase Settings.


public static class Settings
{
    private const string _token = "token";
    private const string _isLogin = "isLogin";
    private const string _product = "product";
    private const string _orderDetails = "orderDetails";
    private static readonly string _stringDefault = string.Empty;
    private static readonly bool _boolDefault = false;


    private static ISettings AppSettings => CrossSettings.Current;


    public static string Token
    {
        get => AppSettings.GetValueOrDefault(_token, _stringDefault);
        set => AppSettings.AddOrUpdateValue(_token, value);
    }


    public static bool IsLogin
    {
        get => AppSettings.GetValueOrDefault(_isLogin, _boolDefault);
        set => AppSettings.AddOrUpdateValue(_isLogin, value);
    }


    public static string Product
    {
        get => AppSettings.GetValueOrDefault(_product, _stringDefault);
        set => AppSettings.AddOrUpdateValue(_product, value);
    }


    public static string OrderDetails
    {
        get => AppSettings.GetValueOrDefault(_orderDetails, _stringDefault);
        set => AppSettings.AddOrUpdateValue(_orderDetails, value);
    }
}


42. Agregamos en Common.Models la clase OrderDetail:


public class OrderDetail
{
    public int Id { get; set; }


    public ProductResponse Product { get; set; }


    public float Quantity { get; set; }


    public string Remarks { get; set; }


    public decimal? Value => (decimal)Quantity * Product?.Price;
}


43. Adicionar la AddToCartPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             xmlns:syncfusion="clr-namespace:Syncfusion.SfRotator.XForms;assembly=Syncfusion.SfRotator.XForms"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:numericBox="clr-namespace:Syncfusion.SfNumericTextBox.XForms;assembly=Syncfusion.SfNumericTextBox.XForms"
             x:Class="OnSale.Prism.Views.AddToCartPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <ScrollView>
                <StackLayout>
                    <syncfusion:SfRotator EnableAutoPlay="True"  
                                          EnableLooping="True"
                                          HeightRequest="300"
                                          ItemsSource="{Binding Images}"
                                          NavigationDelay="5000"
                                          NavigationDirection="Horizontal"
                                          NavigationStripMode="Dots"
                                          NavigationStripPosition="Bottom">
                        <syncfusion:SfRotator.ItemTemplate>
                            <DataTemplate>
                                <ffimageloading:CachedImage Aspect="AspectFit"
                                                            CacheDuration= "50"
                                                            DownsampleToViewSize = "true"
                                                            ErrorPlaceholder= "ErrorImage"
                                                            HeightRequest="300"
                                                            LoadingPlaceholder= "LoaderImage"
                                                            RetryCount= "3"
                                                            RetryDelay= "600"
                                                            Source="{Binding ImageFullPath}"/>
                            </DataTemplate>
                        </syncfusion:SfRotator.ItemTemplate>
                    </syncfusion:SfRotator>


                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Label Grid.Column="0"
                               Grid.Row="0"
                               Text="{i18n:Translate Name}"
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="0"
                               FontSize="Large"
                               Text="{Binding Product.Name}"/>


                        <Label Grid.Column="0"
                               Grid.Row="1"
                               Text="{i18n:Translate Price}"
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="1"
                               FontSize="Large"
                               Text="{Binding Product.Price, StringFormat='{0:C2}'}"/>
                    </Grid>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Quantity}" 
                                                   ContainerType="Outlined">
                        <numericBox:SfNumericTextBox FormatString="n"
                                                     Value="{Binding Quantity}"/>
                    </inputLayout:SfTextInputLayout>
                    
                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Remarks}" 
                                                   ContainerType="Outlined">
                        <Editor Placeholder="{i18n:Translate RemarksPlaceHolder}"
                                HeightRequest="100"
                                Text="{Binding Remarks}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <Button Command="{Binding AddToCartCommand}" 
                    CornerRadius="10"
                    Text="{i18n:Translate AddToCart}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


44. Modificar AddToCartPageViewModel:


public class AddToCartPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private ProductResponse _product;
    private ObservableCollection<ProductImage> _images;
    private bool _isRunning;
    private bool _isEnabled;
    private DelegateCommand _addToCartCommand;


    public AddToCartPageViewModel(INavigationService navigationService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        Title = Languages.AddToCart;
        IsEnabled = true;
        Quantity = 1;
    }


    public DelegateCommand AddToCartCommand => _addToCartCommand ?? (_addToCartCommand = new DelegateCommand(AddToCartAsync));


    public float Quantity { get; set; }


    public string Remarks { get; set; }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    public ObservableCollection<ProductImage> Images
    {
        get => _images;
        set => SetProperty(ref _images, value);
    }


    public ProductResponse Product
    {
        get => _product;
        set => SetProperty(ref _product, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);


        if (parameters.ContainsKey("product"))
        {
            Product = parameters.GetValue<ProductResponse>("product");
            Images = new ObservableCollection<ProductImage>(Product.ProductImages);
        }
    }


    private async void AddToCartAsync()
    {
        bool isValid = await ValidateDataAsync();
        if (!isValid)
            {
            return;
        }


        List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
        if (orderDetails == null)
        {
            orderDetails = new List<OrderDetail>();
        }


        foreach (var orderDetail in orderDetails)
        {
            if (orderDetail.Product.Id == Product.Id)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ProductExistInOrder, Languages.Accept);
                await _navigationService.GoBackAsync();
                return;
            }
        }




        orderDetails.Add(new OrderDetail
        {
            Product = Product,
            Quantity = Quantity,
            Remarks = Remarks
        });


        Settings.OrderDetails = JsonConvert.SerializeObject(orderDetails);
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.AddToCartMessage, Languages.Accept);
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    }


    private async Task<bool> ValidateDataAsync()
    {
        if (Quantity == 0)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.QuantityError, Languages.Accept);
            return false;
        }


        return true;
    }
}


45. Probemos lo que llevamos hasta el momento.


46. Para mostrarle al usuario cuantos productos llevamos en el carro de compras modificamos la ProductsPage:


<ContentPage.ToolbarItems>
    <ToolbarItem Text="{Binding CartNumber}" Command="{Binding ShowCartCommand}"/>
</ContentPage.ToolbarItems>


47. Modificamos la ProductsPageViewModel:


private int _cartNumber;
private DelegateCommand _showCartCommand;
…
public ProductsPageViewModel(INavigationService navigationService, IApiService apiService) : base(navigationService)
{
    _navigationService = navigationService;
    _apiService = apiService;
    Title = Languages.Products;
    LoadCartNumber();
    LoadProductsAsync();
}


public DelegateCommand ShowCartCommand => _showCartCommand ?? (_showCartCommand = new DelegateCommand(ShowCartAsync));


public DelegateCommand SearchCommand => _searchCommand ?? (_searchCommand = new DelegateCommand(ShowProducts));


public int CartNumber
{
    get => _cartNumber;
    set => SetProperty(ref _cartNumber, value);
}
…
private void LoadCartNumber()
{
    List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
    if (orderDetails == null)
    {
        orderDetails = new List<OrderDetail>();
        Settings.OrderDetails = JsonConvert.SerializeObject(orderDetails);
    }


    CartNumber = orderDetails.Count;
}


private async void ShowCartAsync()
{
    await _navigationService.NavigateAsync(nameof(ShowCarPage));
}


48. Probamos.
________________
Ver carro de compras
Vamos a implementar la siguiente pantalla:


Android
  

	iOS
  

	

49. Adicionar estos literales:


Ingles


 <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="FinishOrder" xml:space="preserve">
    <value>FinishOrder</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ClearAllConfirm" xml:space="preserve">
    <value>Are you sure to clean all the products in the order?</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>


Español


 <data name="Value" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="FinishOrder" xml:space="preserve">
    <value>Finalizar Pedido</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Sí</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="ClearAllConfirm" xml:space="preserve">
    <value>¿Está seguro de eliminar todos los productos del pedido?</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Artículos</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>


Portuguez


 <data name="Value" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="FinishOrder" xml:space="preserve">
    <value>Concluir Pedido</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Si</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>Não</value>
  </data>
  <data name="ClearAllConfirm" xml:space="preserve">
    <value>Tem certeza de que deseja excluir todos os produtos do pedido?</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Itens</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>


50. Modificar Languages:


public static string Value => Resource.Value;


public static string FinishOrder => Resource.FinishOrder;


public static string Yes => Resource.Yes;


public static string No => Resource.No;


public static string ClearAllConfirm => Resource.ClearAllConfirm;


public static string Total => Resource.Total;


public static string Items => Resource.Items;


51. Agregar estas propiedades a la ProductItemViewModel:


public float Quantity { get; set; }


public string Remarks { get; set; }


public decimal Value => (decimal)Quantity * Price;


52. Modificar la ShowCarPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             x:Class="OnSale.Prism.Views.ShowCarPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <ContentPage.ToolbarItems>
        <ToolbarItem IconImageSource="ic_delete" Command="{Binding ClearAllCommand}"/>
    </ContentPage.ToolbarItems>


    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <CollectionView ItemsSource="{Binding Products}">
                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                            <Grid>
                                <Grid.GestureRecognizers>
                                    <TapGestureRecognizer Command="{Binding SelectProduct2Command}"/>
                                </Grid.GestureRecognizers>
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ffimageloading:CachedImage Grid.Column="0"
                                                        Aspect="AspectFit"
                                                        Source="{Binding ImageFullPath}" 
                                                        CacheDuration= "50"
                                                        Margin="5"
                                                        RetryCount= "3"
                                                        RetryDelay= "600"
                                                        WidthRequest="100"/>
                            <Grid Grid.Column="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>


                                <Label Grid.Column="0"
                                       Grid.Row="0"
                                       Text="{i18n:Translate Name}" 
                                       FontAttributes="Bold" 
                                       VerticalOptions="Center"/>
                                <Label Grid.Column="1"
                                       Grid.Row="0"
                                       Text="{Binding Name}" 
                                       FontSize="Medium"/>


                                <Label Grid.Column="0"
                                       Grid.Row="1"
                                       Text="{i18n:Translate Price}" 
                                       FontAttributes="Bold" 
                                       VerticalOptions="Center"/>
                                <Label Grid.Column="1"
                                       Grid.Row="1"
                                       FontSize="Medium"
                                       HorizontalTextAlignment="End"
                                       Text="{Binding Price, StringFormat='{0:C2}'}" />


                                <Label Grid.Column="0"
                                       Grid.Row="2"
                                       Text="{i18n:Translate Quantity}" 
                                       FontAttributes="Bold"
                                       VerticalOptions="Center" />
                                <Label Grid.Column="1"
                                       Grid.Row="2"
                                       FontSize="Medium"
                                       HorizontalTextAlignment="End"
                                       Text="{Binding Quantity, StringFormat='{0:N2}'}" />


                                <Label Grid.Column="0"
                                       Grid.Row="3"
                                       Text="{i18n:Translate Value}" 
                                       FontAttributes="Bold"
                                       VerticalOptions="Center" />
                                <Label Grid.Column="1"
                                       Grid.Row="3"
                                       FontSize="Medium"
                                       HorizontalTextAlignment="End"
                                       Text="{Binding Value, StringFormat='{0:C2}'}" />
                            </Grid>
                            <Image Grid.Column="2" 
                                   Source="ic_more_vert"/>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
            <StackLayout>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>


                    <Label Grid.Column="0"
                           Grid.Row="0"
                           Text="{i18n:Translate Total}" 
                           FontAttributes="Bold" 
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="0"
                           FontSize="Medium"
                           HorizontalTextAlignment="End"
                           Text="{Binding TotalValue, StringFormat='{0:C2}'}" />


                    <Label Grid.Column="0"
                           Grid.Row="1"
                           Text="{i18n:Translate Items}" 
                           FontAttributes="Bold" 
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="1"
                           FontSize="Medium"
                           HorizontalTextAlignment="End"
                           Text="{Binding TotalItems, StringFormat='{0:N2}'}" />


                    <Label Grid.Column="0"
                           Grid.Row="2"
                           Text="{i18n:Translate Quantity}" 
                           FontAttributes="Bold" 
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           Grid.Row="2"
                           FontSize="Medium"
                           HorizontalTextAlignment="End"
                           Text="{Binding TotalQuantity, StringFormat='{0:N2}'}" />
                </Grid>
                <Button Command="{Binding FinishOrderCommand}" 
                        IsEnabled="{Binding IsEnabled}"
                        Text="{i18n:Translate FinishOrder}"/>
            </StackLayout>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


53. Modificar la ShowCarPageViewModel:


public class ShowCarPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private ObservableCollection<ProductItemViewModel> _products;
    private bool _isRunning;
    private bool _isEnabled;
    private decimal _totalValue;
    private int _totalItems;
    private float _totalQuantity;
    private DelegateCommand _clearAllCommand;
    private DelegateCommand _finishOrderCommand;


    public ShowCarPageViewModel(INavigationService navigationService) : base(navigationService)
    {
        _navigationService = navigationService;
        Title = Languages.ShowShoppingCar;
        IsEnabled = true;
    }


    public DelegateCommand ClearAllCommand => _clearAllCommand ?? (_clearAllCommand = new DelegateCommand(ClearAllAsync));


    public DelegateCommand FinishOrderCommand => _finishOrderCommand ?? (_finishOrderCommand = new DelegateCommand(FinishOrderAsync));


    public decimal TotalValue
    {
        get => _totalValue;
        set => SetProperty(ref _totalValue, value);
    }


    public int TotalItems
    {
        get => _totalItems;
        set => SetProperty(ref _totalItems, value);
    }


    public float TotalQuantity
    {
        get => _totalQuantity;
        set => SetProperty(ref _totalQuantity, value);
    }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    public ObservableCollection<ProductItemViewModel> Products
    {
        get => _products;
        set => SetProperty(ref _products, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);
        LoadOrderDetails();
    }


    private void LoadOrderDetails()
    {
        List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
        if (orderDetails == null)
        {
            orderDetails = new List<OrderDetail>();
        }


        TotalItems = orderDetails.Count;
        TotalValue = orderDetails.Sum(od => od.Value).Value;
        TotalQuantity = orderDetails.Sum(od => od.Quantity);


        Products = new ObservableCollection<ProductItemViewModel>(orderDetails.Select(od => new ProductItemViewModel(_navigationService)
        {
            Category = od.Product.Category,
            Description = od.Product.Description,
            Id = od.Product.Id,
            IsActive = od.Product.IsActive,
            IsStarred = od.Product.IsStarred,
            Name = od.Product.Name,
            Price = od.Product.Price,
            ProductImages = od.Product.ProductImages,
            Qualifications = od.Product.Qualifications,
            Quantity = od.Quantity,
            Remarks = od.Remarks
        }).ToList());
    }


    private void FinishOrderAsync()
    {
    }


    private async void ClearAllAsync()
    {
        bool answer = await App.Current.MainPage.DisplayAlert(Languages.Delete, Languages.ClearAllConfirm, Languages.Yes, Languages.No);
        if (!answer)
        {
            return;
        }


        List<OrderDetail> orderDetails = new List<OrderDetail>();
        Settings.OrderDetails = JsonConvert.SerializeObject(orderDetails);
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    }
}


54. Probamos.
Modificar el pedido


55. Adicionar estos literales:


Ingles


  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteProductInOrderConfirm" xml:space="preserve">
    <value>Are you sure to delete the product in the order?</value>
  </data>
  <data name="ModifyOrder" xml:space="preserve">
    <value>Modify Order</value>
  </data>


Español


 <data name="Delete" xml:space="preserve">
    <value>Borrar</value>
  </data>
  <data name="DeleteProductInOrderConfirm" xml:space="preserve">
    <value>¿Estas seguro de borrar el producto de la orden?</value>
  </data>
  <data name="ModifyOrder" xml:space="preserve">
    <value>Modificar Pedido</value>
  </data>


Portuguez


 <data name="Delete" xml:space="preserve">
    <value>Excluir</value>
  </data>
  <data name="DeleteProductInOrderConfirm" xml:space="preserve">
    <value>Tem certeza de que deseja excluir o produto do pedido?</value>
  </data>
  <data name="ModifyOrder" xml:space="preserve">
    <value>Ordem Modificada</value>
  </data>


56. Modificar Languages:


public static string Delete => Resource.Delete;


public static string DeleteProductInOrderConfirm => Resource.DeleteProductInOrderConfirm;


public static string ModifyOrder => Resource.ModifyOrder;




57. Agregar la ModifiyOrderPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             xmlns:syncfusion="clr-namespace:Syncfusion.SfRotator.XForms;assembly=Syncfusion.SfRotator.XForms"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             xmlns:numericBox="clr-namespace:Syncfusion.SfNumericTextBox.XForms;assembly=Syncfusion.SfNumericTextBox.XForms"
             x:Class="OnSale.Prism.Views.ModifiyOrderPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <ScrollView>
                <StackLayout>
                    <syncfusion:SfRotator EnableAutoPlay="True"  
                                          EnableLooping="True"
                                          HeightRequest="300"
                                          ItemsSource="{Binding Images}"
                                          NavigationDelay="5000"
                                          NavigationDirection="Horizontal"
                                          NavigationStripMode="Dots"
                                          NavigationStripPosition="Bottom">
                        <syncfusion:SfRotator.ItemTemplate>
                            <DataTemplate>
                                <ffimageloading:CachedImage Aspect="AspectFit"
                                                            CacheDuration= "50"
                                                            DownsampleToViewSize = "true"
                                                            ErrorPlaceholder= "ErrorImage"
                                                            HeightRequest="300"
                                                            LoadingPlaceholder= "LoaderImage"
                                                            RetryCount= "3"
                                                            RetryDelay= "600"
                                                            Source="{Binding ImageFullPath}"/>
                            </DataTemplate>
                        </syncfusion:SfRotator.ItemTemplate>
                    </syncfusion:SfRotator>


                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Label Grid.Column="0"
                               Grid.Row="0"
                               Text="{i18n:Translate Name}"
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="0"
                               FontSize="Large"
                               Text="{Binding Product.Name}"/>


                        <Label Grid.Column="0"
                               Grid.Row="1"
                               Text="{i18n:Translate Price}"
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="1"
                               FontSize="Large"
                               Text="{Binding Product.Price, StringFormat='{0:C2}'}"/>
                    </Grid>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Quantity}" 
                                                   ContainerType="Outlined">
                        <numericBox:SfNumericTextBox FormatString="n"
                                                     Value="{Binding Quantity}"/>
                    </inputLayout:SfTextInputLayout>
                    
                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Remarks}" 
                                                   ContainerType="Outlined">
                        <Editor Placeholder="{i18n:Translate RemarksPlaceHolder}"
                                HeightRequest="100"
                                Text="{Binding Remarks}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <StackLayout Orientation="Horizontal"
                         VerticalOptions="EndAndExpand">
                <Button Command="{Binding SaveCommand}" 
                        Text="{i18n:Translate Save}"/>
                <Button Command="{Binding DeleteCommand}"
                        Style="{StaticResource DangerButton}"
                        Text="{i18n:Translate Delete}"/>
            </StackLayout>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


58. Modificar la ModifiyOrderPageViewModel:


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Newtonsoft.Json;
using OnSale.Common.Entities;
using OnSale.Common.Helpers;
using OnSale.Common.Models;
using OnSale.Common.Responses;
using OnSale.Prism.Helpers;
using OnSale.Prism.ItemViewModels;
using OnSale.Prism.Views;
using Prism.Commands;
using Prism.Navigation;


namespace OnSale.Prism.ViewModels
{
    public class ModifiyOrderPageViewModel : ViewModelBase
    {
        private readonly INavigationService _navigationService;
        private ProductItemViewModel _product;
        private ObservableCollection<ProductImage> _images;
        private bool _isRunning;
        private bool _isEnabled;
        private float _quantity;
        private string _remarks;
        private DelegateCommand _saveCommand;
        private DelegateCommand _deleteCommand;


        public ModifiyOrderPageViewModel(INavigationService navigationService)
            : base(navigationService)
        {
            _navigationService = navigationService;
            Title = Languages.ModifyOrder;
            IsEnabled = true;
        }


        public DelegateCommand SaveCommand => _saveCommand ?? (_saveCommand = new DelegateCommand(SaveAsync));


        public DelegateCommand DeleteCommand => _deleteCommand ?? (_deleteCommand = new DelegateCommand(DeleteAsync));


        public float Quantity
        {
            get => _quantity;
            set => SetProperty(ref _quantity, value);
        }


        public string Remarks
        {
            get => _remarks;
            set => SetProperty(ref _remarks, value);
        }


        public bool IsRunning
        {
            get => _isRunning;
            set => SetProperty(ref _isRunning, value);
        }


        public bool IsEnabled
        {
            get => _isEnabled;
            set => SetProperty(ref _isEnabled, value);
        }


        public ObservableCollection<ProductImage> Images
        {
            get => _images;
            set => SetProperty(ref _images, value);
        }


        public ProductItemViewModel Product
        {
            get => _product;
            set => SetProperty(ref _product, value);
        }


        public override void OnNavigatedTo(INavigationParameters parameters)
        {
            base.OnNavigatedTo(parameters);


            if (parameters.ContainsKey("product"))
            {
                Product = parameters.GetValue<ProductItemViewModel>("product");
                Images = new ObservableCollection<ProductImage>(Product.ProductImages);
                Quantity = Product.Quantity;
                Remarks = Product.Remarks;
            }
        }


        private async void SaveAsync()
        {
            bool isValid = await ValidateDataAsync();
            if (!isValid)
            {
                return;
            }


            List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
            if (orderDetails == null)
            {
                return;
            }


            foreach (var orderDetail in orderDetails)
            {
                if (orderDetail.Product.Id == Product.Id)
                {
                    orderDetail.Quantity = Quantity;
                    orderDetail.Remarks = Remarks;
                    break;
                }
            }


            Settings.OrderDetails = JsonConvert.SerializeObject(orderDetails);
            await _navigationService.GoBackAsync();
        }


        private async Task<bool> ValidateDataAsync()
        {
            if (Quantity == 0)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.QuantityError, Languages.Accept);
                return false;
            }


            return true;
        }


        private async void DeleteAsync()
        {
            bool answer = await App.Current.MainPage.DisplayAlert(Languages.Delete, Languages.DeleteProductInOrderConfirm, Languages.Yes, Languages.No);
            if (!answer)
            {
                return;
            }


            List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
            if (orderDetails == null)
            {
                return;
            }


            foreach (var orderDetail in orderDetails)
            {
                if (orderDetail.Product.Id == Product.Id)
                {
                    orderDetails.Remove(orderDetail);
                    break;
                }
            }




            Settings.OrderDetails = JsonConvert.SerializeObject(orderDetails);
            await _navigationService.GoBackAsync();
        }
    }
}


59. Probamos.
________________
Finalizar pedido
Vamos a implementar la siguiente pantalla:


Android
  

	iOS
  

	

________________




1. Adicionar estos literales:


Ingles


 <data name="FinishOrderMessage" xml:space="preserve">
    <value>Your order was completed successfully.</value>
  </data>
  <data name="PaymentMethod" xml:space="preserve">
    <value>Payment Method</value>
  </data>
 <data name="PaymentMethodError" xml:space="preserve">
    <value>You must select a payment method.</value>
  </data>
  <data name="PaymentMethodPlaceHolder" xml:space="preserve">
    <value>Select your payment method...</value>
  </data>
  <data name="Cash" xml:space="preserve">
    <value>Cash (on delivery)</value>
  </data>
  <data name="CreditCard" xml:space="preserve">
    <value>Credit Card</value>
  </data>
  <data name="DeliveryAddress" xml:space="preserve">
    <value>Delivery Address</value>
  </data>
  <data name="DeliveryAddressError" xml:space="preserve">
    <value>You must enter the delivery Address.</value>
  </data>
  <data name="DeliveryAddressPlaceHolder" xml:space="preserve">
    <value>Enter the delivery Address...</value>
  </data>


Español


 <data name="FinishOrderMessage" xml:space="preserve">
    <value>Su pedido fue completado con éxito.</value>
  </data>
  <data name="PaymentMethod" xml:space="preserve">
    <value>Método de pago</value>
  </data>
 <data name="PaymentMethodError" xml:space="preserve">
    <value>Debes seleccionar un método de pago.</value>
  </data>
  <data name="PaymentMethodPlaceHolder" xml:space="preserve">
    <value>Selecciona tu método de pago...</value>
  </data>
  <data name="Cash" xml:space="preserve">
    <value>Efectivo (contra entrega)</value>
  </data>
 <data name="CreditCard" xml:space="preserve">
    <value>Tarjeta de Crédito</value>
  </data>
  <data name="DeliveryAddress" xml:space="preserve">
    <value>Dirección de envío</value>
  </data>
  <data name="DeliveryAddressError" xml:space="preserve">
    <value>Debes ingresar una dirección de envío.</value>
  </data>
  <data name="DeliveryAddressPlaceHolder" xml:space="preserve">
    <value>Ingresa la dirección de envío...</value>
  </data>


Portuguez


 <data name="FinishOrderMessage" xml:space="preserve">
    <value>Seu pedido foi concluído com sucesso.</value>
  </data>
  <data name="PaymentMethod" xml:space="preserve">
    <value>Método de pagamento</value>
  </data>
 <data name="PaymentMethodError" xml:space="preserve">
    <value>Você deve selecionar um método de pagamento.</value>
  </data>
  <data name="PaymentMethodPlaceHolder" xml:space="preserve">
    <value>Selecione seu metodo de pagamento...</value>
  </data>
  <data name="Cash" xml:space="preserve">
    <value>Dinheiro (na entrega)</value>
  </data>
 <data name="CreditCard" xml:space="preserve">
    <value>Cartão de crédito</value>
  </data>
  <data name="DeliveryAddress" xml:space="preserve">
    <value>Endereço para envio</value>
  </data>
  <data name="DeliveryAddressError" xml:space="preserve">
    <value>Você deve inserir um endereço de entrega.</value>
  </data>
  <data name="DeliveryAddressPlaceHolder" xml:space="preserve">
    <value>Insira o endereço de entrega ...</value>
  </data>


2. Modificar Languages:


public static string FinishOrderMessage => Resource.FinishOrderMessage;


public static string PaymentMethod => Resource.PaymentMethod;


public static string PaymentMethodError => Resource.PaymentMethodError;


public static string PaymentMethodPlaceHolder => Resource.PaymentMethodPlaceHolder;


public static string Cash => Resource.Cash;


public static string CreditCard => Resource.CreditCard;


public static string DeliveryAddress => Resource.DeliveryAddress;


public static string DeliveryAddressError => Resource.DeliveryAddressError;


public static string DeliveryAddressPlaceHolder => Resource.DeliveryAddressPlaceHolder;




3. Agregar en Common.Models la clase PaymentMethod:


public class PaymentMethod
{
    public int Id { get; set; }


    public string Name { get; set; }
}


4. Agregar el Prism.Helpers la interfaz ICombosHelper:


public interface ICombosHelper
{
    IEnumerable<PaymentMethod> GetPaymentMethods();
}


5. Agregar el Prism.Helpers la clase CombosHelper:


public class CombosHelper : ICombosHelper
{


    public IEnumerable<PaymentMethod> GetPaymentMethods()
    {
        List<PaymentMethod> paymentMethods = new List<PaymentMethod>
        {
            new PaymentMethod { Id = 1, Name = Languages.Cash },
            new PaymentMethod { Id = 2, Name = Languages.CreditCard }
        };


        return paymentMethods;
    }
}


6. Configurar la inyección del nuevo helper:


containerRegistry.Register<ICombosHelper, CombosHelper>();


7. Agregar la FinishOrderPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             x:Class="OnSale.Prism.Views.FinishOrderPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <ScrollView>
                <StackLayout>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>


                        <Label Grid.Column="0"
                               Grid.Row="0"
                               Text="{i18n:Translate Total}" 
                               FontAttributes="Bold" 
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="0"
                               FontSize="Medium"
                               HorizontalTextAlignment="End"
                               Text="{Binding TotalValue, StringFormat='{0:C2}'}" />


                        <Label Grid.Column="0"
                               Grid.Row="1"
                               Text="{i18n:Translate Items}" 
                               FontAttributes="Bold" 
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="1"
                               FontSize="Medium"
                               HorizontalTextAlignment="End"
                               Text="{Binding TotalItems, StringFormat='{0:N2}'}" />


                        <Label Grid.Column="0"
                               Grid.Row="2"
                               Text="{i18n:Translate Quantity}" 
                               FontAttributes="Bold" 
                               VerticalOptions="Center"/>
                        <Label Grid.Column="1"
                               Grid.Row="2"
                               FontSize="Medium"
                               HorizontalTextAlignment="End"
                               Text="{Binding TotalQuantity, StringFormat='{0:N2}'}" />
                    </Grid>




                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate PaymentMethod}" 
                                                   ContainerType="Outlined">
                        <Picker ItemDisplayBinding="{Binding Name}"
                                ItemsSource="{Binding PaymentMethods}"
                                SelectedItem="{Binding PaymentMethod}"
                                Title="{i18n:Translate PaymentMethodPlaceHolder}"/>
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate DeliveryAddress}" 
                                                   ContainerType="Outlined">
                        <Editor Placeholder="{i18n:Translate DeliveryAddressPlaceHolder}"
                                HeightRequest="100"
                                Text="{Binding DeliveryAddress}" />
                    </inputLayout:SfTextInputLayout>


                    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Remarks}" 
                                                   ContainerType="Outlined">
                        <Editor Placeholder="{i18n:Translate RemarksPlaceHolder}"
                                HeightRequest="100"
                                Text="{Binding Remarks}" />
                    </inputLayout:SfTextInputLayout>


                </StackLayout>
            </ScrollView>
            <Button Command="{Binding FinishOrderCommand}"
                    IsEnabled="{Binding IsEnabled}"
                    Text="{i18n:Translate FinishOrder}"
                    VerticalOptions="EndAndExpand"/>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


8. Modificar la FinishOrderPageViewModel:


public class FinishOrderPageViewModel : ViewModelBase
{
    private bool _isRunning;
    private bool _isEnabled;
    private decimal _totalValue;
    private int _totalItems;
    private float _totalQuantity;
    private string _deliveryAddress;
    private ObservableCollection<PaymentMethod> _paymentMethods;
    private PaymentMethod _paymentMethod;


    public FinishOrderPageViewModel(INavigationService navigationService, ICombosHelper combosHelper)
        : base(navigationService)
    {
        Title = Languages.FinishOrder;
        IsEnabled = true;
        PaymentMethods = new ObservableCollection<PaymentMethod>(combosHelper.GetPaymentMethods());
    }


    public ObservableCollection<PaymentMethod> PaymentMethods
    {
        get => _paymentMethods;
        set => SetProperty(ref _paymentMethods, value);
    }


    public PaymentMethod PaymentMethod
    {
        get => _paymentMethod;
        set => SetProperty(ref _paymentMethod, value);
    }


    public string DeliveryAddress
    {
        get => _deliveryAddress;
        set => SetProperty(ref _deliveryAddress, value);
    }


    public decimal TotalValue
    {
        get => _totalValue;
        set => SetProperty(ref _totalValue, value);
    }


    public int TotalItems
    {
        get => _totalItems;
        set => SetProperty(ref _totalItems, value);
    }


    public float TotalQuantity
    {
        get => _totalQuantity;
        set => SetProperty(ref _totalQuantity, value);
    }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);
        LoadOrderTotals();
    }


    private void LoadOrderTotals()
    {
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        List<OrderDetail> orderDetails = JsonConvert.DeserializeObject<List<OrderDetail>>(Settings.OrderDetails);
        if (orderDetails == null)
        {
            orderDetails = new List<OrderDetail>();
        }


        TotalItems = orderDetails.Count;
        TotalValue = orderDetails.Sum(od => od.Value).Value;
        TotalQuantity = orderDetails.Sum(od => od.Quantity);
        DeliveryAddress = $"{token.User.Address}, {token.User.City.Name}";
    }
}


9. Probemos lo que llevamos hasta el momento.


10. Agregar este método al IApiService:


Task<Response> PostAsync<T>(string urlBase, string servicePrefix, string controller, T model, string token);


11. Agregar este método al ApiService:


public async Task<Response> PostAsync<T>(string urlBase, string servicePrefix, string controller, T model, string token)
{
    try
    {
        string request = JsonConvert.SerializeObject(model);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return new Response
            {
                IsSuccess = false,
                Message = result,
            };
        }


        T item = JsonConvert.DeserializeObject<T>(result);


        return new Response
        {
            IsSuccess = true,
            Result = item
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


12. Modificar la FinishOrderPageViewModel:


public class FinishOrderPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private bool _isRunning;
    private bool _isEnabled;
    private decimal _totalValue;
    private int _totalItems;
    private float _totalQuantity;
    private string _deliveryAddress;
    private ObservableCollection<PaymentMethod> _paymentMethods;
    private List<OrderDetailResponse> _orderDetails;
    private TokenResponse _token;
    private PaymentMethod _paymentMethod;
    private DelegateCommand _finishOrderCommand;


    public FinishOrderPageViewModel(INavigationService navigationService, ICombosHelper combosHelper, IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        Title = Languages.FinishOrder;
        IsEnabled = true;
        PaymentMethods = new ObservableCollection<PaymentMethod>(combosHelper.GetPaymentMethods());
    }


    public DelegateCommand FinishOrderCommand => _finishOrderCommand ?? (_finishOrderCommand = new DelegateCommand(FinishOrderAsync));


    public string Remarks { get; set; }


    public ObservableCollection<PaymentMethod> PaymentMethods
    {
        get => _paymentMethods;
        set => SetProperty(ref _paymentMethods, value);
    }


    public PaymentMethod PaymentMethod
    {
        get => _paymentMethod;
        set => SetProperty(ref _paymentMethod, value);
    }


    public string DeliveryAddress
    {
        get => _deliveryAddress;
        set => SetProperty(ref _deliveryAddress, value);
    }


    public decimal TotalValue
    {
        get => _totalValue;
        set => SetProperty(ref _totalValue, value);
    }


    public int TotalItems
    {
        get => _totalItems;
        set => SetProperty(ref _totalItems, value);
    }


    public float TotalQuantity
    {
        get => _totalQuantity;
        set => SetProperty(ref _totalQuantity, value);
    }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public bool IsEnabled
    {
        get => _isEnabled;
        set => SetProperty(ref _isEnabled, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);
        LoadOrderTotals();
    }


    private void LoadOrderTotals()
    {
        _token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        _orderDetails = JsonConvert.DeserializeObject<List<OrderDetailResponse>>(Settings.OrderDetails);
        if (_orderDetails == null)
        {
            _orderDetails = new List<OrderDetailResponse>();
        }


        TotalItems = _orderDetails.Count;
        TotalValue = _orderDetails.Sum(od => od.Value).Value;
        TotalQuantity = _orderDetails.Sum(od => od.Quantity);
        DeliveryAddress = $"{_token.User.Address}, {_token.User.City.Name}";
    }


    private async void FinishOrderAsync()
    {
        bool isValid = await ValidateDataAsync();
        if (!isValid)
        {
            return;
        }


        IsRunning = true;
        IsEnabled = false;


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            IsRunning = false;
            IsEnabled = true;
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        string url = App.Current.Resources["UrlAPI"].ToString();
        OrderResponse request = new OrderResponse
        {
            OrderDetails = _orderDetails,
            PaymentMethod = ToPaymentMethod(PaymentMethod),
            Remarks = Remarks
        };


        Response response = await _apiService.PostAsync(url, "api", "/Orders", request, _token.Token);
        IsRunning = false;
        IsEnabled = true;


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            return;
        }


        _orderDetails.Clear();
        Settings.OrderDetails = JsonConvert.SerializeObject(_orderDetails);
        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.FinishOrderMessage, Languages.Accept);
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    }


    private Common.Enums.PaymentMethod ToPaymentMethod(PaymentMethod paymentMethod)
    {
        switch (paymentMethod.Id)
        {
            case 1: return Common.Enums.PaymentMethod.Cash;
            case 2: return Common.Enums.PaymentMethod.PayPal;
            default: return Common.Enums.PaymentMethod.PSE;
        }
    }


    private async Task<bool> ValidateDataAsync()
    {
        if (PaymentMethod == null)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PaymentMethodError, Languages.Accept);
            return false;
        }


        if (string.IsNullOrEmpty(DeliveryAddress))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DeliveryAddressError, Languages.Accept);
            return false;
        }


        return true;
    }
}


13. Probamos.
Integración con portal de pagos


1. Adicionar estos literales:


Ingles


 <data name="Expiry" xml:space="preserve">
    <value>Expiry date format yy/mm</value>
  </data>
  <data name="ExpiryError" xml:space="preserve">
    <value>You must enter the expiry date for your card.</value>
  </data>
  <data name="CreditCardError" xml:space="preserve">
    <value>You must enter your credit card number.</value>
  </data>
  <data name="CVV" xml:space="preserve">
    <value>CVV</value>
  </data>
  <data name="CVVError" xml:space="preserve">
    <value>You must enter the CVV for your card.</value>
  </data>
  <data name="CreditCardNoValid" xml:space="preserve">
    <value>Credit card not valid.</value>
  </data>
  <data name="PayNoOk" xml:space="preserve">
    <value>The payment process was not successful.</value>
  </data>


Español


  <data name="Expiry" xml:space="preserve">
    <value>Fecha de expiración aa/mm</value>
  </data>
  <data name="ExpiryError" xml:space="preserve">
    <value>Debes ingresar la fecha de expiración de tu tarjeta.</value>
  </data>
  <data name="CreditCardError" xml:space="preserve">
    <value>Debes ingresar el número de tu tarjeta de crédito.</value>
  </data>
  <data name="CVV" xml:space="preserve">
    <value>CVV</value>
  </data>
  <data name="CVVError" xml:space="preserve">
    <value>Debes ingresar el CVV de tu tarjeta.</value>
  </data>
  <data name="CreditCardNoValid" xml:space="preserve">
    <value>Tarjeta de cédito no válida.</value>
  </data>
  <data name="PayNoOk" xml:space="preserve">
    <value>El proceso de pago no fue exitoso.</value>
  </data>


Portuguez


 <data name="Expiry" xml:space="preserve">
    <value>Data de expiração no formato aa/mm</value>
  </data>
  <data name="ExpiryError" xml:space="preserve">
    <value>Você deve inserir a data de validade do seu cartão.</value>
  </data>
  <data name="CreditCardError" xml:space="preserve">
    <value>Você deve inserir o número do seu cartão de crédito.</value>
  </data>
  <data name="CVV" xml:space="preserve">
    <value>CVV</value>
  </data>
  <data name="CVVError" xml:space="preserve">
    <value>Você deve inserir o CVV do seu cartão.</value>
  </data>
  <data name="CreditCardNoValid" xml:space="preserve">
    <value>Cartão de crédito inválido.</value>
  </data>
  <data name="PayNoOk" xml:space="preserve">
    <value>O processo de pagamento não foi bem sucedido.</value>
  </data>


2. Modificar Languages:


public static string Expiry => Resource.Expiry;


public static string ExpiryError => Resource.ExpiryError;


public static string CreditCardError => Resource.CreditCardError;


public static string CVV => Resource.CVV;


public static string CVVError => Resource.CVVError;


public static string CreditCardNoValid => Resource.CreditCardNoValid;


public static string PayNoOk => Resource.PayNoOk;


3. Crear una cuenta en Stripe: https://dashboard.stripe.com/register.


4. Tome nota de su API Key y Secret Key que lo vamos a necesitar más adelante.


  



5. Agregar el nuget Syncfusion.Xamarin.SfMaskedEdit en todos los proyectos Prism.


6. Inicializar el nuget para iOS:


LoadApplication(new App(new iOSInitializer()));
SfMaskedEditRenderer.Init();
SfRatingRenderer.Init();


7. Agregar el nuget Stripe.net solo al proyecto common.


8. Modificar la FinishOrderPage:


…
xmlns:maskededit="clr-namespace:Syncfusion.XForms.MaskedEdit;assembly=Syncfusion.SfMaskedEdit.XForms"
…


<inputLayout:SfTextInputLayout Hint="{i18n:Translate PaymentMethod}" 
                                ContainerType="Outlined">
    <Picker ItemDisplayBinding="{Binding Name}"
            ItemsSource="{Binding PaymentMethods}"
            SelectedItem="{Binding PaymentMethod}"
            Title="{i18n:Translate PaymentMethodPlaceHolder}"/>
</inputLayout:SfTextInputLayout>


<inputLayout:SfTextInputLayout Hint="{i18n:Translate CreditCard}" 
                                ContainerType="Outlined"
                                IsVisible="{Binding IsCreditCard}">
        <maskededit:SfMaskedEdit Value="{Binding CreditCard}"
                                Keyboard="Numeric"
                                Mask="0000 0000 0000 0000" />
</inputLayout:SfTextInputLayout>


<StackLayout Orientation="Horizontal">
    <inputLayout:SfTextInputLayout Hint="{i18n:Translate Expiry}" 
                                    ContainerType="Outlined"
                                    IsVisible="{Binding IsCreditCard}">
            <maskededit:SfMaskedEdit Value="{Binding Expiry}"
                                    Keyboard="Numeric"
                                    Mask="00/00" />
    </inputLayout:SfTextInputLayout>


    <inputLayout:SfTextInputLayout Hint="{i18n:Translate CVV}" 
                                    ContainerType="Outlined"
                                    HorizontalOptions="FillAndExpand"
                                    IsVisible="{Binding IsCreditCard}">
            <maskededit:SfMaskedEdit Value="{Binding CVV}"
                                    Keyboard="Numeric"
                                    Mask="000" />
    </inputLayout:SfTextInputLayout>
</StackLayout>


<inputLayout:SfTextInputLayout Hint="{i18n:Translate DeliveryAddress}" 
                                ContainerType="Outlined">
    <Editor Placeholder="{i18n:Translate DeliveryAddressPlaceHolder}"
            HeightRequest="100"
            Text="{Binding DeliveryAddress}" />
</inputLayout:SfTextInputLayout>
...


9. Modificar la FinishOrderPage:


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using OnSale.Common.Helpers;
using OnSale.Common.Responses;
using OnSale.Common.Services;
using OnSale.Prism.Helpers;
using OnSale.Prism.Views;
using Prism.Commands;
using Prism.Navigation;
using Stripe;
using Xamarin.Essentials;
using PaymentMethod = OnSale.Common.Models.PaymentMethod;


namespace OnSale.Prism.ViewModels
{
    public class FinishOrderPageViewModel : ViewModelBase
    {
        private readonly INavigationService _navigationService;
        private readonly IApiService _apiService;
        private readonly string _testApiKey = "pk_test_51HOVSBKbmcXHO9Ga5rEJaqyR9Q1Do6BCtFpNrF5w6oPnG2Kxqal0W5dZv7T7bbLQbg7XUdPz3Itc0x8TrCj7sZpq00jMsL5TyY";
        private readonly string _testApiKeySecret = "sk_test_51HOVSBKbmcXHO9Ga1TeqwrmqyWN7Dhof68sQUpavscQonuXPRLQ1RWnau7jNlxb0ArdcR4rs4TJN2Y7GQAldvajq00XRgC7mv9";
        private bool _isRunning;
        private bool _isEnabled;
        private bool _isCreditCard;
        private decimal _totalValue;
        private int _totalItems;
        private float _totalQuantity;
        private string _deliveryAddress;
        private ObservableCollection<PaymentMethod> _paymentMethods;
        private List<OrderDetailResponse> _orderDetails;
        private TokenResponse _token;
        private PaymentMethod _paymentMethod;
        private Token _stripeToken;
        private TokenService _tokenService;
        private DelegateCommand _finishOrderCommand;


        public FinishOrderPageViewModel(INavigationService navigationService, ICombosHelper combosHelper, IApiService apiService)
            : base(navigationService)
        {
            _navigationService = navigationService;
            _apiService = apiService;
            Title = Languages.FinishOrder;
            IsEnabled = true;
            PaymentMethods = new ObservableCollection<PaymentMethod>(combosHelper.GetPaymentMethods());
        }


        public DelegateCommand FinishOrderCommand => _finishOrderCommand ?? (_finishOrderCommand = new DelegateCommand(FinishOrderAsync));


        public string Remarks { get; set; }


        public string CreditCard { get; set; }


        public string Expiry { get; set; }


        public string CVV { get; set; }


        public ObservableCollection<PaymentMethod> PaymentMethods
        {
            get => _paymentMethods;
            set => SetProperty(ref _paymentMethods, value);
        }


        public PaymentMethod PaymentMethod
        {
            get => _paymentMethod;
            set
            {
                SetProperty(ref _paymentMethod, value);
                if (_paymentMethod.Id == 2)
                {
                    IsCreditCard = true;
                }
                else
                {
                    IsCreditCard = false;
                }
            }
        }


        public string DeliveryAddress
        {
            get => _deliveryAddress;
            set => SetProperty(ref _deliveryAddress, value);
        }


        public decimal TotalValue
        {
            get => _totalValue;
            set => SetProperty(ref _totalValue, value);
        }


        public int TotalItems
        {
            get => _totalItems;
            set => SetProperty(ref _totalItems, value);
        }


        public float TotalQuantity
        {
            get => _totalQuantity;
            set => SetProperty(ref _totalQuantity, value);
        }


        public bool IsRunning
        {
            get => _isRunning;
            set => SetProperty(ref _isRunning, value);
        }


        public bool IsCreditCard
        {
            get => _isCreditCard;
            set => SetProperty(ref _isCreditCard, value);
        }


        public bool IsEnabled
        {
            get => _isEnabled;
            set => SetProperty(ref _isEnabled, value);
        }


        public override void OnNavigatedTo(INavigationParameters parameters)
        {
            base.OnNavigatedTo(parameters);
            LoadOrderTotals();
        }


        private void LoadOrderTotals()
        {
            _token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
            _orderDetails = JsonConvert.DeserializeObject<List<OrderDetailResponse>>(Settings.OrderDetails);
            if (_orderDetails == null)
            {
                _orderDetails = new List<OrderDetailResponse>();
            }


            TotalItems = _orderDetails.Count;
            TotalValue = _orderDetails.Sum(od => od.Value).Value;
            TotalQuantity = _orderDetails.Sum(od => od.Quantity);
            DeliveryAddress = $"{_token.User.Address}, {_token.User.City.Name}";
        }


        private async void FinishOrderAsync()
        {
            bool isValid = await ValidateDataAsync();
            if (!isValid)
            {
                return;
            }


            IsRunning = true;
            IsEnabled = false;


            if (PaymentMethod.Id == 2)
            {
                bool wasPayed = await PayWithStripeAsync();
                if (!wasPayed)
                {
                    IsRunning = false;
                    IsEnabled = true;
                    return;
                }
            }


            if (Connectivity.NetworkAccess != NetworkAccess.Internet)
            {
                IsRunning = false;
                IsEnabled = true;
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
                return;
            }


            string url = App.Current.Resources["UrlAPI"].ToString();
            OrderResponse request = new OrderResponse
            {
                OrderDetails = _orderDetails,
                PaymentMethod = ToPaymentMethod(PaymentMethod),
                Remarks = Remarks
            };


            Response response = await _apiService.PostAsync(url, "api", "/Orders", request, _token.Token);
            IsRunning = false;
            IsEnabled = true;


            if (!response.IsSuccess)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
                return;
            }


            _orderDetails.Clear();
            Settings.OrderDetails = JsonConvert.SerializeObject(_orderDetails);
            await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.FinishOrderMessage, Languages.Accept);
            await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
        }


        private async Task<bool> PayWithStripeAsync()
        {
            await CreateTokenAsync();
            if (_stripeToken == null)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CreditCardNoValid, Languages.Accept);
                return false;
            }


            return await MakePaymentAsync();
        }


        public async Task<bool> MakePaymentAsync()
        {
            try
            {
                StripeConfiguration.ApiKey = _testApiKeySecret;
                ChargeCreateOptions options = new ChargeCreateOptions
                {
                    Amount = (long)TotalValue * 100,
                    Currency = "COP",
                    Description = $"Order: {DateTime.Now:yyyy/MM/dd hh:mm}",
                    Capture =true,
                    ReceiptEmail = _token.User.Email,
                    Source = _stripeToken.Id
                };


                ChargeService service = new ChargeService();
                Charge charge = await service.CreateAsync(options);
                return true;
            }
            catch (Exception ex)
            {
                ex.ToString();
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PayNoOk, Languages.Accept);
                return false;
            }
        }


        public async Task<string> CreateTokenAsync()
        {
            try
            {
                StripeConfiguration.ApiKey = _testApiKey;
                ChargeService service = new ChargeService();
                int year = int.Parse(Expiry.Substring(0, 2));
                int month = int.Parse(Expiry.Substring(3, 2));
                TokenCreateOptions tokenOptions = new TokenCreateOptions
                {
                    Card = new TokenCardOptions
                    {
                        Number = CreditCard,
                        ExpYear = year,
                        ExpMonth = month,
                        Cvc = CVV,
                        Name = _token.User.FullName
                    }
                };


                _tokenService = new TokenService();
                _stripeToken = await _tokenService.CreateAsync(tokenOptions);
                return _stripeToken.Id;
            }
            catch
            {
                return null;
            }
        }


        private Common.Enums.PaymentMethod ToPaymentMethod(PaymentMethod paymentMethod)
        {
            switch (paymentMethod.Id)
            {
                case 1: return Common.Enums.PaymentMethod.Cash;
                default: return Common.Enums.PaymentMethod.CreditCard;
            }
        }


        private async Task<bool> ValidateDataAsync()
        {
            if (PaymentMethod == null)
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.PaymentMethodError, Languages.Accept);
                return false;
            }


            if (string.IsNullOrEmpty(DeliveryAddress))
            {
                await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.DeliveryAddressError, Languages.Accept);
                return false;
            }


            if (PaymentMethod.Id == 2)
            {
                if (string.IsNullOrEmpty(CreditCard) || CreditCard.Contains('_'))
                {
                    await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CreditCardError, Languages.Accept);
                    return false;
                }


                if (string.IsNullOrEmpty(Expiry) || Expiry.Contains('_'))
                {
                    await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ExpiryError, Languages.Accept);
                    return false;
                }


                if (string.IsNullOrEmpty(CVV) || CVV.Contains('_'))
                {
                    await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.CVVError, Languages.Accept);
                    return false;
                }
            }


            return true;
        }
    }
}


10. Probamos, para obtener unos números de tarjeta válidos usamos esta página: https://stripe.com/docs/testing.
Ver historial de pedidos


11. Adicionar estos literales:


Ingles


 <data name="Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="UpdateRemarks" xml:space="preserve">
    <value>Update Remarks</value>
  </data>
  <data name="CancelOrder" xml:space="preserve">
    <value>Cancel Order</value>
  </data>
  <data name="OrderStatus" xml:space="preserve">
    <value>Order Status</value>
  </data>
  <data name="SearchOrder" xml:space="preserve">
    <value>Enter the value to search...</value>
  </data>
 <data name="DateSent" xml:space="preserve">
    <value>Date Sent</value>
  </data>
  <data name="DateConfirmed" xml:space="preserve">
    <value>Date Confirmed</value>
  </data>
  <data name="RemarksError" xml:space="preserve">
    <value>You must enter some remarks.</value>
  </data>
  <data name="OrderUpdatedOk" xml:space="preserve">
    <value>Order updated ok.</value>
  </data>
  <data name="CancelOrdenConfirm" xml:space="preserve">
    <value>Are you sure to cancel the order?</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Question</value>
  </data>


Español


 <data name="Order" xml:space="preserve">
    <value>Pedido</value>
  </data>
  <data name="UpdateRemarks" xml:space="preserve">
    <value>Actualizar Comentarios</value>
  </data>
  <data name="CancelOrder" xml:space="preserve">
    <value>Cancelar Pedido</value>
  </data>
  <data name="OrderStatus" xml:space="preserve">
    <value>Estado Ordén</value>
  </data>
  <data name="SearchOrder" xml:space="preserve">
    <value>Ingrese el valor a buscar...</value>
  </data>
 <data name="DateSent" xml:space="preserve">
    <value>Fecha envío</value>
  </data>
  <data name="DateConfirmed" xml:space="preserve">
    <value>Fecha confirmación</value>
  </data>
  <data name="RemarksError" xml:space="preserve">
    <value>Debes ingresar algún comentario.</value>
  </data>
  <data name="OrderUpdatedOk" xml:space="preserve">
    <value>Pedido actualizado con éxito.</value>
  </data>
  <data name="CancelOrdenConfirm" xml:space="preserve">
    <value>¿Estas seguro de cancelar el pedido?</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Pregunta</value>
  </data>


Portuguez


 <data name="Order" xml:space="preserve">
    <value>Ordem</value>
  </data>
  <data name="UpdateRemarks" xml:space="preserve">
    <value>Comentários Atualização</value>
  </data>
  <data name="CancelOrder" xml:space="preserve">
    <value>Cancelar Pedido</value>
  </data>
  <data name="OrderStatus" xml:space="preserve">
    <value>Estado de Ordén</value>
  </data>
  <data name="SearchOrder" xml:space="preserve">
    <value>Insira o valor para pesquisar ...</value>
  </data>
 <data name="DateSent" xml:space="preserve">
    <value>Data de envio</value>
  </data>
  <data name="DateConfirmed" xml:space="preserve">
    <value>Data de confirmação</value>
  </data>
  <data name="RemarksError" xml:space="preserve">
    <value>Você deve inserir um comentário.</value>
  </data>
  <data name="OrderUpdatedOk" xml:space="preserve">
    <value>Pedido atualizado com sucesso.</value>
  </data>
  <data name="CancelOrdenConfirm" xml:space="preserve">
    <value>Tem certeza que deseja cancelar o pedido?</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Questão</value>
  </data>


12. Modificar Languages:


public static string Order => Resource.Order;


public static string UpdateRemarks => Resource.UpdateRemarks;


public static string CancelOrder => Resource.CancelOrder;


public static string OrderStatus => Resource.OrderStatus;


public static string SearchOrder => Resource.SearchOrder;


public static string DateSent => Resource.DateSent;


public static string DateConfirmed => Resource.DateConfirmed;


public static string RemarksError => Resource.RemarksError;


public static string OrderUpdatedOk => Resource.OrderUpdatedOk;


public static string CancelOrdenConfirm => Resource.CancelOrdenConfirm;


public static string Question => Resource.Question;


13. Crear la OrderPage, inicialmente con este diseño:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             xmlns:inputLayout="clr-namespace:Syncfusion.XForms.TextInputLayout;assembly=Syncfusion.Core.XForms"
             xmlns:ffimageloading="clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms"
             x:Class="OnSale.Prism.Views.OrderPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <StackLayout Padding="5">
        <ScrollView>
            <StackLayout>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Column="0"
                           Grid.Row="0"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Date}"/>
                    <Label Grid.Column="1"
                           Grid.Row="0"
                           Text="{Binding Order.DateLocal, StringFormat='{0:yyyy/MM/hh tt}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="1"
                           FontAttributes="Bold"
                           Text="{i18n:Translate DateSent}"/>
                    <Label Grid.Column="1"
                           Grid.Row="0"
                           Text="{Binding Order.DateSentLocal, StringFormat='{0:yyyy/MM/hh tt}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="2"
                           FontAttributes="Bold"
                           Text="{i18n:Translate DateConfirmed}"/>
                    <Label Grid.Column="1"
                           Grid.Row="2"
                           Text="{Binding Order.DateConfirmedLocal, StringFormat='{0:yyyy/MM/hh tt}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="3"
                           FontAttributes="Bold"
                           Text="{i18n:Translate OrderStatus}"/>
                    <Label Grid.Column="1"
                           Grid.Row="3"
                           Text="{Binding Order.OrderStatus}"/>


                    <Label Grid.Column="0"
                           Grid.Row="4"
                           FontAttributes="Bold"
                           Text="{i18n:Translate PaymentMethod}"/>
                    <Label Grid.Column="1"
                           Grid.Row="4"
                           Text="{Binding Order.PaymentMethod}"/>


                    <Label Grid.Column="0"
                           Grid.Row="5"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Items}"/>
                    <Label Grid.Column="1"
                           Grid.Row="5"
                           HorizontalOptions="End"
                           Text="{Binding Order.Lines, StringFormat='{0:N0}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="6"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Quantity}"/>
                    <Label Grid.Column="1"
                           Grid.Row="6"
                           HorizontalOptions="End"
                           Text="{Binding Order.Quantity, StringFormat='{0:N2}'}"/>


                    <Label Grid.Column="0"
                           Grid.Row="7"
                           FontAttributes="Bold"
                           Text="{i18n:Translate Value}"/>
                    <Label Grid.Column="1"
                           Grid.Row="7"
                           HorizontalOptions="End"
                           Text="{Binding Order.Value, StringFormat='{0:C2}'}"/>
                </Grid>


                <inputLayout:SfTextInputLayout Hint="{i18n:Translate Remarks}" 
                                                ContainerType="Outlined">
                    <Editor Placeholder="{i18n:Translate RemarksPlaceHolder}"
                            HeightRequest="100"
                            Text="{Binding Order.Remarks}" />
                </inputLayout:SfTextInputLayout>


                <CollectionView ItemsSource="{Binding OrderDetails}">
                    <CollectionView.ItemsLayout>
                        <GridItemsLayout Orientation="Vertical"/>
                    </CollectionView.ItemsLayout>
                    <CollectionView.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ffimageloading:CachedImage Grid.Column="0"
                                                            Aspect="AspectFill"
                                                            Source="{Binding Product.ImageFullPath}" 
                                                            CacheDuration= "50"
                                                            Margin="5"
                                                            RetryCount= "3"
                                                            RetryDelay= "600"
                                                            VerticalOptions="Center"
                                                            WidthRequest="100"/>
                                <StackLayout Grid.Column="1"
                                             VerticalOptions="Center">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Label Grid.Column="0"
                                               Grid.Row="0"
                                               FontAttributes="Bold"
                                               Text="{i18n:Translate Product}"/>
                                        <Label Grid.Column="1"
                                               Grid.Row="0"
                                               Text="{Binding Product.Name}" 
                                               FontAttributes="Bold"
                                               FontSize="Medium"
                                               LineBreakMode="TailTruncation" />


                                        <Label Grid.Column="0"
                                               Grid.Row="1"
                                               FontAttributes="Bold"
                                               Text="{i18n:Translate Remarks}"/>
                                        <Label Grid.Column="1"
                                               Grid.Row="1"
                                               Text="{Binding Remarks}"
                                               MaxLines="3"
                                               LineBreakMode="TailTruncation"
                                               VerticalOptions="End" />


                                        <Label Grid.Column="0"
                                               Grid.Row="2"
                                               FontAttributes="Bold"
                                               Text="{i18n:Translate Price}"/>
                                        <Label Grid.Column="1"
                                               Grid.Row="2"
                                               Text="{Binding Product.Price, StringFormat='{0:C2}'}"
                                               LineBreakMode="TailTruncation"
                                               VerticalOptions="End" />


                                        <Label Grid.Column="0"
                                               Grid.Row="3"
                                               FontAttributes="Bold"
                                               Text="{i18n:Translate Quantity}"/>
                                        <Label Grid.Column="1"
                                               Grid.Row="3"
                                               Text="{Binding Quantity, StringFormat='{0:N2}'}"
                                               LineBreakMode="TailTruncation"
                                               VerticalOptions="End" />


                                        <Label Grid.Column="0"
                                               Grid.Row="4"
                                               FontAttributes="Bold"
                                               Text="{i18n:Translate Value}"/>
                                        <Label Grid.Column="1"
                                               Grid.Row="4"
                                               Text="{Binding Value, StringFormat='{0:C2}'}"
                                               LineBreakMode="TailTruncation"
                                               VerticalOptions="End" />
                                    </Grid>
                                </StackLayout>
                            </Grid>
                        </DataTemplate>
                    </CollectionView.ItemTemplate>
                </CollectionView>


            </StackLayout>
        </ScrollView>
        <StackLayout Orientation="Horizontal"
                     VerticalOptions="EndAndExpand">
            <Button Command="{Binding UpdateRemarksCommand}"
                    Text="{i18n:Translate UpdateRemarks}"/>
            <Button Command="{Binding CancelOrderCommand}"
                    IsVisible="{Binding IsVisible}"
                    Style="{StaticResource DangerButton}"
                    Text="{i18n:Translate CancelOrder}"/>
        </StackLayout>
    </StackLayout>


</ContentPage>


14. Agregar estos métodos al IApiService:


Task<Response> GetListAsync<T>(string urlBase, string servicePrefix, string controller, string token);


Task<Response> PutAsync<T>(string urlBase, string servicePrefix, string controller, T model, string token);


15. Agregar este método al ApiService:


public async Task<Response> GetListAsync<T>(string urlBase, string servicePrefix, string controller, string token)
{
    try
    {
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase),
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.GetAsync(url);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return new Response
            {
                IsSuccess = false,
                Message = result,
            };
        }


        List<T> list = JsonConvert.DeserializeObject<List<T>>(result);
        return new Response
        {
            IsSuccess = true,
            Result = list
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


public async Task<Response> PutAsync<T>(string urlBase, string servicePrefix, string controller, T model, string token)
{
    try
    {
        string request = JsonConvert.SerializeObject(model);
        StringContent content = new StringContent(request, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PutAsync(url, content);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return new Response
            {
                IsSuccess = false,
                Message = result,
            };
        }


        T item = JsonConvert.DeserializeObject<T>(result);


        return new Response
        {
            IsSuccess = true,
            Result = item
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


16. Crear la OrderPageViewModel:


 public class OrderPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private OrderResponse _order;
    private ObservableCollection<OrderDetailResponse> _orderDetails;
    private bool _isVisible;
    private DelegateCommand _updateRemarksCommand;
    private DelegateCommand _cancelOrderCommand;


    public OrderPageViewModel(INavigationService navigationService, IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        Title = Languages.Order;
    }


    public DelegateCommand UpdateRemarksCommand => _updateRemarksCommand ??
        (_updateRemarksCommand = new DelegateCommand(UpdateRemarksAsync));


    public DelegateCommand CancelOrderCommand => _cancelOrderCommand ??
        (_cancelOrderCommand = new DelegateCommand(CancelOrderAsync));


    public OrderResponse Order
    {
        get => _order;
        set => SetProperty(ref _order, value);
    }


    public bool IsVisible
    {
        get => _isVisible;
        set => SetProperty(ref _isVisible, value);
    }


    public ObservableCollection<OrderDetailResponse> OrderDetails
    {
        get => _orderDetails;
        set => SetProperty(ref _orderDetails, value);
    }


    public override void OnNavigatedTo(INavigationParameters parameters)
    {
        base.OnNavigatedTo(parameters);
        if (parameters.ContainsKey("order"))
        {
            Order = parameters.GetValue<OrderResponse>("order");
            OrderDetails = new ObservableCollection<OrderDetailResponse>(Order.OrderDetails);
            if (Order.OrderStatus == OrderStatus.Pending)
            {
                IsVisible = true;
            }
        }
    }


    private async void UpdateRemarksAsync()
    {
        if (string.IsNullOrEmpty(Order.Remarks))
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.RemarksError, Languages.Accept);
            return;
        }


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        string url = App.Current.Resources["UrlAPI"].ToString();
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        Response response = await _apiService.PutAsync(url, "api", "/Orders", Order, token.Token);


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            return;
        }


        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.OrderUpdatedOk, Languages.Accept);
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    }


    private async void CancelOrderAsync()
    {
        bool asnwer = await App.Current.MainPage.DisplayAlert(Languages.Question, Languages.CancelOrdenConfirm, Languages.Yes, Languages.No);
        if (!asnwer)
        {
            return;
        }


        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        Order.OrderStatus = OrderStatus.Cancelled;
        string url = App.Current.Resources["UrlAPI"].ToString();
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        Response response = await _apiService.PutAsync(url, "api", "/Orders", Order, token.Token);


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            return;
        }


        await App.Current.MainPage.DisplayAlert(Languages.Ok, Languages.OrderUpdatedOk, Languages.Accept);
        await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    }
}


17. Crear la OrderItemViewModel:


public class OrderItemViewModel : OrderResponse
{
    private readonly INavigationService _navigationService;
    private DelegateCommand _selectOrderCommand;


    public OrderItemViewModel(INavigationService navigationService)
    {
        _navigationService = navigationService;
    }


    public DelegateCommand SelectOrderCommand => _selectOrderCommand ?? (_selectOrderCommand = new DelegateCommand(SelectOrderAsync));


    private async void SelectOrderAsync()
    {
        NavigationParameters parameters = new NavigationParameters
        {
            { "order", this }
        };


        await _navigationService.NavigateAsync(nameof(OrderPage), parameters);
    }
}


18. Modificar la ShowHistoryPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
                  xmlns:busyindicator="clr-namespace:Syncfusion.SfBusyIndicator.XForms;assembly=Syncfusion.SfBusyIndicator.XForms"
                    xmlns:i18n="clr-namespace:OnSale.Prism.Helpers"
             x:Class="OnSale.Prism.Views.ShowHistoryPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">


    <AbsoluteLayout>
        <StackLayout AbsoluteLayout.LayoutBounds="0,0,1,1"
                     AbsoluteLayout.LayoutFlags="All" 
                     Padding="5">
            <SearchBar Placeholder="{i18n:Translate SearchOrder}"
                       SearchCommand="{Binding SearchCommand}"
                       Text="{Binding Search}"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="46" />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0"
                       FontAttributes="Bold"
                       Text="{i18n:Translate Date}"/>
                <Label Grid.Column="1"
                       FontAttributes="Bold"
                       Text="{i18n:Translate OrderStatus}"/>
                <Label Grid.Column="2"
                       FontAttributes="Bold"
                       HorizontalOptions="End"
                       Text="{i18n:Translate Value}"/>
            </Grid>
            <CollectionView ItemsSource="{Binding Orders}">
                <CollectionView.ItemsLayout>
                    <GridItemsLayout Orientation="Vertical"/>
                </CollectionView.ItemsLayout>
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.GestureRecognizers>
                                <TapGestureRecognizer Command="{Binding SelectOrderCommand}"/>
                            </Grid.GestureRecognizers>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0"
                                   Text="{Binding DateLocal, StringFormat='{0:yyyy/MM/dd hh:mm tt}'}"/>
                            <Label Grid.Column="1" 
                                   Text="{Binding OrderStatus}"
                                   VerticalOptions="Center"/>
                            <Label Grid.Column="2" 
                                   Text="{Binding Value, StringFormat='{0:C2}'}"
                                   HorizontalOptions="End"
                                   VerticalOptions="Center"/>
                            <Image Grid.Column="3"
                                   Source="ic_more_vert"
                                   VerticalOptions="Center"/>
                        </Grid>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
        </StackLayout>
        <busyindicator:SfBusyIndicator AnimationType="Gear" 
                                       AbsoluteLayout.LayoutBounds=".5,.5,.5,.5"
                                           AbsoluteLayout.LayoutFlags="All"
                                           BackgroundColor="{StaticResource ColorAccent}"
                                           HorizontalOptions="Center"
                                           TextColor="{StaticResource ColorFontInverse}"
                                           IsBusy="{Binding IsRunning}"
                                           Title="{i18n:Translate Loading}"
                                           VerticalOptions="Center"
                                           ViewBoxWidth="80"
                                           ViewBoxHeight="80" />
    </AbsoluteLayout>


</ContentPage>


19. Modificar la ShowHistoryPageViewModel:


public class ShowHistoryPageViewModel : ViewModelBase
{
    private readonly INavigationService _navigationService;
    private readonly IApiService _apiService;
    private ObservableCollection<OrderItemViewModel> _orders;
    private bool _isRunning;
    private string _search;
    private int _cartNumber;
    private List<OrderResponse> _myOrders;
    private DelegateCommand _searchCommand;


    public ShowHistoryPageViewModel(INavigationService navigationService, IApiService apiService)
        : base(navigationService)
    {
        _navigationService = navigationService;
        _apiService = apiService;
        Title = Languages.ShowPurchaseHistory;
        LoadOrdersAsync();
    }


    public DelegateCommand SearchCommand => _searchCommand ?? (_searchCommand = new DelegateCommand(ShowOrders));
    public string Search
    {
        get => _search;
        set
        {
            SetProperty(ref _search, value);
            ShowOrders();
        }
    }


    public bool IsRunning
    {
        get => _isRunning;
        set => SetProperty(ref _isRunning, value);
    }


    public ObservableCollection<OrderItemViewModel> Orders
    {
        get => _orders;
        set => SetProperty(ref _orders, value);
    }


    private async void LoadOrdersAsync()
    {
        if (Connectivity.NetworkAccess != NetworkAccess.Internet)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ConnectionError, Languages.Accept);
            return;
        }


        IsRunning = true;
        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
        string url = App.Current.Resources["UrlAPI"].ToString();
        Response response = await _apiService.GetListAsync<OrderResponse>(url, "/api", "/Orders", token.Token);
        IsRunning = false;


        if (!response.IsSuccess)
        {
            await App.Current.MainPage.DisplayAlert(Languages.Error, response.Message, Languages.Accept);
            return;
        }


        _myOrders = (List<OrderResponse>)response.Result;
        ShowOrders();
    }


    private void ShowOrders()
    {
        if (_myOrders == null)
        {
            return;
        }


        if (string.IsNullOrEmpty(Search))
        {
            Orders = new ObservableCollection<OrderItemViewModel>(_myOrders.Select(o => new OrderItemViewModel(_navigationService)
            {
                Date = o.Date,
                DateConfirmed = o.DateConfirmed,
                DateSent = o.DateSent,
                Id = o.Id,
                OrderDetails = o.OrderDetails,
                OrderStatus = o.OrderStatus,
                PaymentMethod = o.PaymentMethod,
                Remarks = o.Remarks,
                User = o.User
            })
                .OrderByDescending(o => o.Date)
                .ToList());
        }
        else
        {
            Orders = new ObservableCollection<OrderItemViewModel>(_myOrders.Select(o => new OrderItemViewModel(_navigationService)
            {
                Date = o.Date,
                DateConfirmed = o.DateConfirmed,
                DateSent = o.DateSent,
                Id = o.Id,
                OrderDetails = o.OrderDetails,
                OrderStatus = o.OrderStatus,
                PaymentMethod = o.PaymentMethod,
                Remarks = o.Remarks,
                User = o.User
            })
                .Where(o => o.Value.ToString().Contains(Search))
                .OrderByDescending(o => o.Date)
                .ToList());
        }
    }
}


20. Probamos.
________________
Integración con Facebook
Vamos a implementar la siguiente pantalla:


Android
  

	Android
  

	Android
  

	________________




iOS
  

	iOS
  

	iOS
  

	Create a Facebook App
1. You need a Hash for Android setup, modify the MainActivity with this:


    new SfRotatorRenderer();
#if DEBUG
    GetAppHash();
#endif
    LoadApplication(new App(new AndroidInitializer()));
...
private void GetAppHash()
{
    try
    {
        PackageInfo info = Application.Context.PackageManager.GetPackageInfo(Application.Context.PackageName, PackageInfoFlags.Signatures);
        foreach (Android.Content.PM.Signature signature in info.Signatures)
        {
            MessageDigest md = MessageDigest.GetInstance("SHA");
            md.Update(signature.ToByteArray());


            var hash = Convert.ToBase64String(md.Digest());
        }
    }
    catch (NoSuchAlgorithmException e)
    {
        System.Diagnostics.Debug.WriteLine(e);
    }
    catch (Exception e)
    {
        System.Diagnostics.Debug.WriteLine(e);
    }
}


2. For my case the hash is: J9j2ScZ55VExYR4lC2gSuKXA8Q4= keep this value we will need it soon.


3. Login to https://developers.facebook.com and create a new application:


  



  



Creamos una nueva App y seleccionamos “Para todo lo demás”


  



  



4. Go to basic configuration and fill these parameters:


  



5. Go to settings section to add your android and ios platforms.


6. Click on add platform and then select Android.


  



7. Add your package name and full class name for your Activity.


  



8. Click on add platform then select iOS.


  



9. Put the name of your bundle identifier:


  



10. Save changes and publish your application in Facebook.


  



General Setup
1. Install the plugin Plugin.FacebookClient in all your mobile projects.


2. Modify the MainActivity:


protected override void OnCreate(Bundle bundle)
{
    TabLayoutResource = Resource.Layout.Tabbar;
    ToolbarResource = Resource.Layout.Toolbar;


    base.OnCreate(bundle);
    FacebookClientManager.Initialize(this);
    CrossCurrentActivity.Current.Init(this, bundle);
    global::Xamarin.Forms.Forms.Init(this, bundle);
    new SfBusyIndicatorRenderer();
    FFImageLoading.Forms.Platform.CachedImageRenderer.Init(true);
    LoadApplication(new App(new AndroidInitializer()));
}
...
protected override void OnActivityResult(int requestCode, Result resultCode, Intent data)
{
    base.OnActivityResult(requestCode, resultCode, data);
    FacebookClientManager.OnActivityResult(requestCode, resultCode, data);
}
...


3. Add the Strings.xml to the project in Resources.values and add this values (replace the id for your facebook app id):


<?xml version="1.0" encoding="utf-8"?>
<resources>
        <string name="hello">Hello World, Click Me!</string>
        <string name="app_name">On Sale</string>
        <string name="facebook_app_name">OnSalePrep</string>
        <string name="facebook_app_id">777699499653155</string>
        <string name="fb_login_protocol_scheme">fb777699499653155</string>
</resources>


4. Modify the AndroidManifest.xml:


        <application android:label="Soccer" android:icon="@mipmap/ic_launcher">
                <provider android:name="android.support.v4.content.FileProvider" android:authorities="${applicationId}.fileprovider" android:exported="false" android:grantUriPermissions="true">
                        <meta-data android:name="android.support.FILE_PROVIDER_PATHS" android:resource="@xml/file_paths"></meta-data>
                </provider>
    <meta-data android:name="com.facebook.sdk.ApplicationId"  android:value="@string/facebook_app_id"/>
    <activity android:name="com.facebook.FacebookActivity"
        android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
        android:label="@string/facebook_app_name" />
    <activity
        android:name="com.facebook.CustomTabActivity"
        android:exported="true">
      <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="@string/fb_login_protocol_scheme" />
      </intent-filter>
    </activity>
  </application>


5. Modify the AppDelegate:


public override bool FinishedLaunching(UIApplication app, NSDictionary options)
{
    global::Xamarin.Forms.Forms.Init();
    new SfNumericTextBoxRenderer();
    FFImageLoading.Forms.Platform.CachedImageRenderer.Init();
    new SfBusyIndicatorRenderer();
    new SfRotatorRenderer();
    SfTextInputLayoutRenderer.Init();
    LoadApplication(new App(new iOSInitializer()));
    SfMaskedEditRenderer.Init();
    SfRatingRenderer.Init();
    FacebookClientManager.Initialize(app, options);
    return base.FinishedLaunching(app, options);
}


public override void OnActivated(UIApplication uiApplication)
{
    base.OnActivated(uiApplication);
    FacebookClientManager.OnActivated();
}


public override bool OpenUrl(UIApplication app, NSUrl url, NSDictionary options)
{
    return FacebookClientManager.OpenUrl(app, url, options);
}


public override bool OpenUrl(UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)
{
    return FacebookClientManager.OpenUrl(application, url, sourceApplication, annotation);
}


6. Modify the Info.plist, change the ID for your facebook app ID:


        <key>NSAppTransportSecurity</key>
        <dict>
                <key>NSExceptionDomains</key>
                <dict>
                        <key>facebook.com</key>
                        <dict>
                                <key>NSIncludesSubdomains</key>
                                <true/>
                                <key>NSThirdPartyExceptionRequiresForwardSecrecy</key>
                                <false/>
                        </dict>
                        <key>fbcdn.net</key>
                        <dict>
                                <key>NSIncludesSubdomains</key>
                                <true/>
                                <key>NSThirdPartyExceptionRequiresForwardSecrecy</key>
                                <false/>
                        </dict>
                        <key>akamaihd.net</key>
                        <dict>
                                <key>NSIncludesSubdomains</key>
                                <true/>
                                <key>NSThirdPartyExceptionRequiresForwardSecrecy</key>
                                <false/>
                        </dict>
                </dict>
                <key>NSAllowsArbitraryLoadsInWebContent</key>
                <true/>
        </dict>
        <key>otherExternalDomainYouNeedToCall</key>
        <dict>
                <key>NSIncludesSubdomains</key>
                <true/>
                <key>NSExceptionAllowsInsecureHTTPLoads</key>
                <true/>
                <key>NSAllowsArbitraryLoads</key>
                <true/>
        </dict>
        <key>CFBundleURLTypes</key>
        <array>
                <dict>
                        <key>CFBundleURLName</key>
                        <string>fb</string>
                        <key>CFBundleURLSchemes</key>
                        <array>
                                <string>fb777699499653155</string>
                        </array>
                </dict>
                <dict>
                        <key>CFBundleURLName</key>
                        <string>google</string>
                        <key>CFBundleURLSchemes</key>
                        <array>
                                <string>com.googleusercontent.apps.60015114581-8t3d8n4r2s38fvltdqrnf8ip7thqcntu</string>
                        </array>
                        <key>CFBundleTypeRole</key>
                        <string>Editor</string>
                </dict>
        </array>
        <key>FacebookAppID</key>
        <string>777699499653155</string>
        <key>FacebookDisplayName</key>
        <string>SocialMediaAuthentication</string>
        <key>LSApplicationQueriesSchemes</key>
        <array>
                <string>fbapi</string>
                <string>fb-messenger-api</string>
                <string>fbauth2</string>
                <string>fbshareextension</string>
        </array>
</dict>
Integration with OnSale App
1. Add the FacebookProfile in Common.Models:


public class Data
{
    [JsonProperty("is_silhouette")]
    public bool IsSilhouette { get; set; }


    public int Height { get; set; }


    public string Url { get; set; }


    public int Width { get; set; }
}


public class Picture
{
    public Data Data { get; set; }
}


public class FacebookProfile
{
    public string Email { get; set; }


    public string Id { get; set; }


    public Picture Picture { get; set; }


    [JsonProperty("last_name")]
    public string LastName { get; set; }


    [JsonProperty("first_name")]
    public string FirstName { get; set; }
}


2. Add the ic_fb.png.


3. Adicionar estos literales:


Ingles


 <data name="LoginFacebook" xml:space="preserve">
    <value>Login With Facebook</value>
  </data>
 <data name="ChangeOnSocialNetwork" xml:space="preserve">
    <value>Users registered by social networks, must change the photo or password on the social network.</value>
  </data>


Español


 <data name="LoginFacebook" xml:space="preserve">
    <value>Ingresar con Facebook</value>
  </data>
 <data name="ChangeOnSocialNetwork" xml:space="preserve">
    <value>Los usuarios registrados por redes sociales, deben cambiar la foto o contraseña en la red social.</value>
  </data>


Portuguez


 <data name="LoginFacebook" xml:space="preserve">
    <value>Entrar com o Facebook</value>
  </data>
 <data name="ChangeOnSocialNetwork" xml:space="preserve">
    <value>Os usuários cadastrados nas redes sociais, devem alterar a foto ou senha na rede social.</value>
  </data>


4. Modificar Languages:


public static string LoginFacebook => Resource.LoginFacebook;


public static string ChangeOnSocialNetwork => Resource.ChangeOnSocialNetwork;


5. Modify the LoginPage:


<StackLayout VerticalOptions="EndAndExpand">
    <Button Command="{Binding LoginCommand}" 
            IsEnabled="{Binding IsEnabled}"
            Text="{i18n:Translate Login}"/>
    <Button BackgroundColor="#4768AD" 
            Command="{Binding LoginFacebookCommand}"
            HeightRequest="45"
            IsEnabled="{Binding IsEnabled}"
            ImageSource="ic_fb"
            Text="{i18n:Translate LoginFacebook}"
            TextColor="#FFFFFF"/>
    <Button Command="{Binding RegisterCommand}" 
            IsEnabled="{Binding IsEnabled}"
            Text="{i18n:Translate Register}"
            Style="{StaticResource DangerButton}"/>
</StackLayout>


6. Modify the LoginPageViewModel:


private readonly IFacebookClient _facebookService = CrossFacebookClient.Current;
private DelegateCommand _loginFacebookCommand;
…
public DelegateCommand LoginFacebookCommand => _loginFacebookCommand ?? (_loginFacebookCommand = new DelegateCommand(LoginFacebookAsync));
…
private async void LoginFacebookAsync()
{
    try
    {


        if (_facebookService.IsLoggedIn)
        {
            _facebookService.Logout();
        }


        async void userDataDelegate(object sender, FBEventArgs<string> e)
        {
            switch (e.Status)
            {
                case FacebookActionStatus.Completed:
                    FacebookProfile facebookProfile = await Task.Run(() => JsonConvert.DeserializeObject<FacebookProfile>(e.Data));
                    break;
                case FacebookActionStatus.Canceled:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Canceled", "Ok");
                    break;
                case FacebookActionStatus.Error:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Error", "Ok");
                    break;
                case FacebookActionStatus.Unauthorized:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Unauthorized", "Ok");
                    break;
            }


            _facebookService.OnUserData -= userDataDelegate;
        }


        _facebookService.OnUserData += userDataDelegate;


        string[] fbRequestFields = { "email", "first_name", "picture", "gender", "last_name" };
        string[] fbPermisions = { "email" };
        await _facebookService.RequestUserDataAsync(fbRequestFields, fbPermisions);
    }
    catch (Exception ex)
    {
        Debug.WriteLine(ex.ToString());
    }
}


7. Test what we do until this moment.


8. Add the enum LoginType:


public enum LoginType
{
    OnSale,
    Facebook
}


9. Modify the UserResponse:


public string ImageFacebook { get; set; }


public LoginType LoginType { get; set; }


public string ImageFullPath
{
    get
    {
        if (LoginType == LoginType.Facebook && string.IsNullOrEmpty(ImageFacebook) || 
            LoginType == LoginType.OnSale && ImageId == Guid.Empty)
        {
            return $"https://onsaleprepweb.azurewebsites.net/images/noimage.png";
        }


        if (LoginType == LoginType.Facebook)
        {
            return ImageFacebook;
        }


        return $"https://onsale.blob.core.windows.net/users/{ImageId}";
    } 
}


10. Modify the User entity:


[Display(Name = "Login Type")]
public LoginType LoginType { get; set; }


public string ImageFacebook { get; set; }


[Display(Name = "Image")]
public string ImageFullPath
{
    get
    {
        if (LoginType == LoginType.Facebook && string.IsNullOrEmpty(ImageFacebook) ||
            LoginType == LoginType.OnSale && ImageId == Guid.Empty)
        {
            return $"https://onsaleprepweb.azurewebsites.net/images/noimage.png";
        }


        if (LoginType == LoginType.Facebook)
        {
            return ImageFacebook;
        }


        return $"https://onsale.blob.core.windows.net/users/{ImageId}";
    }
}


11. Add the migration and update the database.


12. Modify the IUserHelper:


Task<User> AddUserAsync(FacebookProfile model);


13. Modify the UserHelper:


public async Task<User> AddUserAsync(FacebookProfile model)
{
    User userEntity = new User
    {
        Address = "...",
        Document = "...",
        Email = model.Email,
        FirstName = model.FirstName,
        LastName = model.LastName,
        ImageFacebook = model.Picture?.Data?.Url,
        PhoneNumber = "...",
        City = await _context.Cities.FirstOrDefaultAsync(),
        UserName = model.Email,
        UserType = UserType.User,
        LoginType = LoginType.Facebook,
        ImageId = Guid.Empty
    };


    IdentityResult result = await _userManager.CreateAsync(userEntity, model.Id);
    if (result != IdentityResult.Success)
    {
        return null;
    }


    User newUser = await GetUserAsync(model.Email);
    await AddUserToRoleAsync(newUser, userEntity.UserType.ToString());
    return newUser;
}


14. Modify the API AccountController:


[HttpPost]
[Route("CreateToken")]
public async Task<IActionResult> CreateToken([FromBody] LoginViewModel model)
{
    if (ModelState.IsValid)
    {
        User user = await _userHelper.GetUserAsync(model.Username);
        if (user != null)
        {
            Microsoft.AspNetCore.Identity.SignInResult result = await _userHelper.ValidatePasswordAsync(user, model.Password);


            if (result.Succeeded)
            {
                object results = GetToken(user);
                return Created(string.Empty, results);
            }
        }
    }


    return BadRequest();
}


[HttpPost]
[Route("LoginFacebook")]
public async Task<IActionResult> LoginFacebook([FromBody] FacebookProfile model)
{
    if (ModelState.IsValid)
    {
        User user = await _userHelper.GetUserAsync(model.Email);
        if (user == null)
        {
            await _userHelper.AddUserAsync(model);
        }
        else
        {
            user.ImageFacebook = model.Picture?.Data?.Url;
            user.FirstName = model.FirstName;
            user.LastName = model.LastName;
            await _userHelper.UpdateUserAsync(user);
        }


        object results = GetToken(user);
        return Created(string.Empty, results);
    }


    return BadRequest();
}


private object GetToken(User user)
{
    Claim[] claims = new[]
    {
        new Claim(JwtRegisteredClaimNames.Sub, user.Email),
        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
    };


    SymmetricSecurityKey key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Tokens:Key"]));
    SigningCredentials credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
    JwtSecurityToken token = new JwtSecurityToken(
        _configuration["Tokens:Issuer"],
        _configuration["Tokens:Audience"],
        claims,
        expires: DateTime.UtcNow.AddDays(99),
        signingCredentials: credentials);


    return new
    {
        token = new JwtSecurityTokenHandler().WriteToken(token),
        expiration = token.ValidTo,
        user
    };
}


15. Re-publish on Azure.


16. Modify the ModifyUserPage:


<inputLayout:SfTextInputLayout Hint="{i18n:Translate FirstName}" 
                                ContainerType="Outlined">
    <Entry Placeholder="{i18n:Translate FirstNamePlaceHolder}" 
            IsEnabled="{Binding IsOnSaleUser}"
            Text="{Binding User.FirstName}" />
</inputLayout:SfTextInputLayout>


<inputLayout:SfTextInputLayout Hint="{i18n:Translate LastName}" 
                                ContainerType="Outlined">
    <Entry Placeholder="{i18n:Translate LastName}" 
            IsEnabled="{Binding IsOnSaleUser}"
            Text="{Binding User.LastName}" />
</inputLayout:SfTextInputLayout>


17. Modify the ModifyUserPageViewModel:


private bool _isOnSaleUser;
…
public ModifyUserPageViewModel(
    INavigationService navigationService,
    IApiService apiService,
    IFilesHelper filesHelper)
    : base(navigationService)
{
    _navigationService = navigationService;
    _apiService = apiService;
    _filesHelper = filesHelper;
    Title = Languages.ModifyUser;
    IsEnabled = true;
    TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(Settings.Token);
    User = token.User;
    Image = User.ImageFullPath;
    IsOnSaleUser = User.LoginType == LoginType.OnSale;
    LoadCountriesAsync();
}
…
public bool IsOnSaleUser
{
    get => _isOnSaleUser;
    set => SetProperty(ref _isOnSaleUser, value);
}
…
private async void ChangeImageAsync()
{
    if (!IsOnSaleUser)
    {
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ChangeOnSocialNetwork, Languages.Accept);
        return;
    }


    await CrossMedia.Current.Initialize();
…
private async void ChangePasswordAsync()
{
    if (!IsOnSaleUser)
    {
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.ChangeOnSocialNetwork, Languages.Accept);
        return;
    }


    await _navigationService.NavigateAsync(nameof(ChangePasswordPage));
}


18. Modify the IApiService:


Task<Response> GetTokenAsync(string urlBase, string servicePrefix, string controller, FacebookProfile request);


19. Modify the ApiService:


public async Task<Response> GetTokenAsync(string urlBase, string servicePrefix, string controller, FacebookProfile request)
{
    try
    {
        string requestString = JsonConvert.SerializeObject(request);
        StringContent content = new StringContent(requestString, Encoding.UTF8, "application/json");
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase)
        };


        string url = $"{servicePrefix}{controller}";
        HttpResponseMessage response = await client.PostAsync(url, content);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return new Response
            {
                IsSuccess = false,
                Message = result,
            };
        }


        TokenResponse token = JsonConvert.DeserializeObject<TokenResponse>(result);
        return new Response
        {
            IsSuccess = true,
            Result = token
        };
    }
    catch (Exception ex)
    {
        return new Response
        {
            IsSuccess = false,
            Message = ex.Message
        };
    }
}


20. Modify the LoginPageViewModel:


private async void LoginFacebookAsync()
{
    try
    {
        if (_facebookService.IsLoggedIn)
        {
            _facebookService.Logout();
        }


        async void userDataDelegate(object sender, FBEventArgs<string> e)
        {
            switch (e.Status)
            {
                case FacebookActionStatus.Completed:
                    FacebookProfile facebookProfile = await Task.Run(() => JsonConvert.DeserializeObject<FacebookProfile>(e.Data));
                    await LoginFacebookAsync(facebookProfile);
                    break;
                case FacebookActionStatus.Canceled:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Canceled", "Ok");
                    break;
                case FacebookActionStatus.Error:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Error", "Ok");
                    break;
                case FacebookActionStatus.Unauthorized:
                    await App.Current.MainPage.DisplayAlert("Facebook Auth", "Unauthorized", "Ok");
                    break;
            }


            _facebookService.OnUserData -= userDataDelegate;
        }


        _facebookService.OnUserData += userDataDelegate;


        string[] fbRequestFields = { "email", "first_name", "picture.width(999)", "gender", "last_name" };
        string[] fbPermisions = { "email" };
        await _facebookService.RequestUserDataAsync(fbRequestFields, fbPermisions);
    }
    catch (Exception ex)
    {
        Debug.WriteLine(ex.ToString());
    }
}


private async Task LoginFacebookAsync(FacebookProfile facebookProfile)
{
    IsRunning = true;
    IsEnabled = false;


    string url = App.Current.Resources["UrlAPI"].ToString();


    Response response = await _apiService.GetTokenAsync(url, "api", "/Account/LoginFacebook", facebookProfile);


    if (!response.IsSuccess)
    {
        IsRunning = false;
        IsEnabled = true;
        await App.Current.MainPage.DisplayAlert(Languages.Error, Languages.LoginError, Languages.Accept);
        Password = string.Empty;
        return;
    }


    TokenResponse token = (TokenResponse)response.Result;
    Settings.Token = JsonConvert.SerializeObject(token);
    Settings.IsLogin = true;


    IsRunning = false;
    IsEnabled = true;


    await _navigationService.NavigateAsync($"/{nameof(OnSaleMasterDetailPage)}/NavigationPage/{nameof(ProductsPage)}");
    Password = string.Empty;
}


21. Test it.
Utilización del API para crear usuarios y preparar el sistema para mapas


1. Agregar estas propiedades a la User entity:


[DisplayFormat(DataFormatString = "{0:N4}")]
public double Latitude { get; set; }


[DisplayFormat(DataFormatString = "{0:N4}")]
public double Logitude { get; set; }


2. Agregar estas propiedades a la EditUserViewModel model:


[DisplayFormat(DataFormatString = "{0:N4}")]
public double Latitude { get; set; }


[DisplayFormat(DataFormatString = "{0:N4}")]
public double Logitude { get; set; }


3. Agregar estas propiedades a la UserResponse model:


public double Latitude { get; set; }


public double Logitude { get; set; }


4. Agregar estas propiedades a la UserRequest model:


public double Latitude { get; set; }


public double Logitude { get; set; }




5. Agregar el modelo RandomUsers:


public partial class RandomUsers
{
    [JsonProperty("results")]
    public List<RandomUser> Results { get; set; }


    [JsonProperty("info")]
    public Info Info { get; set; }
}


public partial class Info
{
    [JsonProperty("seed")]
    public string Seed { get; set; }


    [JsonProperty("results")]
    public long Results { get; set; }


    [JsonProperty("page")]
    public long Page { get; set; }


    [JsonProperty("version")]
    public string Version { get; set; }
}


public partial class RandomUser
{
    [JsonProperty("gender")]
    public string Gender { get; set; }


    [JsonProperty("name")]
    public Name Name { get; set; }


    [JsonProperty("location")]
    public Location Location { get; set; }


    [JsonProperty("email")]
    public string Email { get; set; }


    [JsonProperty("login")]
    public Login Login { get; set; }


    [JsonProperty("dob")]
    public Dob Dob { get; set; }


    [JsonProperty("registered")]
    public Dob Registered { get; set; }


    [JsonProperty("phone")]
    public string Phone { get; set; }


    [JsonProperty("cell")]
    public string Cell { get; set; }


    [JsonProperty("id")]
    public Id Id { get; set; }


    [JsonProperty("picture")]
    public Picture2 Picture { get; set; }


    [JsonProperty("nat")]
    public string Nat { get; set; }
}


public partial class Dob
{
    [JsonProperty("date")]
    public DateTimeOffset Date { get; set; }


    [JsonProperty("age")]
    public long Age { get; set; }
}


public partial class Id
{
    [JsonProperty("name")]
    public string Name { get; set; }


    [JsonProperty("value")]
    public object Value { get; set; }
}


public partial class Location
{
    [JsonProperty("street")]
    public Street Street { get; set; }


    [JsonProperty("city")]
    public string City { get; set; }


    [JsonProperty("state")]
    public string State { get; set; }


    [JsonProperty("country")]
    public string Country { get; set; }


    [JsonProperty("postcode")]
    public string Postcode { get; set; }


    [JsonProperty("coordinates")]
    public Coordinates Coordinates { get; set; }


    [JsonProperty("timezone")]
    public Timezone Timezone { get; set; }
}


public partial class Coordinates
{
    [JsonProperty("latitude")]
    public string Latitude { get; set; }


    [JsonProperty("longitude")]
    public string Longitude { get; set; }
}


public partial class Street
{
    [JsonProperty("number")]
    public long Number { get; set; }


    [JsonProperty("name")]
    public string Name { get; set; }
}


public partial class Timezone
{
    [JsonProperty("offset")]
    public string Offset { get; set; }


    [JsonProperty("description")]
    public string Description { get; set; }
}


public partial class Login
{
    [JsonProperty("uuid")]
    public Guid Uuid { get; set; }


    [JsonProperty("username")]
    public string Username { get; set; }


    [JsonProperty("password")]
    public string Password { get; set; }


    [JsonProperty("salt")]
    public string Salt { get; set; }


    [JsonProperty("md5")]
    public string Md5 { get; set; }


    [JsonProperty("sha1")]
    public string Sha1 { get; set; }


    [JsonProperty("sha256")]
    public string Sha256 { get; set; }
}


public partial class Name
{
    [JsonProperty("title")]
    public string Title { get; set; }


    [JsonProperty("first")]
    public string First { get; set; }


    [JsonProperty("last")]
    public string Last { get; set; }
}


public partial class Picture2
{
    [JsonProperty("large")]
    public Uri Large { get; set; }


    [JsonProperty("medium")]
    public Uri Medium { get; set; }


    [JsonProperty("thumbnail")]
    public Uri Thumbnail { get; set; }
}


6. Agregar estos métodos a la IApiService interface:


Task<RandomUsers> GetRandomUser(string urlBase, string servicePrefix);


Task<Stream> GetPictureAsync(string urlBase, string servicePrefix);


7. Agregar estos métodos a la ApiService implementación:


public async Task<Stream> GetPictureAsync(string urlBase, string servicePrefix)
{
    try
    {
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase),
        };


        string url = $"{servicePrefix}";
        HttpResponseMessage response = await client.GetAsync(url);
        Stream stream = await response.Content.ReadAsStreamAsync();


        if (!response.IsSuccessStatusCode)
        {
            return null;
        }


        return stream;
    }
    catch
    {
        return null;
    }
}


public async Task<RandomUsers> GetRandomUser(string urlBase, string servicePrefix)
{
    try
    {
        HttpClient client = new HttpClient
        {
            BaseAddress = new Uri(urlBase),
        };


        string url = $"{servicePrefix}";
        HttpResponseMessage response = await client.GetAsync(url);
        string result = await response.Content.ReadAsStringAsync();


        if (!response.IsSuccessStatusCode)
        {
            return null;
        }


        return JsonConvert.DeserializeObject<RandomUsers>(result);
    }
    catch
    {
        return null;
    }
}


8. Modificar la IBlobHelper interface:


Task<Guid> UploadBlobAsync(IFormFile file, string containerName);


Task<Guid> UploadBlobAsync(byte[] file, string containerName);


Task<Guid> UploadBlobAsync(string image, string containerName);


Task<Guid> UploadBlobAsync(Stream stream, string containerName);


9. Modificar la BlobHelper implementación:


public class BlobHelper : IBlobHelper
{
    private readonly CloudBlobClient _blobClient;


    public BlobHelper(IConfiguration configuration)
    {
        string keys = configuration["Blob:ConnectionString"];
        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(keys);
        _blobClient = storageAccount.CreateCloudBlobClient();
    }


    public async Task<Guid> UploadBlobAsync(byte[] file, string containerName)
    {
        MemoryStream stream = new MemoryStream(file);
        return await UploadStreamAsync(stream, containerName);
    }


    public async Task<Guid> UploadBlobAsync(IFormFile file, string containerName)
    {
        Stream stream = file.OpenReadStream();
        return await UploadStreamAsync(stream, containerName);
    }


    public async Task<Guid> UploadBlobAsync(string image, string containerName)
    {
        Stream stream = File.OpenRead(image);
        return await UploadStreamAsync(stream, containerName);
    }


    public async Task<Guid> UploadBlobAsync(Stream stream, string containerName)
    {
        return await UploadStreamAsync(stream, containerName);
    }


    private async Task<Guid> UploadStreamAsync(Stream stream, string containerName)
    {
        Guid name = Guid.NewGuid();
        CloudBlobContainer container = _blobClient.GetContainerReference(containerName);
        CloudBlockBlob blockBlob = container.GetBlockBlobReference($"{name}");
        await blockBlob.UploadFromStreamAsync(stream);
        return name;
    }
}


10. Configurar la inyección del  ApiService en el proyecto Web:


services.AddScoped<IApiService, ApiService>();


11. Modificar el SeedDb:


private readonly DataContext _context;
private readonly IUserHelper _userHelper;
private readonly IBlobHelper _blobHelper;
private readonly IApiService _apiService;
private readonly Random _random;


public SeedDb(DataContext context, IUserHelper userHelper, IBlobHelper blobHelper, IApiService apiService)
{
    _context = context;
    _userHelper = userHelper;
    _blobHelper = blobHelper;
    _apiService = apiService;
    _random = new Random();
}


public async Task SeedAsync()
{
    await _context.Database.EnsureCreatedAsync();
    await CheckCountriesAsync();
    await CheckRolesAsync();
    await CheckUsersAsync();
    await CheckCategoriesAsync();
    await CheckProductsAsync();
}


private async Task CheckUsersAsync()
{
    if (!_context.Users.Any())
    {
        await CheckAdminsAsync();
        await CheckBuyersAsync();
    }
}


private async Task CheckBuyersAsync()
{
    for (int i = 1; i <= 100; i++)
    {
        await CheckUserAsync($"100{i}", $"buyer{i}@yopmail.com", UserType.User);
    }
}


private async Task CheckAdminsAsync()
{
    await CheckUserAsync("1001", "admin1@yopmail.com", UserType.Admin);
}


private async Task<User> CheckUserAsync(
    string document,
    string email,
    UserType userType)
{
    RandomUsers randomUsers;


    do
    {
        randomUsers = await _apiService.GetRandomUser("https://randomuser.me", "api");
    } while (randomUsers == null);


    Guid imageId = Guid.Empty;
    RandomUser randomUser = randomUsers.Results.FirstOrDefault();
    string imageUrl = randomUser.Picture.Large.ToString().Substring(22);
    Stream stream = await _apiService.GetPictureAsync("https://randomuser.me", imageUrl);
    if (stream != null)
    {
        imageId = await _blobHelper.UploadBlobAsync(stream, "users");
    }


    int cityId = _random.Next(1, _context.Cities.Count());
    User user = await _userHelper.GetUserAsync(email);
    if (user == null)
    {
        user = new User
        {
            FirstName = randomUser.Name.First,
            LastName = randomUser.Name.Last,
            Email = email,
            UserName = email,
            PhoneNumber = randomUser.Cell,
            Address = $"{randomUser.Location.Street.Number}, {randomUser.Location.Street.Name}",
            Document = document,
            UserType = userType,
            City = await _context.Cities.FindAsync(cityId),
            ImageId = imageId,
            Latitude = double.Parse(randomUser.Location.Coordinates.Latitude),
            Logitude = double.Parse(randomUser.Location.Coordinates.Longitude)
        };


        await _userHelper.AddUserAsync(user, "123456");
        await _userHelper.AddUserToRoleAsync(user, userType.ToString());
        string token = await _userHelper.GenerateEmailConfirmationTokenAsync(user);
        await _userHelper.ConfirmEmailAsync(user, token);
    }


    return user;
}


private async Task CheckProductsAsync()
{
    if (!_context.Products.Any())
    {
        User user = await _userHelper.GetUserAsync("buyer1@yopmail.com");
        Category mascotas = await _context.Categories.FirstOrDefaultAsync(c => c.Name == "Mascotas");
...


12. Agregar la nueva migración a la base de datos, borrar la base de datos, correr la actualización de la base datos y probamos lo que llevamos.


13. Modificar el Index de Account:


<th>
    @Html.DisplayNameFor(model => model.Address)
</th>
<th>
    @Html.DisplayNameFor(model => model.Latitude)
</th>
<th>
    @Html.DisplayNameFor(model => model.Logitude)
</th>
<th>
    @Html.DisplayNameFor(model => model.PhoneNumber)
</th>
…
<td>
    @Html.DisplayFor(modelItem => item.Address)
</td>
<td>
    @Html.DisplayFor(modelItem => item.Latitude)
</td>
<td>
    @Html.DisplayFor(modelItem => item.Logitude)
</td>
<td>
    @Html.DisplayFor(modelItem => item.PhoneNumber)
</td>


14. Modificar la vista parcial _User:


<div class="form-group">
    <label asp-for="Latitude" class="control-label"></label>
    <input asp-for="Latitude" class="form-control" />
    <span asp-validation-for="Latitude" class="text-danger"></span>
</div>


<div class="form-group">
    <label asp-for="Logitude" class="control-label"></label>
    <input asp-for="Logitude" class="form-control" />
    <span asp-validation-for="Logitude" class="text-danger"></span>
</div>


15. Modificar el método AddUserAsync de UserHelper:


User user = new User
{
    Address = model.Address,
    Document = model.Document,
    Email = model.Username,
    FirstName = model.FirstName,
    LastName = model.LastName,
    ImageId = imageId,
    PhoneNumber = model.PhoneNumber,
    City = await _context.Cities.FindAsync(model.CityId),
    UserName = model.Username,
    UserType = userType,
    Latitude = model.Latitude,
    Logitude = model.Logitude
};


16. Modificar el método ChangeUser GET de AccountController MVC:


EditUserViewModel model = new EditUserViewModel
{
    Address = user.Address,
    FirstName = user.FirstName,
    LastName = user.LastName,
    PhoneNumber = user.PhoneNumber,
    ImageId = user.ImageId,
    Cities = _combosHelper.GetComboCities(department.Id),
    CityId = user.City.Id,
    Countries = _combosHelper.GetComboCountries(),
    CountryId = country.Id,
    DepartmentId = department.Id,
    Departments = _combosHelper.GetComboDepartments(country.Id),
    Id = user.Id,
    Document = user.Document,
    Latitude = user.Latitude,
    Logitude = user.Logitude
};


17. Modificar el método ChangeUser POST de AccountController MVC:


user.City = await _context.Cities.FindAsync(model.CityId);
user.Latitude = model.Latitude;
user.Logitude = model.Logitude;
user.Document = model.Document;


18. Modificar el método PostUser de AccountController API:


user = new User
{
    Address = request.Address,
    Document = request.Document,
    Email = request.Email,
    FirstName = request.FirstName,
    LastName = request.LastName,
    PhoneNumber = request.Phone,
    UserName = request.Email,
    ImageId = imageId,
    UserType = UserType.User,
    City = city,
    Latitude = request.Latitude,
    Logitude = request.Logitude
};


19. Modificar el método PutUser de AccountController API:


user.ImageId = imageId;
user.Logitude = request.Logitude;
user.Latitude = request.Latitude;


20. Probamos localmente.


21. Borramos la BD en Azure y volvemos a publicar.
Mapas
1. Adicionar este literal:


Ingles


   <data name="Buyers" xml:space="preserve">
    <value>Buyers</value>
  </data>


Español


   <data name="Buyers" xml:space="preserve">
    <value>Compradores</value>
  </data>


Portuguez


   <data name="Buyers" xml:space="preserve">
    <value>Compradores</value>
  </data>


2. Modificar Languages:


public static string Buyers => Resource.Buyers;


3. Adicionar el nuget Xamarin.Forms.Maps a todos los proyectos Prism.


4. Inicializar la librería para Android:


global::Xamarin.Forms.Forms.Init(this, savedInstanceState);
Xamarin.FormsMaps.Init(this, savedInstanceState);
FFImageLoading.Forms.Platform.CachedImageRenderer.Init(true);


5. Inicializar la librería para iOS:


global::Xamarin.Forms.Forms.Init();
Xamarin.FormsMaps.Init();
new SfNumericTextBoxRenderer();


6. Obtener su key para Maps en Google Service: https://developers.google.com/maps/?hl=es-419 
 
7. Modificar el AndroidManifest.xml (reemplace por su key de mapas):


       <meta-data
            android:name="com.google.android.maps.v2.API_KEY"
            android:value="AIzaSyAtxvXVhbzV9OTwZh8UxVsW2A58WYf-Btc" />
        </application>


8. Crear la MapPage, inicialmente con este diseño:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             x:Class="OnSale.Prism.Views.MapPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
</ContentPage>


9. Adicionar el ícono ic_location_on.


10. Modifcar la OnSaleMasterDetailPageViewModel:


new Menu
{
    Icon = "ic_person",
    PageName = $"{nameof(ModifyUserPage)}",
    Title = Languages.ModifyUser,
    IsLoginRequired = true
},
new Menu
{
    Icon = "ic_location_on",
    PageName = $"{nameof(MapPage)}",
    Title = Languages.Buyers
},
new Menu
{
    Icon = "ic_exit_to_app",
    PageName = $"{nameof(LoginPage)}",
    Title = Settings.IsLogin ? Languages.Logout : Languages.Login
}


11. Probamos la navegación.


12. Modificamos la MapPage:


<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:prism="http://prismlibrary.com"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:ios="clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core"
             ios:Page.UseSafeArea="true"
             xmlns:maps="clr-namespace:Xamarin.Forms.Maps;assembly=Xamarin.Forms.Maps"    
             x:Class="OnSale.Prism.Views.MapPage"
             BackgroundColor="{StaticResource ColorBackground}"
             Title="{Binding Title}">
  
    <StackLayout>
        <maps:Map x:Name="MyMap"
                  MapType="Street"/>
    </StackLayout>


</ContentPage>


13. Probamos la visualización del mapa.


14. Ahora vamos a mover el mapa a nuestra ubicación actual.


15. Adicionar el NuGet Xam.Plugin.Geolocator a todos los proyectos Prism y al proyecto Common.


16. Adicionar el NuGet Plugin.Permissions a todos los proyectos Prism.


17. Modificar el AndroidManifest.xml:


<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_LOCATION_EXTRA_COMMANDS" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />


18. Adicionar al info.plist:


<key>NSLocationAlwaysUsageDescription</key>
<string>Can we use your location at all times?</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Can we use your location when your app is being used?</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>Can we use your location at all times?</string>


19. Adicionar la interfaz IGeolocatorService:


public interface IGeolocatorService
{
    double Latitude { get; set; }


    double Longitude { get; set; }


    Task GetLocationAsync();
}


20. Adicionar la implemetación GeolocatorService:


public class GeolocatorService : IGeolocatorService
{
    public double Latitude { get; set; }


    public double Longitude { get; set; }


    public async Task GetLocationAsync()
    {
        try
        {
            var locator = CrossGeolocator.Current;
            locator.DesiredAccuracy = 50;
            var location = await locator.GetPositionAsync();
            Latitude = location.Latitude;
            Longitude = location.Longitude;


        }
        catch (Exception ex)
        {
            ex.ToString();
        }
    }
}


21. Configuramos la inyección del nuevo servicio:
containerRegistry.Register<IApiService, ApiService>();
containerRegistry.Register<IGeolocatorService, GeolocatorService>();
containerRegistry.Register<IRegexHelper, RegexHelper>();


22. Modificar la MapPage.xaml.cs:


public partial class MapPage : ContentPage
{
    private readonly IGeolocatorService _geolocatorService;


    public MapPage(IGeolocatorService geolocatorService)
    {
        InitializeComponent();
        _geolocatorService = geolocatorService;
    }


    protected override void OnAppearing()
    {
        base.OnAppearing();
        MoveMapToCurrentPositionAsync();
    }


    private async void MoveMapToCurrentPositionAsync()
    {
        bool isLocationPermision = await CheckLocationPermisionsAsync();


        if (isLocationPermision)
        {
            MyMap.IsShowingUser = true;


            await _geolocatorService.GetLocationAsync();
            if (_geolocatorService.Latitude != 0 && _geolocatorService.Longitude != 0)
            {
                Position position = new Position(
                    _geolocatorService.Latitude,
                    _geolocatorService.Longitude);
                MyMap.MoveToRegion(MapSpan.FromCenterAndRadius(
                    position,
                    Distance.FromKilometers(.5)));
            }
        }
    }


    private async Task<bool> CheckLocationPermisionsAsync()
    {
        PermissionStatus permissionLocation = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.Location);
        PermissionStatus permissionLocationAlways = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationAlways);
        PermissionStatus permissionLocationWhenInUse = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationWhenInUse);
        bool isLocationEnabled = permissionLocation == PermissionStatus.Granted ||
                                    permissionLocationAlways == PermissionStatus.Granted ||
                                    permissionLocationWhenInUse == PermissionStatus.Granted;
        if (isLocationEnabled)
        {
            return true;
        }


        await CrossPermissions.Current.RequestPermissionsAsync(Permission.Location);


        permissionLocation = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.Location);
        permissionLocationAlways = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationAlways);
        permissionLocationWhenInUse = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationWhenInUse);
        return permissionLocation == PermissionStatus.Granted ||
                permissionLocationAlways == PermissionStatus.Granted ||
                permissionLocationWhenInUse == PermissionStatus.Granted;
    }
}


23. Probamos.


24. Ahora vamos a pintar los puntos de los compradores en el mapa.


25. Adicionar este método al AccountController API:


[HttpGet]
public async Task<IActionResult> GetUsers()
{
    List<User> users = await _context.Users
        .Include(u => u.City)
        .ToListAsync();
    return Ok(users);
}


26. Publicamos de nuevo en Azure.


27. Modificar la MapPage.xaml.cs:


protected override void OnAppearing()
{
    base.OnAppearing();
    MoveMapToCurrentPositionAsync();
    LoadUsersAsync();
}


private async void LoadUsersAsync()
{
    if (Connectivity.NetworkAccess != NetworkAccess.Internet)
    {
        return;
    }


    string url = App.Current.Resources["UrlAPI"].ToString();
    Response response = await _apiService.GetListAsync<UserResponse>(url, "api", "/Account");


    if (!response.IsSuccess)
    {
        return;
    }


    List<UserResponse> users = (List<UserResponse>)response.Result;
    foreach (UserResponse user in users)
    {
        MyMap.Pins.Add(new Pin
        {
            Address = user.Address,
            Label = user.FullName,
            Position = new Position(user.Latitude, user.Logitude),
            Type = PinType.Place
        });
    }
}
…
private async Task<bool> CheckLocationPermisionsAsync()
{
    Plugin.Permissions.Abstractions.PermissionStatus permissionLocation = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.Location);
    Plugin.Permissions.Abstractions.PermissionStatus permissionLocationAlways = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationAlways);
    Plugin.Permissions.Abstractions.PermissionStatus permissionLocationWhenInUse = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationWhenInUse);
    bool isLocationEnabled = permissionLocation == Plugin.Permissions.Abstractions.PermissionStatus.Granted ||
                                permissionLocationAlways == Plugin.Permissions.Abstractions.PermissionStatus.Granted ||
                                permissionLocationWhenInUse == Plugin.Permissions.Abstractions.PermissionStatus.Granted;
    if (isLocationEnabled)
    {
        return true;
    }


    await CrossPermissions.Current.RequestPermissionsAsync(Permission.Location);


    permissionLocation = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.Location);
    permissionLocationAlways = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationAlways);
    permissionLocationWhenInUse = await CrossPermissions.Current.CheckPermissionStatusAsync(Permission.LocationWhenInUse);
    return permissionLocation == Plugin.Permissions.Abstractions.PermissionStatus.Granted ||
            permissionLocationAlways == Plugin.Permissions.Abstractions.PermissionStatus.Granted ||
            permissionLocationWhenInUse == Plugin.Permissions.Abstractions.PermissionStatus.Granted;
}


28. Probamos.


29. Ahora vamos a obtener la latitud y longitud para usuarios nuevos registrados por la App.


30. Modificar la RegisterPageViewModel:


private readonly IGeolocatorService _geolocatorService;
…
public RegisterPageViewModel(
    INavigationService navigationService,
    IRegexHelper regexHelper,
    IApiService apiService,
    IFilesHelper filesHelper,
    IGeolocatorService geolocatorService)
    : base(navigationService)
{
    _navigationService = navigationService;
    _regexHelper = regexHelper;
    _apiService = apiService;
    _filesHelper = filesHelper;
    _geolocatorService = geolocatorService;
    Title = Languages.Register;
    Image = App.Current.Resources["UrlNoImage"].ToString();
    IsEnabled = true;
    User = new UserRequest();
    LoadCountriesAsync();
}
…
byte[] imageArray = null;
if (_file != null)
{
    imageArray = _filesHelper.ReadFully(_file.GetStream());
}


await _geolocatorService.GetLocationAsync();
if (_geolocatorService.Latitude != 0 && _geolocatorService.Longitude != 0)
{
    User.Latitude = _geolocatorService.Latitude;
    User.Logitude = _geolocatorService.Longitude;
}


User.ImageArray = imageArray;
User.CityId = City.Id;


31. Probamos.
Notificaciones Push
Setup Android Services
1. Add a new project in https://console.firebase.google.com/:
  
 
  



  
   


  
   
Download the gogle-services.json you will need soon.
  

  

Keep the values for server key and sender ID, you will need soon.


2. Add a new Azure Notification Hub:
  



  



  



  

Android Implementation
1. Add the following nuggets: Xamarin.GooglePlayServices.Base, Xamarin.Firebase.Messaging and Xamarin.Azure.NotificationHubs.Android on Android project.


2. Add the AppConstants, replace for your own values:
namespace Soccer.Common.Constants
{
    public static class AppConstants
    {
        /// <summary>
        /// Notification channels are used on Android devices starting with "Oreo"
        /// </summary>
        public static string NotificationChannelName { get; set; } = "XamarinNotifyChannel";


        /// <summary>
        /// This is the name of your Azure Notification Hub, found in your Azure portal.
        /// </summary>
        public static string NotificationHubName { get; set; } = "Soccer";


        /// <summary>
        /// This is the "DefaultListenSharedAccessSignature" connection string, which is
        /// found in your Azure Notification Hub portal under "Access Policies".
        /// 
        /// You should always use the ListenShared connection string. Do not use the
        /// FullShared connection string in a client application.
        /// </summary>
        public static string ListenConnectionString { get; set; } = "Endpoint=sb://zuluhub.servicebus.windows.net/;SharedAccessKeyName=DefaultFullSharedAccessSignature;SharedAccessKey=Y1kfDexEW0GCNAJi2El8BAAH7u+BKfE0y8eYAefD3x8=";


        /// <summary>
        /// Tag used in log messages to easily filter the device log
        /// during development.
        /// </summary>
        public static string DebugTag { get; set; } = "XamarinNotify";


        /// <summary>
        /// The tags the device will subscribe to. These could be subjects like
        /// news, sports, and weather. Or they can be tags that identify a user
        /// across devices.
        /// </summary>
        public static string[] SubscriptionTags { get; set; } = { "default" };


        /// <summary>
        /// This is the template json that Android devices will use. Templates
        /// are defined by the device and can include multiple parameters.
        /// </summary>
        public static string FCMTemplateBody { get; set; } = "{\"data\":{\"message\":\"$(messageParam)\"}}";


        /// <summary>
        /// This is the template json that Apple devices will use. Templates
        /// are defined by the device and can include multiple parameters.
        /// </summary>
        public static string APNTemplateBody { get; set; } = "{\"aps\":{\"alert\":\"$(messageParam)\"}}";
    }
    }


3. Add the ic_launcher in drawable.


4. Add the downloaded file google-services.json in your android project. Make sure the build action is: GoogleServicesJson.


  



5. Modify the TournamentsPageViewModel:


private static TournamentsPageViewModel _instance;
…
public TournamentsPageViewModel(INavigationService navigationService, IApiService apiService) 
    : base(navigationService)
{
    _instance = this;
    _navigationService = navigationService;
    _apiService = apiService;
    Title = "Soccer";
    LoadTournamentsAsync();
}
…
public static TournamentsPageViewModel GetInstance()
{
    return _instance;
}


public void AddMessage(string message)
{
    Device.BeginInvokeOnMainThread(() =>
    {
        App.Current.MainPage.DisplayAlert(Languages.Ok, message, Languages.Accept);
    });
}


6. Modify the AndroidManifest.xml:


        <data android:scheme="@string/fb_login_protocol_scheme" />
      </intent-filter>
    </activity>
    <receiver android:name="com.google.firebase.iid.FirebaseInstanceIdInternalReceiver" android:exported="false" />
    <receiver android:name="com.google.firebase.iid.FirebaseInstanceIdReceiver" android:exported="true" android:permission="com.google.android.c2dm.permission.SEND">
      <intent-filter>
        <action android:name="com.google.android.c2dm.intent.RECEIVE" />
        <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
        <category android:name="${applicationId}" />
      </intent-filter>
    </receiver>
    <uses-library android:name="org.apache.http.legacy" android:required="false" />
  </application>
</manifest>


7. Add the FirebaseService:


using Android.App;
using Android.Content;
using Android.OS;
using Android.Support.V4.App;
using Android.Util;
using Firebase.Messaging;
using Soccer.Common.Constants;
using Soccer.Prism.ViewModels;
using System;
using System.Linq;
using WindowsAzure.Messaging;


namespace Soccer.Prism.Droid
{
    [Service]
    [IntentFilter(new[] { "com.google.firebase.MESSAGING_EVENT" })]
    public class FirebaseService : FirebaseMessagingService
    {
        public override void OnMessageReceived(RemoteMessage message)
        {
            base.OnMessageReceived(message);
            string messageBody = string.Empty;


            if (message.GetNotification() != null)
            {
                messageBody = message.GetNotification().Body;
            }


            // NOTE: test messages sent via the Azure portal will be received here
            else
            {
                messageBody = message.Data.Values.First();
            }


            // convert the incoming message to a local notification
            SendLocalNotification(messageBody);


            // send the incoming message directly to the MainPage
            SendMessageToMainPage(messageBody);
        }


        public override void OnNewToken(string token)
        {
            // TODO: save token instance locally, or log if desired


            SendRegistrationToServer(token);
        }


        private void SendLocalNotification(string body)
        {
            Intent intent = new Intent(this, typeof(MainActivity));
            intent.AddFlags(ActivityFlags.ClearTop);
            intent.PutExtra("message", body);
            PendingIntent pendingIntent = PendingIntent.GetActivity(this, 0, intent, PendingIntentFlags.OneShot);


            NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, AppConstants.NotificationChannelName)
                .SetContentTitle(AppConstants.NotificationHubName)
                .SetSmallIcon(Resource.Drawable.ic_launcher)
                .SetContentText(body)
                .SetAutoCancel(true)
                .SetShowWhen(false)
                .SetContentIntent(pendingIntent);


            if (Build.VERSION.SdkInt >= BuildVersionCodes.O)
            {
                notificationBuilder.SetChannelId(AppConstants.NotificationChannelName);
            }


            NotificationManager notificationManager = NotificationManager.FromContext(this);
            notificationManager.Notify(0, notificationBuilder.Build());
        }


        private void SendMessageToMainPage(string body)
        {
            TournamentsPageViewModel.GetInstance().AddMessage(body);
        }


        private void SendRegistrationToServer(string token)
        {
            try
            {
                NotificationHub hub = new NotificationHub(AppConstants.NotificationHubName, AppConstants.ListenConnectionString, this);


                // register device with Azure Notification Hub using the token from FCM
                Registration registration = hub.Register(token, AppConstants.SubscriptionTags);


                // subscribe to the SubscriptionTags list with a simple template.
                string pnsHandle = registration.PNSHandle;
                TemplateRegistration templateReg = hub.RegisterTemplate(pnsHandle, "defaultTemplate", AppConstants.FCMTemplateBody, AppConstants.SubscriptionTags);
            }
            catch (Exception e)
            {
                Log.Error(AppConstants.DebugTag, $"Error registering device: {e.Message}");
            }
        }
    }
}


8. Modify the MainActivity:


protected override void OnCreate(Bundle bundle)
{
    TabLayoutResource = Resource.Layout.Tabbar;
    ToolbarResource = Resource.Layout.Toolbar;


    base.OnCreate(bundle);
    FacebookClientManager.Initialize(this);
    CrossCurrentActivity.Current.Init(this, bundle);
    global::Xamarin.Forms.Forms.Init(this, bundle);
    new SfBusyIndicatorRenderer();
    FFImageLoading.Forms.Platform.CachedImageRenderer.Init(true);
    LoadApplication(new App(new AndroidInitializer()));


    if (IsPlayServiceAvailable() == false)
    {
        throw new Exception("This device does not have Google Play Services and cannot receive push notifications.");
    }


    CreateNotificationChannel();
}


private bool IsPlayServiceAvailable()
{
    int resultCode = GoogleApiAvailability.Instance.IsGooglePlayServicesAvailable(this);
    if (resultCode != ConnectionResult.Success)
    {
        if (GoogleApiAvailability.Instance.IsUserResolvableError(resultCode))
        {
            Log.Debug(AppConstants.DebugTag, GoogleApiAvailability.Instance.GetErrorString(resultCode));
        }
        else
        {
            Log.Debug(AppConstants.DebugTag, "This device is not supported");
        }
        return false;
    }
    return true;
}


private void CreateNotificationChannel()
{
    // Notification channels are new as of "Oreo".
    // There is no need to create a notification channel on older versions of Android.
    if (Build.VERSION.SdkInt >= BuildVersionCodes.O)
    {
        string channelName = AppConstants.NotificationChannelName;
        string channelDescription = string.Empty;
        NotificationChannel channel = new NotificationChannel(channelName, channelName, NotificationImportance.Default)
        {
            Description = channelDescription
        };


        NotificationManager notificationManager = (NotificationManager)GetSystemService(NotificationService);
        notificationManager.CreateNotificationChannel(channel);
    }
}


9. Test on Azure:


  



You must get this screen:
  
   


Create a notification dispatcher
1. Add a new console project called: Soccer.NotificationTest.


2. Install the plugin Microsoft.Azure.NotificationHubs in Soccer.NotificationTest project.


3. Modify the Program class:


using Microsoft.Azure.NotificationHubs;
using Soccer.Common.Constants;
using System;
using System.Collections.Generic;


namespace Soccer.NotificationTest
{
    public class Program
    {
        private static NotificationHubClient _hub;


        public static void Main(string[] args)
        {
            _hub = NotificationHubClient.CreateClientFromConnectionString(
                AppConstants.ListenConnectionString,
                AppConstants.NotificationHubName);


            do
            {
                Console.WriteLine("Type a new message:");
                string message = Console.ReadLine();
                SendNotificationAsync(message);
                Console.WriteLine("The message was sent...");
            } while (true);
        }


        private static async void SendNotificationAsync(string message)
        {
            Dictionary<string, string> templateParameters = new Dictionary<string, string>();


            foreach (string tag in AppConstants.SubscriptionTags)
            {
                templateParameters["messageParam"] = message;
                try
                {
                    await _hub.SendTemplateNotificationAsync(templateParameters, tag);
                    Console.WriteLine($"Sent message to {tag} subscribers.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to send template notification: {ex.Message}");
                }
            }
        }
    }
}


4. Run the Soccer.Primsn.Android and Soccer.NotificationTest projects and test it.
  
   
Modify the backend to send notifications
1. Install the plugin Microsoft.Azure.NotificationHubs in Soccer.Web project.


2. Modify the Languages:


public static string Notification => Resource.Notification;


public static string CheckPointsEarned => Resource.CheckPointsEarned; // Check how many points you have earned!


3. Modify the TournamentsController:


[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> CloseMatch(CloseMatchViewModel model)
{
    if (ModelState.IsValid)
    {
        await _matchHelper.CloseMatchAsync(model.MatchId, model.GoalsLocal.Value, model.GoalsVisitor.Value);
        model.Local = await _context.Teams.FindAsync(model.LocalId);
        model.Visitor = await _context.Teams.FindAsync(model.VisitorId);
        await SendNotificationAsync(model);
        return RedirectToAction($"{nameof(DetailsGroup)}/{model.GroupId}");
    }


    model.Group = await _context.Groups.FindAsync(model.GroupId);
    model.Local = await _context.Teams.FindAsync(model.LocalId);
    model.Visitor = await _context.Teams.FindAsync(model.VisitorId);
    return View(model);
}


private async Task SendNotificationAsync(CloseMatchViewModel model)
{
    NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(
        AppConstants.ListenConnectionString,
        AppConstants.NotificationHubName);


    Dictionary<string, string> templateParameters = new Dictionary<string, string>();


    foreach (string tag in AppConstants.SubscriptionTags)
    {
        templateParameters["messageParam"] = $"MATCH: {model.Local.Name} {model.GoalsLocal} - {model.GoalsVisitor} {model.Visitor.Name}";
        try
        {
            await hub.SendTemplateNotificationAsync(templateParameters, tag);
        }
        catch (Exception ex)
        {
            ex.ToString();
        }
    }
}


4. Publish again in Azure.


5. Modify the TournamentsPageViewModel:


public void AddMessage(string message)
{
    Device.BeginInvokeOnMainThread(() =>
    {
        if (message.StartsWith("MATCH: "))
        {
            message = $"{message.Substring(7)}, {Languages.CheckPointsEarned}";
        }


        App.Current.MainPage.DisplayAlert(Languages.Notification, message, Languages.Accept);
    });
}


6. Modify the FirebaseService:


private void SendLocalNotification(string body)
{
    if (body.StartsWith("MATCH: "))
    {
        body = $"{body.Substring(7)}, {Languages.CheckPointsEarned}";
    }


    Intent intent = new Intent(this, typeof(MainActivity));


7. Run the App and close some matches to test it.
Setup iOS Services
1. Click Keychain Access, expand Certificate Assistant, then click Request a Certificate from a Certificate Authority....
  

Select your User Email Address and Common Name , make sure that Saved to disk is selected, and then click Continue.Leave the CA Email Address field blank as it is not required.
  

Type a name for the Certificate Signing Request (CSR) file in Save As, select the location in Where, then click Save.
  

This saves the CSR file in the selected location; the default location is in the Desktop. Remember the location chosen for this file.
 
Next, you will register your app with Apple, enable push notifications, and upload this exported CSR to create a push certificate.
2. If you have not already registered your app, navigate to the iOS Provisioning Portal at the Apple Developer Center, log on with your Apple ID, click Identifiers, then click App IDs, and finally click on the + sign to register a new app.
  

Update the following three fields for your new app and then click Continue:
*  Name: Type a descriptive name for your app in the Name field in the App ID Description section.
*  Bundle Identifier: Under the Explicit App ID section, enter a Bundle Identifier in the form <Organization Identifier>.<Product Name>as mentioned in the App Distribution Guide. The Organization Identifierand Product Name you use must match the organization identifier and product name you will use when you create your XCode project. In the screeshot below NotificationHubs is used as a organization idenitifier and GetStarted is used as the product name. Making sure this matches the values you will use in your XCode project will allow you to use the correct publishing profile with XCode.
* Push Notifications: Check the Push Notifications option in the App Services section.
  

This generates your App ID and requests you to confirm the information. Click Register to confirm the new App ID. Once you click Register, you will see the Registration complete screen, as shown below. Click Done.
  

In the Developer Center, under App IDs, locate the app ID that you just created, and click on its row.
  



Clicking on the app ID will display the app details. Click the Edit button at the bottom.
  

Scroll to the bottom of the screen, and click the Create Certificate... button under the section Development Push SSL Certificate.
  

This displays the "Add iOS Certificate" assistant.
3. Click Choose File, browse to the location where you saved the CSR file that you created in the first task, then click Generate.
  

4. After the certificate is created by the portal, click the Download button, and click Done.
  

This downloads the certificate and saves it to your computer in your Downloads folder.


  

Double-click the downloaded push certificate aps_development.cer.
This installs the new certificate in the Keychain, as shown below:
 
  

5. In Keychain Access, right-click the new push certificate that you created in the Certificates category. Click Export, name the file, select the .p12 format, and then click Save.
  

Make a note of the file name and location of the exported .p12 certificate. It will be used to enable authentication with APNS.


6. Back in the iOS Provisioning Portal, select Provisioning Profiles, select All, and then click the + button to create a new profile. This launches the Add iOS Provisiong Profile Wizard
  

7. Select iOS App Development under Development as the provisiong profile type, and click Continue.
 
8.  Next, select the app ID you just created from the App ID drop-down list, and click Continue
  

9.  In the Select certificates screen, select your usual development certificate used for code signing, and click Continue. This is not the push certificate you just created.
  

10. Next, select the Devices to use for testing, and click Continue
  

11. Finally, pick a name for the profile in Profile Name, click Generate.
  

12. When the new provisioning profile is created click to download it and install it on your Xcode development machine. Then click Done.
  

13.  As we want to configure the APNS connection, in the Azure Portal, open your Notification Hub settings, ande click on Notification Services, and then click the Apple (APNS) item in the list. Once done, click on Upload Certificate and select the .p12 certificate that you exported earlier, as well as the password for the certificate.
 
Make sure to select Sandbox mode since you will be sending push messages in a development environment. Only use the Production setting if you want to send push notifications to users who already purchased your app from the store.
  
   
Your notification hub is now configured to work with APNS, and you have the connection strings to register your app and send push notifications.
iOS Implementation
1. Add the nugget: Xamarin.Azure.NotificationHubs.iOS.


2. Modify the Entitlements.plist:
  



3. Modify the AppDelegate:


private SBNotificationHub Hub { get; set; }


public override bool FinishedLaunching(UIApplication app, NSDictionary options)
{
    global::Xamarin.Forms.Forms.Init();
    FFImageLoading.Forms.Platform.CachedImageRenderer.Init();
    new SfBusyIndicatorRenderer();
    LoadApplication(new App(new iOSInitializer()));
    FacebookClientManager.Initialize(app, options);
    base.FinishedLaunching(app, options);


    RegisterForRemoteNotifications();


    return true;
}


private void RegisterForRemoteNotifications()
{
    // register for remote notifications based on system version
    if (UIDevice.CurrentDevice.CheckSystemVersion(10, 0))
    {
        UNUserNotificationCenter.Current.RequestAuthorization(UNAuthorizationOptions.Alert |
            UNAuthorizationOptions.Sound |
            UNAuthorizationOptions.Sound,
            (granted, error) =>
            {
                if (granted)
                {
                    InvokeOnMainThread(UIApplication.SharedApplication.RegisterForRemoteNotifications);
                }
            });
    }
    else if (UIDevice.CurrentDevice.CheckSystemVersion(8, 0))
    {
        UIUserNotificationSettings pushSettings = UIUserNotificationSettings.GetSettingsForTypes(
        UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound,
        new NSSet());


        UIApplication.SharedApplication.RegisterUserNotificationSettings(pushSettings);
        UIApplication.SharedApplication.RegisterForRemoteNotifications();
    }
    else
    {
        UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;
        UIApplication.SharedApplication.RegisterForRemoteNotificationTypes(notificationTypes);
    }
}


public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)
{
    Hub = new SBNotificationHub(AppConstants.ListenConnectionString, AppConstants.NotificationHubName);


    // update registration with Azure Notification Hub
    Hub.UnregisterAll(deviceToken, (error) =>
    {
        if (error != null)
        {
            Debug.WriteLine($"Unable to call unregister {error}");
            return;
        }


        NSSet tags = new NSSet(AppConstants.SubscriptionTags.ToArray());
        Hub.RegisterNative(deviceToken, tags, (errorCallback) =>
        {
            if (errorCallback != null)
            {
                Debug.WriteLine($"RegisterNativeAsync error: {errorCallback}");
            }
        });


        string templateExpiration = DateTime.Now.AddDays(120).ToString(System.Globalization.CultureInfo.CreateSpecificCulture("en-US"));
        Hub.RegisterTemplate(deviceToken, "defaultTemplate", AppConstants.APNTemplateBody, templateExpiration, tags, (errorCallback) =>
        {
            if (errorCallback != null)
            {
                if (errorCallback != null)
                {
                    Debug.WriteLine($"RegisterTemplateAsync error: {errorCallback}");
                }
            }
        });
    });
}


public override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)
{
    ProcessNotification(userInfo, false);
}


private void ProcessNotification(NSDictionary options, bool fromFinishedLaunching)
{
    // make sure we have a payload
    if (options != null && options.ContainsKey(new NSString("aps")))
    {
        // get the APS dictionary and extract message payload. Message JSON will be converted
        // into a NSDictionary so more complex payloads may require more processing
        NSDictionary aps = options.ObjectForKey(new NSString("aps")) as NSDictionary;
        string payload = string.Empty;
        NSString payloadKey = new NSString("alert");
        if (aps.ContainsKey(payloadKey))
        {
            payload = aps[payloadKey].ToString();
        }


        if (!string.IsNullOrWhiteSpace(payload))
        {
            TournamentsPageViewModel.GetInstance().AddMessage(payload);
        }


    }
    else
    {
        Debug.WriteLine($"Received request to process notification but there was no payload.");
    }
}


4. Test it.
Fin