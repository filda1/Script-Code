
MONOREPO (ANGULAR + NESTJS)
ANGULAR + NESTJS con Nx
______________________________________________________________________________________________________________________________
https://www.youtube.com/watch?v=DSsSUvb2BPs&ab_channel=GuilhermeSiquinelli
https://github.com/guiseek

https://www.youtube.com/watch?v=O7j-xpfK8lo&ab_channel=GuilhermeSiquinelli

 ****FUNCIONA
 
>> npx create-nx-workspace  my-proyect               (furniture-budget)

None:          Configures a TypeScript/JavaScript project with minimal structure.

Integrated Monorepo:        Nx creates a monorepo that contains multiple projects.

>> cd my-proyect
>> npm i -D @nx/angular @nx/nest


>> nx generate @nx/angular:application angular-app --routing --e2eTestRunner=none --style=sass

  Would you like to use Standalone Components? (y/N) Â· false


>> npx nx serve angular-app   ------> RUN


2-

>> nx generate @nx/nest:application nest-app --frontendProject=angular-app --e2eTestRunner=none --strict 


>> npx nx run-many -t serve --parallel   ------> TODO junto RUN


 http://localhost:4200
 
 
 *** Ulizar ahora para crear Nx
    https://nx.dev/getting-started/intro?utm_source=nx-project

_________________________________________________________________________________________



OTRA FORMA VIEJA... no funciona bien

https://www.youtube.com/watch?v=eO_4iN1u21g
https://github.com/kedevked/angular-nest/

Monorepo with Angular and NestJs using Nx


>> npx create-nx-workspace --present=angular

 -- Workspase name: my-proyect
 -- Apication name: frontend
 
>> cd my-proyect

>> npm install -D @nrwl/nest


>> nx generate  @nrwl/nest:application backend

>> ng add @nguniversal/express-engine


>> code .


>> npm install -s @nestjs/ng-universal



---
CONGIG:

app.module:
 
  import { AngularUniversalModule} from '@nestjs/ng-universal'
  import { join} from 'path'
  import {AppServerModule} from  '../../../frontend/server'

 imports:[
 
  AngularUniversalModule.forRoot({
   boostrapt: AppServerModule,
   viewsPath: join(process.cwd(), 'dist/frontend/browser' )
  })
---

>> nx build frontend

>> nx serve frontend  y    >> nx server backend



---------------
Dentro de backend

1. Crear una carpeta y archivo:
     /backend/src/app/middlewares/frontend.middleware.ts
	 
	 
 COlocar code:
 
 
 *****
 import { Injectable, NestMiddleware } from '@nestjs/common';
import { NextFunction, Request, Response } from 'express';
import * as path from 'path';
import { extname } from 'path';

@Injectable()
export class FrontendMiddleware implements NestMiddleware {

    // tslint:disable-next-line: ban-types
    use(req: Request, res: Response, next: NextFunction): void {
        const { baseUrl } = req;

        if (baseUrl.includes('api')) {
            return next();
        }

        const accept = req.accepts('html', 'json', 'xml');
        if (accept !== 'html') {
            return next();
        }

        const ext = extname(req.originalUrl);
        if (ext !== '') {
            return next();
        }

        // res.sendFile(join(__dirname, '../../browser', 'index.html'));
        res.sendFile(path.resolve('dist/frontend/browser/index.html'));
    }
}
 
 *****
 
 Ahora en frontend:
 
  en app.module:
  
  
  export class AppModule { 
    configure(consumer: MiddlewareConsumer):void{
	 consumer.apply(FrontendMiddleware).forRoutes({
	   path: '/**',
	   method: RequestMethod.All,
	})
  }
  
  
  
  -Crear afuera el archivo: proxy.conf.json
   {
     "/api":{
	     "target": "http//localhost:3333",
		 "secure": fasle
	 }
   }
  
  * http//localhost:3333 --> es el backend
  
  - angular.json:
  
      "proxyConfig": "apps/frontend/proxy.conf.json"