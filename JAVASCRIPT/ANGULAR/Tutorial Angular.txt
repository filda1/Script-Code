ANGULAR
******************************************************************************************************************************************
 CURSO FAZT ====> https://www.youtube.com/watch?v=OrCdt865WOg  (Parte 2)
                  https://www.youtube.com/watch?v=HxlNxDVUSDQ  (Parte 1)
                 * Ver https://blog.faztweb`

  MICHELLI BRITO ==========> https://www.youtube.com/watch?v=R8xqUHzrOug&list=PL8iIphQOyG-DSLV6qWs8wh37o0R_F9Q_Q&index=14
                             https://github.com/MichelliBrito/agendalive-app

  *******TUTORIAL = https://www.tutorialesprogramacionya.com/angularya/index.php?inicio=0
------------------------------------------------------------------------------------------------------------------------------------------

   * C/COMPONENTE esta vivo y tiene un mundo dentro (MicroUniverso).
   * Las CLASSES son la que conectan a los componentes, almacenamiento central

    NOTA: Final del proyecto (convertir a javascript)===================>  >> ng build --prod 
                                        ( Subir al host, el proyecto dentro de ========================================> carpeta dist


    SUBIR A HEROKU ==============> https://www.youtube.com/watch?v=qx208Jx1rUc&t=85s

    SUBIR A GIT PAGES ===========> https://www.youtube.com/watch?v=fQ3buqo2pgc


=============================================================================================================
                                              RESUMEN
=============================================================================================================
 dominicode ===> 28 dias ANgular ====> https://www.youtube.com/watch?v=bCkm9uxF4jY&list=RDCMUC3QuZuJr2_EOUak8bWUd74A&index=1&ab_channel=DominiCode

 COMPONENTE PRIVADO                            
/////////////////////                            
//  Compmemte      //
//  Modulo         //
//  Routing        //
//  Service        //
////////////////////

COMPONENTE PUBLICO
////////////////////
//  Componente      //
//                 //
//                //
//                //
////////////////////


Modulos: son para registrar en exporta/impotar servicios,depedencias... para ser accesibles

1. Registrar siempre en:  APP.MODULE.TS o/y APP.ROUTING,MODULE.TS (Para las rutas) =========> Son las globales
2. Puedes crear COMPONENTES GLOBALES ya registrados en la Global y funciona en todo lado.
 2.1 O puedes crear COMPONETES PRIVADOS (modulos, routes, services..) que tiene que registra en en el modulo/ruta del componente (Solo funcioina en el componente)
 2.1 En Caso, que quieres poner accesible Global EL COMPONENTE, tienes registrar el modulo/routing del componete en APP.MODULE.TS y/o APP.ROUTING,MODULE.TS

3. Los SERVICES son:   ====================================> Lo puedes llamar de Cualquier COMPONENTE
  3.1 Para consumir API
  3.2 Para tener un STORE, que  se guarda en una Observable  (Ejemplo: Carrito)

4. GUARDS son: Son condicones hechas y despues se la pones a las Rutas del componete (APP.ROUTING.MODULE.TS) para proteger
  4.1 Ejemplo : Para Una session; Obtienes el localStore con Token y lo validas. Y luego esa condicion (GUARD) lo pones en la Ruta (Con Can..)


5. DETECTING CHANGE : con OnPush===> Solo el COMPONENTE RENDERIZA los otros no (Esto va dentro del componente.ts)

6. RESOLVE:  Funciona como Servicio llamada API, GUARDA LOS DATOS antes que COMPONENTE RECARGUE

7.INTERCEPTOR: Escucha un cambio en Navegador (id y vuelta) y cambia Un Observable, Endopoint(Cualquer cosa asociada al interceptor). Intercepta una solicituda API, y le mete datos en HEADERS, en la subida
 7.1 Ejemplo: Colarle a la peticion/solicitud/request el TOKEN

8. PIPES : sirven para transformar los datos

9. OBSERVABLES =====> SON, STORES de almacenamiento (https://www.danywalls.com/how-to-share-data-between-components-in-angular#heading-using-service-with-behavior-subject)

10. ng-content =========> Se pone dentro del Hijo Html y recibe desde los Padres Html el contenido desde ahi

11. ng-container ========> Para poner varios If/For en html

11. ng-template =========> else de if en html

12. ViewChild()   ==========> document.getElemenbyId("vvvvv")

13. BehaviorSubject    ===========> https://www.danywalls.com/how-to-share-data-between-components-in-angular

14. SSR =============> ANGULAR UNIVERSAL
                          https://www.youtube.com/watch?v=2eksE5hlbmQ&ab_channel=DominiCode
                          deploy = https://www.youtube.com/watch?v=Zshv21H1M2A&ab_channel=DominiCode

15. INSTALL ESLINT   ===========> https://www.youtube.com/watch?v=bCkm9uxF4jY&ab_channel=DominiCode
                                  https://gist.github.com/bezael/5086db4bf7fd4655969a8da4e5ec1ab8


16 CLASS En html =================> [ngClass] = "[ 'CLASE1', ' CLASE2']"   =============================================> LAS VARIABLES VIENE DIRECTAS de  .css
                                    [ngClass] = "{ CLASE1: variable === 'Barcelona',  CLASE1: variable !== 'LIMA'}"  =========> Con IF


17. STYLE En HTML  ===============> [ngStyle] = "{ 'Color': 'white' , 'Background': city === 'Barcelona'? 'red':'blue' } "

18 EVENT   =======================> <a  (click) = " metodo()"  />

19 INPUT ==========================> PASA VARIABLE DE PADRE A HIJO
                                     <app>
                                      <app-button [color] ="variable" > </app-button>    (EJ para String: "'variable'" )
                                    </app>
                                   

                                   hijo.ts

                                     @Input() variable!:string;

20 OUTPUT  =========================> PASAR VARIABLE DE HIJO A PADRE (Ver en otra parte...)
                                       HiJO.html ===> HIJO.ts ======> Padre.html =====> Padre.ts


                                       * <input id ="item"  #item/>

                                       <button (click) =" metodo(item.value)" > </button>    ===============> Tomo valor el id de input


21 FORM TEMPLATE DRIVER   ====================> En HTML,Es meter en una VARIABLE el Form  y pasar al TS la Varible a traves  de evento (click)
                                  ******* Loiane Grone  ============> https://www.youtube.com/watch?v=SGvZ1O4VLYU&list=PLGxZ4Rq3BOBoSRcKWEdQACbUCNWLczg2G&index=104&ab_channel=LoianeGroner
22 FORM REACTIVE   ===========================> En HTML, defines la VARIBLE del Form. EN TS la declararas VARIABLE form y la carga con un Objeto vacio(Dela s propiedades del Form). LA VARIABLE (Cargada de objeo) al pasar al Html, puedes despues acceder/llamar cada propiedades

                                               *Parmeter propiedades con datos desde TS     (https://www.youtube.com/watch?v=jJuE7-9T6Ss&ab_channel=DominiCode)
                                                  onSetValue() -------------------------------> Mete solo una propiedad llena en formulario
                                                   onPatchValue()  --------------------------------> Mete todas la propiedades

23 RUTAS   =================================> Van en app.route.modules
                                              * En HTML,  <a  routerLinkActive="active" routerLink="/contact" >.... </a> 
                                                           <a   routerLink="/" >.... </a> 

24 RUTAS : 
   queryString ( Pasa datos por URL)    ===============================> En TS.  this.router.navigate(['rutanombre-componente'] ,{ queryParams: {'DOMINICODE'} } )

                                                                         Recibo en: nombre-componete.TS:
                                                                                    ngOnInit():void{
                                                                                        this.route.queryParams.Subscribe( (params:Params) => {     (OJO: router:Route)
                                                                                           this.variable = params['name']
                                                                                        })}
                                                                                           
  * PASAR ID por URL =========>     this.router.navigate(['rutaotro-componente', '580'])

                                    en app.routes.module:
                                     {path:'rutaotro-componente/.id', component:ContactComponent}

                                   *En TS ContactComponent:
                                        id!:string;

                                       ngOnInit():void{
                                           this.route.queryParams.Subscribe( (params:Params) => {     ==============> (OJO: router:ActiveRoute)
                                               this.id = params['id']
                                           })}

RUTAS HIJAS (Muestras En VIEW VARIAS VIEW)  ==================>
                             Componentes dentro de la misma carpeta
                                    carpeta users
                                             user1.TS
                                             user2.TS
                                             user3.TS
                              en app.routes.module:
                                     {path:'user', component:UserComponent, 
                                        children:[
                                           {path:'user2', component:User2Component},
                                           {path:'user3', component:User3Component}
                                         ]
                                       }

                            user.HTML
                                <a   routerLink="/user2" >.... </a> 
                                <a   routerLink="/user3" >.... </a>      
                                <router-outlet></router-outlet>     


25- LAZY LOADING ======================> COmponentes con propios modulos                                      
=============================================================================================================

  
 INSTALACION:
   Utilizar ========>  angular cli  (https://cli.angular.io/), https://github.com/angular/angular-cli/wiki

    npm install -g @angular/cli
    ng new my-dream-app
    cd my-dream-app
    ng serve


   * npm install -g @angular/cli
   * ng new my-dream-app

   * INstall Angular Material ===========>  ng add @angular/material
                                            npm i @angular/flex-layout

   ** INSTALAR teradata   =================>   https://teradata.github.io/covalent/v3/#/components
                                              npm install --save @covalent/core
                                              npm install --save @covalent/http @covalent/highlight @covalent/markdown @covalent/dynamic-forms @covalent/echarts


   * Ejecuta Angular =====================> ng serve --open     (open es para abrir pestana por defecto en navegador)

    
   * IMPORTAR COMPoNENTES DE ANGULAR MATERIAL  =========> en app.module.ts colocar: ej :
       ****** https://www.youtube.com/watch?v=e4rNoUQdfQY&ab_channel=DominiCode
         1 - Ver Web de Angular Material y copiar el componente   ==========> https://material.angular.io/components/categories
         2- En web de Angular Material en Api, ves ejemplo de import =====> lo colocas app.module o material.model
       import {MatButtonModule} from '@angular/material/button';  ========> para boton, si quieres otros, importas otros
                                                                          (ESTO Esta en la API de web: 
      * En imports =================>  colocar nombre de componente (Ej: MatButtonModule )


https://material.angular.io/components/button/api)
      * En imports =================>  colocar nombre de componente (Ej: MatButtonModule ) 
       en view: <button mat-button color="primary" > ccc </button) ________________________> sale en https://material.angular.io/components/button/overview
       
       OTRA MANERA: (https://github.com/FaztWeb/angular-material7)

       A- crea material.module.ts:

            import { NgModule } from '@angular/core';

              import {
                        MatToolbarModule,
                        MatInputModule,
  
                      } from '@angular/material';

           @NgModule({
                            imports: [
                                        MatToolbarModule,
                                        MatInputModule,
      
                                     ],
                            exports: [
                                         MatToolbarModule,
                                         MatInputModule,
        
                                      ]
                    })
                    export class MaterialModule { }

         B- Colocar en app.module.ts : import { MaterialModule } from './material.module';
             y poner en imports : MaterialModule
*******************************************************************************************************************************

    * Crear Componente ==============> ng g c nombre (== ng generate component nombre)

    * Services ======================> n g s carpeta/services
    * Compilar ======================> ng build --prod          (dist, el proyecto dentro es la carpeta compilada y a subir )



    MODULO (Es igual al Components + Route y MOdule)

    >>> ng  g m  carpeta/products -m=app --route products

     * -m=app ===========> injecta/registra automatic en app.module
     * route  ===========> crea el nombtre de ruta y lo registra app.routes



    * Subir Host 13 free(13 aplicaciones free)  ===============> npm install -g now
                                           cd dist/
                                           cd nombreApp/
                                           now
                                           y

***************************************************************************************************************

     Funcionamiento:

      1- Con angular cli ==========> se crear el 1 componente central(carpeta app)
            app.component.html ==============> Vista general
            app.component.ts  ===============> Procesador central 

      2-  Al crear un compente(ng g c nombre) se crea un carpeta nombre
           nombre.componente.html ==============> es compenente que va dentro de =====> app.component.html 
           nombre.component.ts  ================> componente procesador

------------------------------------------------------------------------------------------------------------

  * INput =======> el momento que tu form reconoce la la variable y la envia a  TS del componente
  * Doble enlace   ===========> dos componentes en la misma pagi html, estan enlazados
  * Api


------------------------------------------------------------------------------------------------------------------

 https://material.angular.io/guide/getting-started

-------------------------------------------------------------------------------------------------------------------

 EJEMPLO  DE CONSUMO DE API

  Fatz = https://www.youtube.com/watch?v=n5kTqHmLtN8
         (https://github.com/FaztWeb/angular-material7)


   Funcionamiento:
      
    1- Primero, creamos un servicio (que va traer la api)
    2- Despues, creamos una archivo con la classe (donde va guardado)
    3- En el componente (TS), llamamos al servicio y lo colocamos en una lista, declarada como la classe (hay que importala)
    
    " Metes la api en lista de objetos (el objeto o classe tiene que estar hecha)  Ej   list:Objeto[];




 EJEMPLO DE VOTOS DE LINKS  (metes datos en form y aparece en la misma pagina sin refresh)

  (FATZ) ========> https://www.youtube.com/watch?v=WriMvn-xqug&t=3s
                                  ========> https://github.com/FaztWeb/angular-votes-app/blob/master/src/app/link/link.model.ts


  Funcionamiento:

   1. En app View, creamos un formulario donde le pasamos los nombres de los inputs al click de boton que tiene una funcion
   2. La funcion del click de app view, llama a la funcion en app.componet.ts con sus valores
   3. En la funcion se le pasa los valores a  una lista de objetos
   4. En app.componente.html se pone un bucle com la lista de objetos en un componente hijo para pasar la los valores a view de hijo (con @Input)
   5. Entonces cada vez que bucle se mueva (en app View) le pasa los valores a  view hijo, repetiendo la view hijo una y otra vez

*************************************************************************************

   Api Falsa ====================> >> npm i -g json-server
   Db falsa =====================> Es un archivo estatico (https://www.youtube.com/watch?v=i-oYrcNtc2s&ab_channel=DominiCode)

   NgModel   ====================> Necesitas registrar form (FormsMOdule) en module

  LINKS ======> <a [routerLink] = "['/']"> sfdfdfd </a> 

  change Detection ===========> Cambio Reactivo

   Pipe = Transforma datos en un Tipo de datos  (EJ:  {{ productS | json }} ) ========> Lo convierte en Json

   Interface ===== DECLARA TIPO DE OBJ == Sus Prioedades
   
   SERVICES =======> Es para consumo API (Funciona GLOBAL) / Tambien para Rjs == (Store == Redux)

                    - En app.modeule.ts ======> Tiene que registar el HTtp..


  < *ngFor="let product of products"  >
   