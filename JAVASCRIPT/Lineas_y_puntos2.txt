<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 40px;
            height: 40px;
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
    </style>
</head>
<body>
    <div id="plano"></div>
    <input id="coordenadas" type="text" readonly value="(0, 0)">
    
    <script>
        const plano = document.getElementById('plano');
        const puntos = [];
        let puntoAnterior = null;
        let lineaImaginaria = null;
        let cruz = null;

        plano.addEventListener('mousemove', (e) => {
            if (puntos.length > 0) {
                const puntoAnterior = puntos[puntos.length - 1];
                const puntoAnteriorPlano = {
                    x: puntoAnterior.x - plano.getBoundingClientRect().left,
                    y: puntoAnterior.y - plano.getBoundingClientRect().top
                };

                const deltaX = e.clientX - puntoAnteriorPlano.x;
                const deltaY = e.clientY - puntoAnteriorPlano.y;

                const distancia = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                if (!lineaImaginaria) {
                    lineaImaginaria = document.createElement('div');
                    lineaImaginaria.id = 'linea-imaginaria';
                    lineaImaginaria.style.position = 'absolute';
                    lineaImaginaria.style.height = '2px';
                    lineaImaginaria.style.width = '0';
                    lineaImaginaria.style.transformOrigin = 'left top';
                    lineaImaginaria.style.backgroundImage = 'repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent)';
                    lineaImaginaria.style.backgroundSize = '8px 2px';
                    plano.appendChild(lineaImaginaria);
                }

                lineaImaginaria.style.width = distancia + 'px';
                lineaImaginaria.style.transform = `rotate(${Math.atan2(deltaY, deltaX)}rad)`;
                lineaImaginaria.style.left = puntoAnteriorPlano.x + 'px';
                lineaImaginaria.style.top = puntoAnteriorPlano.y + 'px';

                // Actualizar las coordenadas en la caja de texto
                const coordenadas = document.getElementById('coordenadas');
                coordenadas.value = `(${e.clientX}, ${e.clientY})`;

                // Eliminar la cruz anterior si existe
                if (cruz) {
                    plano.removeChild(cruz);
                }

                // Crear una nueva cruz en la posición del cursor
                cruz = document.createElement('div');
                cruz.className = 'crosshair';
                cruz.style.left = (e.clientX - plano.getBoundingClientRect().left) + 'px';
                cruz.style.top = (e.clientY - plano.getBoundingClientRect().top) + 'px';
                const horizontal = document.createElement('div');
                horizontal.className = 'horizontal';
                cruz.appendChild(horizontal);
                const vertical = document.createElement('div');
                vertical.className = 'vertical';
                cruz.appendChild(vertical);
                plano.appendChild(cruz);
            }
        });

        plano.addEventListener('click', (e) => {
            const punto = document.createElement('div');
            punto.className = 'punto';
            punto.style.left = (e.clientX - plano.getBoundingClientRect().left - 5) + 'px';
            punto.style.top = (e.clientY - plano.getBoundingClientRect().top - 5) + 'px';
            plano.appendChild(punto);

            puntos.push({ x: e.clientX, y: e.clientY });

            if (puntos.length > 1) {
                const linea = document.createElement('div');
                linea.style.position = 'absolute';
                linea.style.backgroundColor = 'blue';
                const puntoAnterior = puntos[puntos.length - 2];
                const puntoActual = puntos[puntos.length - 1];
                linea.style.width = Math.sqrt((puntoActual.x - puntoAnterior.x)**2 + (puntoActual.y - puntoAnterior.y)**2) + 'px';
                linea.style.height = '2px';
                linea.style.transformOrigin = 'top left';
                linea.style.transform = `rotate(${Math.atan2(puntoActual.y - puntoAnterior.y, puntoActual.x - puntoAnterior.x)}rad)`;
                linea.style.left = (puntoAnterior.x - plano.getBoundingClientRect().left) + 'px';
                linea.style.top = (puntoAnterior.y - plano.getBoundingClientRect().top) + 'px';
                plano.appendChild(linea);
            }

            // Eliminar la línea imaginaria después de hacer clic
            if (lineaImaginaria) {
                plano.removeChild(lineaImaginaria);
                lineaImaginaria = null;
            }

            // Eliminar la cruz después de hacer clic
            if (cruz) {
                plano.removeChild(cruz);
                cruz = null;
            }
        });
    </script>
</body>
</html>

~-------------------

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 800px; /* + */
            height: 800px; /* + */
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
      
      
        /* Cambio de cursor */
        body {
            cursor: crosshair;
        }
	
	
	
-----------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 800px; /* + */
            height: 800px; /* + */
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
      
       
        /* Cambio de cursor */
        body {
            cursor: crosshair;
        }
    </style>
</head>
<body>
    <div id="plano"></div>
    <input id="coordenadas" type="text" readonly value="(0, 0)">
    
    <script>
        const plano = document.getElementById('plano');
        const puntos = [];
        let puntoAnterior = null;
        let lineaImaginaria = null;
        let cruz = null;

        plano.addEventListener('mousemove', (e) => {
            if (puntos.length > 0) {
                const puntoAnterior = puntos[puntos.length - 1];
                const puntoAnteriorPlano = {
                    x: puntoAnterior.x - plano.getBoundingClientRect().left,
                    y: puntoAnterior.y - plano.getBoundingClientRect().top
                };

                const deltaX = e.clientX - puntoAnteriorPlano.x;
                const deltaY = e.clientY - puntoAnteriorPlano.y;

                const distancia = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                if (!lineaImaginaria) {
                    lineaImaginaria = document.createElement('div');
                    lineaImaginaria.id = 'linea-imaginaria';
                    lineaImaginaria.style.position = 'absolute';
                    lineaImaginaria.style.height = '2px';
                    lineaImaginaria.style.width = '0';
                    lineaImaginaria.style.transformOrigin = 'left top';
                    lineaImaginaria.style.backgroundImage = 'repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent)';
                    lineaImaginaria.style.backgroundSize = '8px 2px';
                    plano.appendChild(lineaImaginaria);
                }

                lineaImaginaria.style.width = distancia + 'px';
                lineaImaginaria.style.transform = `rotate(${Math.atan2(deltaY, deltaX)}rad)`;
                lineaImaginaria.style.left = puntoAnteriorPlano.x + 'px';
                lineaImaginaria.style.top = puntoAnteriorPlano.y + 'px';

                // Actualizar las coordenadas en la caja de texto
                const coordenadas = document.getElementById('coordenadas');
                coordenadas.value = `(${e.clientX}, ${e.clientY})`;

                // Eliminar la cruz anterior si existe.
                if (cruz) {
                    plano.removeChild(cruz);
                }

                // Crear una nueva cruz en la posición del cursor
                cruz = document.createElement('div');
                cruz.className = 'crosshair';
                cruz.style.left = (e.clientX - plano.getBoundingClientRect().left) + 'px';
                cruz.style.top = (e.clientY - plano.getBoundingClientRect().top) + 'px';
                const horizontal = document.createElement('div');
                horizontal.className = 'horizontal';
                cruz.appendChild(horizontal);
                const vertical = document.createElement('div');
                vertical.className = 'vertical';
                cruz.appendChild(vertical);
                plano.appendChild(cruz);
            }
        });

        plano.addEventListener('click', (e) => {
            const punto = document.createElement('div');
            punto.className = 'punto';
            punto.style.left = (e.clientX - plano.getBoundingClientRect().left - 5) + 'px';
            punto.style.top = (e.clientY - plano.getBoundingClientRect().top - 5) + 'px';
            plano.appendChild(punto);

            puntos.push({ x: e.clientX, y: e.clientY });

            if (puntos.length > 1) {
                const linea = document.createElement('div');
                linea.style.position = 'absolute';
                linea.style.backgroundColor = 'blue';
                const puntoAnterior = puntos[puntos.length - 2];
                const puntoActual = puntos[puntos.length - 1];
                linea.style.width = Math.sqrt((puntoActual.x - puntoAnterior.x)**2 + (puntoActual.y - puntoAnterior.y)**2) + 'px';
                linea.style.height = '2px';
                linea.style.transformOrigin = 'top left';
                linea.style.transform = `rotate(${Math.atan2(puntoActual.y - puntoAnterior.y, puntoActual.x - puntoAnterior.x)}rad)`;
                linea.style.left = (puntoAnterior.x - plano.getBoundingClientRect().left) + 'px';
                linea.style.top = (puntoAnterior.y - plano.getBoundingClientRect().top) + 'px';
                plano.appendChild(linea);
            }

            // Eliminar la línea imaginaria después de hacer clic
            if (lineaImaginaria) {
                plano.removeChild(lineaImaginaria);
                lineaImaginaria = null;
            }

            // Eliminar la cruz después de hacer clic
            if (cruz) {
                plano.removeChild(cruz);
                cruz = null;
            }
        });
    </script>
</body>
</html>

2 Size Properties — width and height —
8 Position Properties— left, top, right, bottom, x, y.
-----
  plano.getBoundingClientRect().right
  
 plano.getBoundingClientRect().bottom
  
  
  -------------------
  ptoCentroElemetoX = ((right - x)/2) + x
  
  ptoCentroElemetoY = ((bottom - y)/2) + y
  
  .................................CALCULO ..................................
  // Pto de Referencia ventana de Windows
  // x = left 
  // y = botoom
  
  //Pto centro del plano
  canvasCenterX = ((right - x)/2) + x
  canvasCenterY = ((bottom - y)/2) + y
  
  //Pto del mouse
  mouseX = e.clientX
  mouseY = e. clientY
  
  //Area restringida = plano, para crear ptos
  IF ( ( mouseX => x  &&  mouseX <= right)  && (mouseY => y  && mouseY <= bottom) )
  
  
  
  .................................CALCULO ..................................
  -------------------
  
  
  POSICION DEL MOUSE X ===> e.clientX
  
  POSICION DEL MOUSE Y ===> e.clientY
  
  https://www.freecodecamp.org/news/how-to-make-a-custom-mouse-cursor-with-css-and-javascript/
  https://icons8.com/icons/set/crosshair-center-cursors
  
  
  
  -------------------
  
  -<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: url('ruta/a/la/imagen/cursor.png') 10 10, crosshair;
            /* Cambia 'ruta/a/la/imagen/cursor.png' por la ruta real de tu imagen */
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(mouseX, mouseY);
                ctx.stroke();

                // Dibujar las rectas que conectan los puntos
                ctx.strokeStyle = 'blue'; // Color de las rectas
                ctx.lineWidth = 2; // Grosor de las rectas
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        });

        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            // Al hacer clic, se agrega un punto
            puntos.push({ x: mouseX, y: mouseY });
        });
    </script>
</body>
</html>

--------------------





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: none;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados

        // Tamaño de la cruz amarilla
        const cruzSize = 20;
        const cruzColor = 'yellow';
        let cursorX = 0;
        let cursorY = 0;

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();

                // Dibujar las rectas que conectan los puntos
                ctx.strokeStyle = 'blue'; // Color de las rectas
                ctx.lineWidth = 2; // Grosor de las rectas
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }

            // Dibujar el cursor del mouse
            ctx.strokeStyle = 'black'; // Color del cursor
            ctx.beginPath();
            ctx.moveTo(cursorX - cruzSize, cursorY);
            ctx.lineTo(cursorX + cruzSize, cursorY);
            ctx.moveTo(cursorX, cursorY - cruzSize);
            ctx.lineTo(cursorX, cursorY + cruzSize);
            ctx.stroke();

            // Dibujar la cruz amarilla alrededor del cursor
            ctx.strokeStyle = cruzColor;
            ctx.beginPath();
            ctx.moveTo(cursorX - cruzSize, cursorY);
            ctx.lineTo(cursorX + cruzSize, cursorY);
            ctx.moveTo(cursorX, cursorY - cruzSize);
            ctx.lineTo(cursorX, cursorY + cruzSize);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            // Al hacer clic, se agrega un punto
            puntos.push({ x: mouseX, y: mouseY });
        });
    </script>
</body>
</html>



------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: none;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados

        // Hacer que la cruz amarilla cubra todo el canvas
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'yellow';
        let cursorX = 0;
        let cursorY = 0;

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();

                // Dibujar las rectas que conectan los puntos
                ctx.strokeStyle = 'blue'; // Color de las rectas
                ctx.lineWidth = 2; // Grosor de las rectas
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }

            // Dibujar la cruz amarilla que cubre todo el canvas
            ctx.strokeStyle = cruzColor;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            // Al hacer clic, se agrega un punto
            puntos.push({ x: mouseX, y: mouseY });
        });
    </script>
</body>
</html>


-----------------  Cruz grande
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: none;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados

        // Hacer que la cruz amarilla cubra todo el canvas
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'yellow';
        let cursorX = 0;
        let cursorY = 0;

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();

                // Dibujar las rectas que conectan los puntos
                ctx.strokeStyle = 'blue'; // Color de las rectas
                ctx.lineWidth = 2; // Grosor de las rectas
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }

            // Dibujar la cruz amarilla que cubre todo el canvas
            ctx.strokeStyle = cruzColor;
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();

            // Dibujar la cruz negra del mouse
            ctx.strokeStyle = 'black'; // Color del cursor
            ctx.beginPath();
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            // Al hacer clic, se agrega un punto
            puntos.push({ x: mouseX, y: mouseY });
        });
    </script>
</body>
</html>


--- esc

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: none;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados

        // Hacer que la cruz amarilla cubra todo el canvas
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'yellow';
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true; // Variable para controlar la visibilidad de la cruz amarilla
        let dibujando = true; // Variable para controlar si se permite dibujar

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            // Dibujar las rectas que conectan los puntos (siempre visibles)
            ctx.strokeStyle = 'blue'; // Color de las rectas
            ctx.lineWidth = 2; // Grosor de las rectas
            ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
            ctx.beginPath();
            ctx.moveTo(puntos[0].x, puntos[0].y);
            puntos.forEach((p) => {
                ctx.lineTo(p.x, p.y);
            });
            ctx.stroke();

            if (mostrarCruzAmarilla) {
                // Dibujar la cruz amarilla que cubre todo el canvas
                ctx.strokeStyle = cruzColor;
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(0, cursorY);
                ctx.lineTo(cruzSizeX, cursorY);
                ctx.moveTo(cursorX, 0);
                ctx.lineTo(cursorX, cruzSizeY);
                ctx.stroke();
            }

            // Dibujar la cruz negra del mouse
            ctx.strokeStyle = 'black'; // Color del cursor
            ctx.beginPath();
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                // Al hacer clic, se agrega un punto
                puntos.push({ x: mouseX, y: mouseY });
            }
        });

        // Agregar evento para detectar la tecla "Esc"
        window.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                dibujando = !dibujando; // Cambiar el estado de dibujado
                mostrarCruzAmarilla = !mostrarCruzAmarilla; // Cambiar la visibilidad de la cruz amarilla
            }
        });
    </script>
</body>
</html>

----- con Botton de  Restablecer

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
        
        /* Establece el cursor personalizado */
        body {
            cursor: none;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <button id="resetButton">Restablecer</button>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados 

        // Hacer que la cruz amarilla cubra todo el canvas
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'yellow';
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true; // Variable para controlar la visibilidad de la cruz amarilla
        let dibujando = true; // Variable para controlar si se permite dibujar

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            limpiarCanvas();

            // Dibujar los puntos
            ctx.fillStyle = 'red'; // Color de los puntos
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
                ctx.fill();
            });

            // Verificar que haya al menos un punto antes de dibujar la línea imaginaria
            if (puntos.length > 0 && dibujando) {
                // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'gray'; // Color de la línea imaginaria
                ctx.lineWidth = 2; // Grosor de la línea imaginaria
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                // Dibujar las rectas que conectan los puntos (siempre visibles)
                ctx.strokeStyle = 'blue'; // Color de las rectas
                ctx.lineWidth = 2; // Grosor de las rectas
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }

            if (mostrarCruzAmarilla) {
                // Dibujar la cruz amarilla que cubre todo el canvas
                ctx.strokeStyle = cruzColor;
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(0, cursorY);
                ctx.lineTo(cruzSizeX, cursorY);
                ctx.moveTo(cursorX, 0);
                ctx.lineTo(cursorX, cruzSizeY);
                ctx.stroke();
            }

            // Dibujar la cruz negra del mouse
            ctx.strokeStyle = 'black'; // Color del cursor
            ctx.beginPath();
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                // Al hacer clic, se agrega un punto
                puntos.push({ x: mouseX, y: mouseY });
            }
        });

        // Agregar evento para detectar la tecla "Esc"
        window.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                dibujando = !dibujando; // Cambiar el estado de dibujado 
                mostrarCruzAmarilla = !mostrarCruzAmarilla; // Cambiar la visibilidad de la cruz amarilla
            }
        });
    </script>
</body>
</html>

FONDO NEGRO

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black; /* Cambia el fondo del canvas a negro */
        }
        
        /* Establece el cursor personalizado en gris */
        body {
            cursor: crosshair; /* Cambia el cursor a una cruz gris */
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = []; // Array para almacenar los puntos clicados 

        // Hacer que la cruz amarilla cubra todo el canvas
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white'; // Cambia el color de la cruz amarilla a blanco
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true; // Variable para controlar la visibilidad de la cruz amarilla
        let dibujando = true; // Variable para controlar si se permite dibujar

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            limpiarCanvas();

            // Dibujar los puntos como "x" de color gris
            ctx.strokeStyle = 'gray'; // Color de los puntos
            ctx.lineWidth = 1; // Cambia el grosor de las líneas de puntos a 1
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5); // Mueve al punto superior izquierdo
                ctx.lineTo(p.x + 5, p.y + 5); // Línea hacia el punto inferior derecho
                ctx.moveTo(p.x - 5, p.y + 5); // Mueve al punto inferior izquierdo
                ctx.lineTo(p.x + 5, p.y - 5); // Línea hacia el punto superior derecho
                ctx.stroke();
            });

            // Verificar que haya al menos un punto antes de dibujar la línea imaginaria
            if (puntos.length > 0 && dibujando) {
                // Dibujar la línea imaginaria desde el centro del último punto hasta la posición del cursor
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)'; // Cambia el color de la línea azul a amarillo suave
                ctx.lineWidth = 1; // Cambia el grosor de la línea imaginaria a 1
                ctx.setLineDash([5, 5]); // Establecer el patrón de línea punteada
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                // Dibujar las rectas que conectan los puntos (siempre visibles)
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)'; // Cambia el color de las rectas a amarillo suave
                ctx.lineWidth = 1; // Cambia el grosor de las rectas a 1
                ctx.setLineDash([]); // Restablecer el patrón de línea (sólida)
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }

            if (mostrarCruzAmarilla) {
                // Dibujar la cruz amarilla que cubre todo el canvas
                ctx.strokeStyle = cruzColor;
                ctx.lineWidth = 1; // Cambia el grosor de la cruz amarilla a 1
                ctx.beginPath();
                ctx.moveTo(0, cursorY);
                ctx.lineTo(cruzSizeX, cursorY);
                ctx.moveTo(cursorX, 0);
                ctx.lineTo(cursorX, cruzSizeY);
                ctx.stroke();
            }

            // Dibujar la cruz negra del mouse
            ctx.strokeStyle = 'black'; // Color del cursor
            ctx.beginPath();
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.stroke();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                // Al hacer clic, se agrega un punto
                puntos.push({ x: mouseX, y: mouseY });
            }
        });

        // Agregar evento para detectar la tecla "Esc"
        window.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                dibujando = !dibujando; // Cambiar el estado de dibujado 
                mostrarCruzAmarilla = !mostrarCruzAmarilla; // Cambiar la visibilidad de la cruz amarilla
            }
        });
    </script>
</body>
</html>


Cajas x y
------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }

        body {
            cursor: crosshair;
        }

        #coordX,
        #coordY {
            font-size: 16px;
            padding: 5px;
        }
    </style>
</head>

<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="agregarPunto">OK</button>
    </div>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white';
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true;
        let dibujando = true;

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarLineaImaginaria();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                puntos.push({ x: mouseX, y: mouseY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        document.getElementById('agregarPunto').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'gray';
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

        function dibujarCruzGrande() {
            ctx.strokeStyle = 'white';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.stroke();
        }

        function dibujarLineaImaginaria() {
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        window.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                dibujando = !dibujando;
                mostrarCruzAmarilla = !mostrarCruzAmarilla;
            }
        });
    </script>
</body>

</html>


------------- Codigo OOk, esc, cajas


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }

        body {
            cursor: crosshair;
        }

        #coordX,
        #coordY {
            font-size: 16px;
            padding: 5px;
        }
    </style>
</head>

<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="agregarPunto">OK</button>
    </div>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
       <div>
        <label for="cursorX" style="color: white;">Cursor X:</label>
        <input type="text" id="cursorX" readonly>
        <label for="cursorY" style="color: white;">Cursor Y:</label>
        <input type="text" id="cursorY" readonly>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white';
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true;
        let dibujando = true;
        
              // Elementos de las coordenadas del cursor
        const cursorXInput = document.getElementById('cursorX');
        const cursorYInput = document.getElementById('cursorY');

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;
            
     
            // Actualizar las coordenadas del cursor en los inputs
            cursorXInput.value = mouseX;
            cursorYInput.value = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarLineaImaginaria();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                puntos.push({ x: mouseX, y: mouseY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        document.getElementById('agregarPunto').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'gray';
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

         function dibujarCruzGrande() {
            ctx.strokeStyle = 'rgb(255,255,255)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        }
        
        function dibujarLineaImaginaria() {
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                restablecer();
            }
        })
    </script>
</body>

</html>

---------------- OK
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }
        
        body {
            cursor: crosshair;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <button id="resetButton">Restablecer</button>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="okButton">OK</button>
    </div>
    <div>
        <label for="cursorX" style="color: white;">Cursor X:</label>
        <input type="text" id="cursorX" readonly>
        <label for="cursorY" style="color: white;">Cursor Y:</label>
        <input type="text" id="cursorY" readonly>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white';
        let cursorX = 0;
        let cursorY = 0;

        // Elementos de las coordenadas del cursor
        const cursorXInput = document.getElementById('cursorX');
        const cursorYInput = document.getElementById('cursorY');

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            // Actualizar las coordenadas del cursor en los inputs
            cursorXInput.value = mouseX;
            cursorYInput.value = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarCursorNegro();
            dibujarLineaImaginaria();
        });

        canvas.addEventListener('click', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            puntos.push({ x: mouseX, y: mouseY });

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarCursorNegro();
            dibujarLineaImaginaria();
        });

        document.getElementById('okButton').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarCursorNegro();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'gray';
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 2;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 2;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

        function dibujarCruzGrande() {
            ctx.strokeStyle = cruzColor;
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        }

        function dibujarCursorNegro() {
            ctx.strokeStyle = 'black';
            ctx.beginPath();
            ctx.moveTo(cursorX - 10, cursorY);
            ctx.lineTo(cursorX + 10, cursorY);
            ctx.moveTo(cursorX, cursorY - 10);
            ctx.lineTo(cursorX, cursorY + 10);
            ctx.stroke();
        }

        function dibujarLineaImaginaria() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 2;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                restablecer();
            }
        });
    </script>
</body>
</html>

--------------
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }

        body {
            cursor: crosshair;
        }

        #coordX,
        #coordY {
            font-size: 16px;
            padding: 5px;
        }
    </style>
</head>

<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="agregarPunto">OK</button>
    </div>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
    <div>
        <label for="cursorX" style="color: white;">Cursor X:</label>
        <input type="text" id="cursorX" readonly>
        <label for="cursorY" style="color: white;">Cursor Y:</label>
        <input type="text" id="cursorY" readonly>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white'; // Cambia aquí el color de la cruz grande a 'white'
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true;
        let dibujando = true;

        // Elementos de las coordenadas del cursor
        const cursorXInput = document.getElementById('cursorX');
        const cursorYInput = document.getElementById('cursorY');

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = e.clientY - canvas.getBoundingClientRect().top;

            cursorX = mouseX;
            cursorY = mouseY;

            // Actualizar las coordenadas del cursor en los inputs
            cursorXInput.value = mouseX;
            cursorYInput.value = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarLineaImaginaria();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = e.clientY - canvas.getBoundingClientRect().top;

                puntos.push({ x: mouseX, y: mouseY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        document.getElementById('agregarPunto').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'white'; // Cambia el color de los puntos a 'white'
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'white'; // Cambia el color de las líneas a 'white'
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                ctx.strokeStyle = 'white'; // Cambia el color de las líneas a 'white'
                ctx.lineWidth = 1;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

        function dibujarCruzGrande() {
            ctx.strokeStyle = cruzColor;
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        }

        function dibujarLineaImaginaria() {
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                restablecer();
            }
        })
    </script>
</body>

</html>

------------------ BIEN

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }

        body {
            cursor: crosshair;
        }

        #coordX,
        #coordY {
            font-size: 16px;
            padding: 5px;
        }
    </style>
</head>

<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="agregarPunto">OK</button>
    </div>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
    <div>
        <label for="cursorX" style="color: white;">Cursor X:</label>
        <input type="text" id="cursorX" readonly>
        <label for="cursorY" style="color: white;">Cursor Y:</label>
        <input type="text" id="cursorY" readonly>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white'; // Cambia aquí el color de la cruz grande a 'white'
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true;
        let dibujando = true;
      
      
        // Invierte el eje Y (escala vertical por -1)
        ctx.scale(1, -1);
      
        // Cambia el origen del contexto para que el punto (0,0) esté en la esquina inferior izquierda 
        ctx.translate(0, -canvas.height);

        // Elementos de las coordenadas del cursor
        const cursorXInput = document.getElementById('cursorX');
        const cursorYInput = document.getElementById('cursorY');

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            //const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            //const mouseY = e.clientY - canvas.getBoundingClientRect().top;
          
            // Invertido en el plano
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = -(event.clientY - canvas.getBoundingClientRect().top - canvas.height);

            cursorX = mouseX;
            cursorY = mouseY;

            // Actualizar las coordenadas del cursor en los inputs
            cursorXInput.value = mouseX;
            cursorYInput.value = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarLineaImaginaria();  
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                //const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                //const mouseY = e.clientY - canvas.getBoundingClientRect().top;
              
                // Invertido en el plano
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = -(event.clientY - canvas.getBoundingClientRect().top - canvas.height);

                puntos.push({ x: mouseX, y: mouseY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        document.getElementById('agregarPunto').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'white'; // Cambia el color de los puntos a 'white'
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1]; 
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                //ctx.strokeStyle = 'white'; // Cambia el color de las líneas a 'white'
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                //ctx.strokeStyle = 'white'; // Cambia el color de las líneas a 'white'
                ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

        function dibujarCruzGrande() {
            //ctx.strokeStyle = cruzColor;
            ctx.strokeStyle = 'rgb(255,255,255)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        }

        function dibujarLineaImaginaria() {
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                restablecer();
            }
        })
    </script>
</body>

</html>

---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Líneas Rectas en Canvas</title>
    <style>
        canvas {
            border: 1px solid #000;
            background-color: black;
        }

        body {
            cursor: crosshair;
        }

        #coordX,
        #coordY {
            font-size: 16px;
            padding: 5px;
        }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400"></canvas>
    <div>
        <label for="coordX" style="color: white;">X:</label>
        <input type="text" id="coordX" placeholder="Coordenada X">
        <label for="coordY" style="color: white;">Y:</label>
        <input type="text" id="coordY" placeholder="Coordenada Y">
        <button id="agregarPunto">OK</button>
    </div>
    <button id="resetButton" style="font-size: 20px; color: gray;">✕</button>
    <div>
        <label for="cursorX" style="color: white;">Cursor X:</label>
        <input type="text" id="cursorX" readonly>
        <label for="cursorY" style="color: white;">Cursor Y:</label>
        <input type="text" id="cursorY" readonly>
    </div>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        let puntos = [];
        const cruzSizeX = canvas.width;
        const cruzSizeY = canvas.height;
        const cruzColor = 'white'; // Cambia aquí el color de la cruz grande a 'white'
        let cursorX = 0;
        let cursorY = 0;
        let mostrarCruzAmarilla = true;
        let dibujando = true;

        // Historial para deshacer
        let historial = [];

        // Invierte el eje Y (escala vertical por -1)
        ctx.scale(1, -1);

        // Cambia el origen del contexto para que el punto (0,0) esté en la esquina inferior izquierda 
        ctx.translate(0, -canvas.height);

        // Elementos de las coordenadas del cursor
        const cursorXInput = document.getElementById('cursorX');
        const cursorYInput = document.getElementById('cursorY');

        function limpiarCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function restablecer() {
            limpiarCanvas();
            puntos = [];
            historial = [];
            mostrarCruzAmarilla = true;
            dibujando = true;
        }

        document.getElementById('resetButton').addEventListener('click', restablecer);

        canvas.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX - canvas.getBoundingClientRect().left;
            const mouseY = -(e.clientY - canvas.getBoundingClientRect().top - canvas.height);

            cursorX = mouseX;
            cursorY = mouseY;

            // Actualizar las coordenadas del cursor en los inputs
            cursorXInput.value = mouseX;
            cursorYInput.value = mouseY;

            limpiarCanvas();
            dibujarPuntos();
            dibujarLineas();
            dibujarCruzGrande();
            dibujarLineaImaginaria();
        });

        canvas.addEventListener('click', (e) => {
            if (dibujando) {
                const mouseX = e.clientX - canvas.getBoundingClientRect().left;
                const mouseY = -(e.clientY - canvas.getBoundingClientRect().top - canvas.height);

                puntos.push({ x: mouseX, y: mouseY });
                historial.push([...puntos]);

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        document.getElementById('agregarPunto').addEventListener('click', () => {
            const coordX = parseFloat(document.getElementById('coordX').value);
            const coordY = parseFloat(document.getElementById('coordY').value);

            if (!isNaN(coordX) && !isNaN(coordY)) {
                puntos.push({ x: coordX, y: coordY });
                historial.push([...puntos]);

                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            } else {
                alert('Por favor, ingrese coordenadas válidas.');
            }
        });

        function dibujarPuntos() {
            ctx.strokeStyle = 'white'; // Cambia el color de los puntos a 'white'
            puntos.forEach((p) => {
                ctx.beginPath();
                ctx.moveTo(p.x - 5, p.y - 5);
                ctx.lineTo(p.x + 5, p.y + 5);
                ctx.moveTo(p.x - 5, p.y + 5);
                ctx.lineTo(p.x + 5, p.y - 5);
                ctx.stroke();
            });
        }

        function dibujarLineas() {
            if (puntos.length > 0) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }

            if (puntos.length > 0) {
                ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([]);
                ctx.beginPath();
                ctx.moveTo(puntos[0].x, puntos[0].y);
                puntos.forEach((p) => {
                    ctx.lineTo(p.x, p.y);
                });
                ctx.stroke();
            }
        }

        function dibujarCruzGrande() {
            ctx.strokeStyle = 'rgb(255,255,255)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(0, cursorY);
            ctx.lineTo(cruzSizeX, cursorY);
            ctx.moveTo(cursorX, 0);
            ctx.lineTo(cursorX, cruzSizeY);
            ctx.stroke();
        }

        function dibujarLineaImaginaria() {
            if (puntos.length > 0 && dibujando) {
                const ultimoPunto = puntos[puntos.length - 1];
                const centroUltimoPunto = { x: ultimoPunto.x, y: ultimoPunto.y };
                ctx.strokeStyle = 'rgba(255, 255, 0, 0.5)';
                ctx.lineWidth = 1;
                ctx.setLineDash([5, 5]);
                ctx.beginPath();
                ctx.moveTo(centroUltimoPunto.x, centroUltimoPunto.y);
                ctx.lineTo(cursorX, cursorY);
                ctx.stroke();
            }
        }

        // Función para deshacer
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'z' && historial.length > 1) {
                e.preventDefault(); // Anula la función predeterminada de Ctrl + Z en el navegador
                historial.pop(); // Elimina el último estado
                puntos = historial[historial.length - 1]; // Restaura el estado anterior
                limpiarCanvas();
                dibujarPuntos();
                dibujarLineas();
                dibujarCruzGrande();
                dibujarLineaImaginaria();
            }
        });

        // Función para reiniciar al presionar ESC 
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                restablecer();
            }
        });
    </script>
</body>
</html>



