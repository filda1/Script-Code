<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 40px;
            height: 40px;
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
    </style>
</head>
<body>
    <div id="plano"></div>
    <input id="coordenadas" type="text" readonly value="(0, 0)">
    
    <script>
        const plano = document.getElementById('plano');
        const puntos = [];
        let puntoAnterior = null;
        let lineaImaginaria = null;
        let cruz = null;

        plano.addEventListener('mousemove', (e) => {
            if (puntos.length > 0) {
                const puntoAnterior = puntos[puntos.length - 1];
                const puntoAnteriorPlano = {
                    x: puntoAnterior.x - plano.getBoundingClientRect().left,
                    y: puntoAnterior.y - plano.getBoundingClientRect().top
                };

                const deltaX = e.clientX - puntoAnteriorPlano.x;
                const deltaY = e.clientY - puntoAnteriorPlano.y;

                const distancia = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                if (!lineaImaginaria) {
                    lineaImaginaria = document.createElement('div');
                    lineaImaginaria.id = 'linea-imaginaria';
                    lineaImaginaria.style.position = 'absolute';
                    lineaImaginaria.style.height = '2px';
                    lineaImaginaria.style.width = '0';
                    lineaImaginaria.style.transformOrigin = 'left top';
                    lineaImaginaria.style.backgroundImage = 'repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent)';
                    lineaImaginaria.style.backgroundSize = '8px 2px';
                    plano.appendChild(lineaImaginaria);
                }

                lineaImaginaria.style.width = distancia + 'px';
                lineaImaginaria.style.transform = `rotate(${Math.atan2(deltaY, deltaX)}rad)`;
                lineaImaginaria.style.left = puntoAnteriorPlano.x + 'px';
                lineaImaginaria.style.top = puntoAnteriorPlano.y + 'px';

                // Actualizar las coordenadas en la caja de texto
                const coordenadas = document.getElementById('coordenadas');
                coordenadas.value = `(${e.clientX}, ${e.clientY})`;

                // Eliminar la cruz anterior si existe
                if (cruz) {
                    plano.removeChild(cruz);
                }

                // Crear una nueva cruz en la posición del cursor
                cruz = document.createElement('div');
                cruz.className = 'crosshair';
                cruz.style.left = (e.clientX - plano.getBoundingClientRect().left) + 'px';
                cruz.style.top = (e.clientY - plano.getBoundingClientRect().top) + 'px';
                const horizontal = document.createElement('div');
                horizontal.className = 'horizontal';
                cruz.appendChild(horizontal);
                const vertical = document.createElement('div');
                vertical.className = 'vertical';
                cruz.appendChild(vertical);
                plano.appendChild(cruz);
            }
        });

        plano.addEventListener('click', (e) => {
            const punto = document.createElement('div');
            punto.className = 'punto';
            punto.style.left = (e.clientX - plano.getBoundingClientRect().left - 5) + 'px';
            punto.style.top = (e.clientY - plano.getBoundingClientRect().top - 5) + 'px';
            plano.appendChild(punto);

            puntos.push({ x: e.clientX, y: e.clientY });

            if (puntos.length > 1) {
                const linea = document.createElement('div');
                linea.style.position = 'absolute';
                linea.style.backgroundColor = 'blue';
                const puntoAnterior = puntos[puntos.length - 2];
                const puntoActual = puntos[puntos.length - 1];
                linea.style.width = Math.sqrt((puntoActual.x - puntoAnterior.x)**2 + (puntoActual.y - puntoAnterior.y)**2) + 'px';
                linea.style.height = '2px';
                linea.style.transformOrigin = 'top left';
                linea.style.transform = `rotate(${Math.atan2(puntoActual.y - puntoAnterior.y, puntoActual.x - puntoAnterior.x)}rad)`;
                linea.style.left = (puntoAnterior.x - plano.getBoundingClientRect().left) + 'px';
                linea.style.top = (puntoAnterior.y - plano.getBoundingClientRect().top) + 'px';
                plano.appendChild(linea);
            }

            // Eliminar la línea imaginaria después de hacer clic
            if (lineaImaginaria) {
                plano.removeChild(lineaImaginaria);
                lineaImaginaria = null;
            }

            // Eliminar la cruz después de hacer clic
            if (cruz) {
                plano.removeChild(cruz);
                cruz = null;
            }
        });
    </script>
</body>
</html>

~-------------------

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 800px; /* + */
            height: 800px; /* + */
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
      
      
        /* Cambio de cursor */
        body {
            cursor: crosshair;
        }
	
	
	
-----------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plano Cartesiano con Líneas</title>
    <style>
        #plano {
            width: 400px;
            height: 400px;
            border: 1px solid black;
            position: relative;
        }

        .punto {
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
            position: absolute;
        }

        #linea-imaginaria {
            position: absolute;
            width: 0;
            height: 2px;
            background-color: gray;
            transform-origin: left top;
            background-image: repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent);
            background-size: 8px 2px;
        }

        #coordenadas {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 100px;
            padding: 5px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .crosshair {
            position: absolute;
            width: 800px; /* + */
            height: 800px; /* + */
            transform: translate(-50%, -50%);
            pointer-events: none;
        }

        .horizontal, .vertical {
            position: absolute;
            background-color: black;
            opacity: 0.5;
        }

        .horizontal {
            width: 100%;
            height: 2px;
            top: 50%;
            left: 0;
        }

        .vertical {
            width: 2px;
            height: 100%;
            top: 0;
            left: 50%;
        }
      
       
        /* Cambio de cursor */
        body {
            cursor: crosshair;
        }
    </style>
</head>
<body>
    <div id="plano"></div>
    <input id="coordenadas" type="text" readonly value="(0, 0)">
    
    <script>
        const plano = document.getElementById('plano');
        const puntos = [];
        let puntoAnterior = null;
        let lineaImaginaria = null;
        let cruz = null;

        plano.addEventListener('mousemove', (e) => {
            if (puntos.length > 0) {
                const puntoAnterior = puntos[puntos.length - 1];
                const puntoAnteriorPlano = {
                    x: puntoAnterior.x - plano.getBoundingClientRect().left,
                    y: puntoAnterior.y - plano.getBoundingClientRect().top
                };

                const deltaX = e.clientX - puntoAnteriorPlano.x;
                const deltaY = e.clientY - puntoAnteriorPlano.y;

                const distancia = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                if (!lineaImaginaria) {
                    lineaImaginaria = document.createElement('div');
                    lineaImaginaria.id = 'linea-imaginaria';
                    lineaImaginaria.style.position = 'absolute';
                    lineaImaginaria.style.height = '2px';
                    lineaImaginaria.style.width = '0';
                    lineaImaginaria.style.transformOrigin = 'left top';
                    lineaImaginaria.style.backgroundImage = 'repeating-linear-gradient(90deg, black, black 4px, transparent 4px, transparent)';
                    lineaImaginaria.style.backgroundSize = '8px 2px';
                    plano.appendChild(lineaImaginaria);
                }

                lineaImaginaria.style.width = distancia + 'px';
                lineaImaginaria.style.transform = `rotate(${Math.atan2(deltaY, deltaX)}rad)`;
                lineaImaginaria.style.left = puntoAnteriorPlano.x + 'px';
                lineaImaginaria.style.top = puntoAnteriorPlano.y + 'px';

                // Actualizar las coordenadas en la caja de texto
                const coordenadas = document.getElementById('coordenadas');
                coordenadas.value = `(${e.clientX}, ${e.clientY})`;

                // Eliminar la cruz anterior si existe.
                if (cruz) {
                    plano.removeChild(cruz);
                }

                // Crear una nueva cruz en la posición del cursor
                cruz = document.createElement('div');
                cruz.className = 'crosshair';
                cruz.style.left = (e.clientX - plano.getBoundingClientRect().left) + 'px';
                cruz.style.top = (e.clientY - plano.getBoundingClientRect().top) + 'px';
                const horizontal = document.createElement('div');
                horizontal.className = 'horizontal';
                cruz.appendChild(horizontal);
                const vertical = document.createElement('div');
                vertical.className = 'vertical';
                cruz.appendChild(vertical);
                plano.appendChild(cruz);
            }
        });

        plano.addEventListener('click', (e) => {
            const punto = document.createElement('div');
            punto.className = 'punto';
            punto.style.left = (e.clientX - plano.getBoundingClientRect().left - 5) + 'px';
            punto.style.top = (e.clientY - plano.getBoundingClientRect().top - 5) + 'px';
            plano.appendChild(punto);

            puntos.push({ x: e.clientX, y: e.clientY });

            if (puntos.length > 1) {
                const linea = document.createElement('div');
                linea.style.position = 'absolute';
                linea.style.backgroundColor = 'blue';
                const puntoAnterior = puntos[puntos.length - 2];
                const puntoActual = puntos[puntos.length - 1];
                linea.style.width = Math.sqrt((puntoActual.x - puntoAnterior.x)**2 + (puntoActual.y - puntoAnterior.y)**2) + 'px';
                linea.style.height = '2px';
                linea.style.transformOrigin = 'top left';
                linea.style.transform = `rotate(${Math.atan2(puntoActual.y - puntoAnterior.y, puntoActual.x - puntoAnterior.x)}rad)`;
                linea.style.left = (puntoAnterior.x - plano.getBoundingClientRect().left) + 'px';
                linea.style.top = (puntoAnterior.y - plano.getBoundingClientRect().top) + 'px';
                plano.appendChild(linea);
            }

            // Eliminar la línea imaginaria después de hacer clic
            if (lineaImaginaria) {
                plano.removeChild(lineaImaginaria);
                lineaImaginaria = null;
            }

            // Eliminar la cruz después de hacer clic
            if (cruz) {
                plano.removeChild(cruz);
                cruz = null;
            }
        });
    </script>
</body>
</html>