PHP EN BLADE TEMPLATE

------------------------------------------------------------------------------------------------------------------
 IMAGENES DE PUBLIC/STORAGE  
    
    Funciona bien, exito  ==     <img class="d-block w-100" src= "{{url('/storage/'. $posts[1]->body )}}" >

    Controlador = 
        if ($request->hasFile('image')) {
            $imageName = $request->image->store('public');

            //$path = $request->image->getClientOriginalName();
            
        

        }else{
            return 'No';
        }

        
        $name_imag_md5 = $request->image->hashName(); /// OBTIENE NOMBRE ENCRIPTADO
        

        $post = new post;
        $post->image = $imageName ;
        $post->title =  $request->title;
        $post->subtitle = $request->subtitle;
        $post->slug = $request->slug;
        $post->body = $name_imag_md5 ;
        $post->status = $request->status;
        $post->save();

 OTRA FORMA

    <img class="d-block w-100" src="" style="background-image: url(@yield('bg-img2'));  background-repeat:no-repeat;background-size:100%;" alt="Third slide" height="320">

---------------------------------------------------------------------------------------------------------------------
 BUSCADOR     por http://jquery-manual.blogspot.com/2015/12/18-tutorial-de-laravel-5-search-form.html

    1. Poner, confi/app  -> en  'aliases' => [
               'Input' => Illuminate\Support\Facades\Input::class,

    2. poner si es necesario  en el controlador:
       use Illuminate\Support\Facades\Input;


   3. 
Route::get('home/searchredirect', function(){
     
    /* Nuevo: si el argumento search está vacío regresar a la página anterior */
    if (empty(Input::get('search'))) return redirect()->back();
    
    $search = urlencode(e(Input::get('search')));
    $route = "home/search/$search";
    return redirect($route);
});

Route::get("home/search/{search}", "OtroController@search");

   4.   public function search($search){

        $search = urldecode($search);

        $ticket = post::where('id',$search)->first();
        

        return view('user.welcome', compact('ticket'));

    }


  5.
<form class="navbar-form navbar-left" role="search" action="{{url('home/searchredirect')}}">
 <div class="form-group">
  <input type="text" class="form-control" name='search' placeholder="Buscar ..." />
 </div>
 <button type="submit" class="btn btn-default">Buscar</button>
</form>


 <p> {{ $ticket->id }}</p>


 ejemplo de Cart

        <div class="card" style="width: 18rem; heith: 45rem;">
  <div class="card-body">
    <h5 class="card-title">Card title</h5>
    <h6 class="card-subtitle mb-2 text-muted">Card subtitle</h6>
    <p class="card-text">
    </p>
    <a href="#" class="card-link">Card link</a>
    <a href="#" class="card-link">Another link</a>
  </div>
</div>
   

--------------------------------------------------------------------------------------------------------------------
   @if($user->status =='waiting')         
      <td><a href="#" class="viewPopLink btn btn-default1" role="button" data-id="{{ $user->travel_id }}" data-toggle="modal" data-target="#myModal">Approve/Reject<a></td>         
   @else
      <td>{{ $user->status }}</td>        
   @endif


  
      @if( !empty ( $$post ) ) {

        <div><{{ $post[0]->title }}</div>         
           @else
      <div> </div> 

       
           @if( !empty( $post )) 

                <div><p><{{ $post[0]->title }}</p></div>         
          @else
                <div> </div> 

           @endif
*********************0*********************
    Route::get('greeting', function () {
     return view('welcome', ['name' => 'Samantha']);

      });


      Y         ou may display the contents of the name variable like so:

        Hello, {{ $name }}.

*****************************************************************************

public function store(Request $request)
{
    // Define o valor default para a variável que contém o nome da imagem 
    $nameFile = null;
 
    // Verifica se informou o arquivo e se é válido
    if ($request->hasFile('image') && $request->file('image')->isValid()) {
         
        // Define um aleatório para o arquivo baseado no timestamps atual
        $name = uniqid(date('HisYmd'));
 
        // Recupera a extensão do arquivo
        $extension = $request->image->extension();
 
        // Define finalmente o nome
        $nameFile = "{$name}.{$extension}";
 
        // Faz o upload:
        $upload = $request->image->storeAs('categories', $nameFile);
        // Se tiver funcionado o arquivo foi armazenado em storage/app/public/categories/nomedinamicoarquivo.extensao
 
        // Verifica se NÃO deu certo o upload (Redireciona de volta)
        if ( !$upload )
            return redirect()
                        ->back()
                        ->with('error', 'Falha ao fazer upload')
                        ->withInput();
 
    }
}
 
 
 

Como exibir?
Como criamos um link simbólico de public/storage que aponta para storage/app/public é possível exibir facilmente na view o arquivo de imagem, veja um exemplo de uma listagem dinâmica de categorias:

1
2
3
4
5
@foreach( $categories as $category )
    {{ $category->name }}
 
    <img src="{{ url("categories/{$category->image}") }}" alt="{{ $category->name }}">
@endforeach


********************************************************************
 CREAR ENLACE CON STORAGE para IMAGENES

 php artisan storage:link

***************************************************
 <img class="img-fluid" src= "{{ asset('storage/'.$post[0]->image) }}"  alt="">

 src="{{ asset($post[0]->image) }}"

<img  src="{{ asset('storage/app/' .'PlSZ83qN1HH4Sz1YKAZj2owRjNgw1BaMGbFKY5we.jpg' ) }} "  alt="">

 src="{{ asset('public/storage/AnmK9oAt0qewAfGRSDFP8dI6BmiogYKmcnjWKyTe.png' ) }} "


  FUNCIONA BIEN 
      <img src={{url('/storage/AnmK9oAt0qewAfGRSDFP8dI6BmiogYKmcnjWKyTe.png')}} width="" height="" alt=""/>