https://github.com/jsuarezruiz/netmaui-chat-app-challenge/tree/main/src/NET%20MAUI/ChatApp/Views

=================================================================================================================================================================
STYLES
=================================================================================================================================================================
 <ContentPage.Resources>
        <ResourceDictionary>

            <Style x:Key="TitleTextStyle" TargetType="Label">
                <Setter Property="FontSize" Value="26" />
                <Setter Property="TextColor" Value="White" />
                <Setter Property="FontFamily" Value="Metropolis Medium" />
                <Setter Property="FontAttributes" Value="Bold" />
                <Setter Property="WidthRequest" Value="160" />
                <Setter Property="Margin" Value="36, 48, 0, 0" />
            </Style>

            <Style x:Key="SuggestedContainerStyle" TargetType="Grid">
                <Setter Property="Margin" Value="36, 24, 0, 24" />
            </Style>
            
            <Style x:Key="SearchContainerStyle" TargetType="Grid">
                <Setter Property="HeightRequest" Value="52" />
                <Setter Property="WidthRequest" Value="52" />
                <Setter Property="Margin" Value="0, 0, 12, 0" />
            </Style>
            
            <Color x:Key="SearchBackgroundColor">#868ACB</Color>
            
            <Style x:Key="RecentChatCollectionStyle" TargetType="CollectionView">
                <Setter Property="Margin" Value="12, 24, 12, 0" />
            </Style>

            <Style x:Key="RecentChatAdornerStyle" TargetType="BoxView">
                <Setter Property="Color" Value="White" />
                <Setter Property="CornerRadius" Value="18, 18, 0, 0" />
            </Style>

        </ResourceDictionary>
    </ContentPage.Resources>

-----------
  <Label 
                    Text="Chat with your friends"
                    Style="{StaticResource TitleTextStyle}" />


=================================================================================================================================================================
 TEMPLATES ( VIEN DRENTRO DE OTRA VIEW )
=================================================================================================================================================================

   xmlns:templates="clr-namespace:ChatApp.Views.Templates"  ===========> Templates es una CArpeta

     <ScrollView
                        Grid.Column="1">
                        <StackLayout
                            Orientation="Horizontal"
                            BindableLayout.ItemsSource="{Binding Users}">
                            <BindableLayout.ItemTemplate>
                                <DataTemplate>
                                    <templates:SuggestedItemTemplate />   =================> DENTRO VAN OBJETO USERS
                                </DataTemplate>
                            </BindableLayout.ItemTemplate>
                        </StackLayout>
                    </ScrollView>





=================================================================================================================================================================
 NAVEGACION de VIEW A OTRA VIEWMODEL ( de 
=================================================================================================================================================================
PageView1:

xmlns:viewmodel="clr-namespace:ChatApp.ViewModels">

Grid.GestureRecognizers>
                <TapGestureRecognizer                
                    Command="{Binding Source={RelativeSource AncestorType={x:Type viewmodel:HomeViewModel}}, Path=DetailCommand}"      
                    CommandParameter="{Binding}"/>
            </Grid.GestureRecognizers>




-------------------------------

HomeViewModel:

     public ICommand DetailCommand => new Command<object>(OnNavigate);


        void OnNavigate(object parameter)
        {
            NavigationService.Instance.NavigateToAsync<DetailViewModel>(parameter);
        }



------------------------------

  MainPage = new NavigationPage(new HomeView());

------------------------------

NAVIGATION SERVICE :

 public class NavigationService
    {
        protected readonly Dictionary<Type, Type> _mappings;

        static NavigationService _instance;

        public NavigationService()
        {
            _mappings = new Dictionary<Type, Type>();

            CreatePageViewModelMappings();
        }

        public static NavigationService Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new NavigationService();

                return _instance;
            }
        }

        protected Application CurrentApplication
        {
            get { return Application.Current; }
        }

        public Task NavigateToAsync<TViewModel>() where TViewModel : ViewModelBase
        {
            return InternalNavigateToAsync(typeof(TViewModel), null);
        }

        public Task NavigateToAsync<TViewModel>(object parameter) where TViewModel : ViewModelBase
        {
            return InternalNavigateToAsync(typeof(TViewModel), parameter);
        }

        public Task NavigateToAsync(Type viewModelType)
        {
            return InternalNavigateToAsync(viewModelType, null);
        }

        public Task NavigateToAsync(Type viewModelType, object parameter)
        {
            return InternalNavigateToAsync(viewModelType, parameter);
        }

        public async Task NavigateBackAsync()
        {
            await CurrentApplication.MainPage.Navigation.PopAsync();
        }

        protected Type GetPageTypeForViewModel(Type viewModelType)
        {
            if (!_mappings.ContainsKey(viewModelType))
            {
                throw new KeyNotFoundException($"No map for ${viewModelType} was found on navigation mappings");
            }

            return _mappings[viewModelType];
        }

        protected Page CreateAndBindPage(Type viewModelType, object parameter)
        {
            Type pageType = GetPageTypeForViewModel(viewModelType);

            if (pageType == null)
            {
                throw new Exception($"Mapping type for {viewModelType} is not a page");
            }

            Page page = Activator.CreateInstance(pageType) as Page;

            return page;
        }

        protected virtual async Task InternalNavigateToAsync(Type viewModelType, object parameter)
        {
            Page page = CreateAndBindPage(viewModelType, parameter);

            if (page is HomeView)
            {
                CurrentApplication.MainPage = page;
            }
            else
            {
                if (CurrentApplication.MainPage is NavigationPage navigationPage)
                {
                    await navigationPage.PushAsync(page);
                }
            }

            await (page.BindingContext as ViewModelBase).InitializeAsync(parameter);
        }

        void CreatePageViewModelMappings()
        {
            _mappings.Add(typeof(HomeViewModel), typeof(HomeView));
            _mappings.Add(typeof(DetailViewModel), typeof(DetailView));
        }
    }