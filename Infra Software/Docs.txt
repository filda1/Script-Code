
______________________________________________________________________________________________________________________________________
Enrutamiento y Balanceo de carga con NGINX para tus aplicaciones de Microservicios

 https://www.albertcoronado.com/2021/01/15/guia-para-enrutado-y-balanceo-de-carga-con-nginx/



-----
Para arrancar los tres contenedores Docker que simulaban un servicio web cada uno hemos creado primero los tres ficheros 'index.x.html' donde la 'x' era el número de servidor(Hemos arrancado tres). Seguidamente hemos arrancado cada uno de los contenedores:

# Creación del fichero HTML x
echo '<h1>Hello server x</h1>' > index.x.html
# Arranque del servicio x
sudo docker run -v /home/albert/index.x.html:/usr/share/nginx/html/index.html nginx

Balanceo de carga

Para el balanceo de carga hemos creado primero un fichero 'default.conf'(Donde 172.18.0.x son las IPs de los servicios que acabamos de crear):

upstream myapp1 {
	#least_conn;
	#ip_hash;

	server 172.18.0.2;
	server 172.18.0.3;
	server 172.18.0.4;
	}

server {
	listen 80;
	
	location / {
		proxy_pass http://myapp1;
		}

	}

Para arrancar el contenedor con un NGINX con esta configuración:

sudo docker run -v /home/albert/default.conf:/etc/nginx/conf.d/default.conf nginx

Enrutamiento

Para ejemplarizar un enrutamiento hemos ampliado el ejemplo hasta quedar así­:

upstream myapp1 {
	#least_conn;
	#ip_hash;

	server 172.18.0.2;
	server 172.18.0.3;
	server 172.18.0.4;
	}

server {
	listen 80;
	
	location / {
		proxy_pass http://myapp1;
		}

	location /serv2/ {
		rewrite ^/serv2(.*) / break;

		proxy_pass http://172.18.0.3;
		}
	}


______________________________________________________________________________________________________________________________________
Como comunicar microservicios y ejemplo con Apache Kafka y Javascript

 https://www.youtube.com/watch?v=rHRSOWa0cqI


 el ví­deo de hoy hemos visto que, básicamente, existen dos maneras de comunicar microservicios: comunicación sí­ncrona y comunicación así­ncrona. Para la comunicación sí­ncrona la solución mas habitual son las APIs(Rest o GraphQL) y para las comunicaciones así­ncronas se usan sobretodo brokers de mensajes(Message brokers) donde la solución mas usada ahora mismo es Apache Kafka.

Vamos a ver ahora como instalar Apache Kafka y ponerlo a funcionar para después hacer un mini programa en Javascript que haga de publicador y consumidor de mensajes :

Instalar Apache kafka

Para instalar Apache Kafka nos lo podemos descargar de su página web http://kafka.apache.org/ y descomprimir en cualquier carpeta de nuestro PC.

Una vez descomprimido tendremos que, primero arrancar Zookeeper(El proyecto que usa Kafka para gestionar su cluster) y después podemos arrancar Kafka:

# Arrancamos Zookeeper
<KAFKA_HOME>/bin/zookeeper-server-start.sh config/zookeeper.properties

# Arrancamos Kafka
<KAFKA_HOME>/bin/kafka-server-start.sh config/server.properties

Crear 'topic' en Apache Kafka

Apache Kafka gestiona los mensajes mediante listas o 'topics'. Básicamente los mensajes se enví­an a una lista y uno se subscribe a la lista.

Esto lo hemos hecho de la siguiente manera:

# Creamos nuestro primer topic 'test'
<KAFKA_HOME>/bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test

# Comprovamos que existe
<KAFKA_HOME>/bin/kafka-topics.sh --list --bootstrap-server localhost:9092

Productores y consumidores mediante lí­nea de comandos

Podemos trastear el uso de mandar mensajes y recibirlos mediante un par de scripts que tenemos disponibles en Apache Kafka. Para crear tanto un productor como un consumidor lo haremos de la siguiente manera:

# Productor
<KAFKA_HOME>/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test

# Consumidor
<KAFKA_HOME>/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning

Creamos una aplicación en Javascript que use mensajerí­a con Kafka

Como siempre me estáis diciendo que use mas Javascript en mis ejemplo haremos todos los ejemplos de esta serie dedicada a los microservicios en Javascript. En el ví­deo detallo todos los pasos del proceso para todos los públicos y aquí­ os dejo el código(Solo requiere la dependencia de 'kafka-node'):

const kafka = require('kafka-node');

const client = new kafka.KafkaClient({kafkaHost: '127.0.0.1:9092'});

/* Consumidor */
var consumer = new kafka.Consumer(client, [ { topic: 'test' } ]);

consumer.on('message', function (message) {
    	console.log(message);
	});

/* Productor */
var producer = new kafka.Producer(client);

producer.on('ready', function () {

	setInterval(function() {
  		producer.send( [ { topic: "test", messages: "Mensaje automático cada 5 seg." } ], function (err,data) {} );
		}, 5000);


	});

______________________________________________________________________________________________________________________________________
  VARNISH (cache) + web + Apache Bechmaker

  https://www.albertcoronado.com/2020/09/09/instalacion-de-un-cluster-de-apache-kafka-paso-a-paso/


____________________________________________________________________________________________________________________________________________

 NGINX + SSL
  https://www.youtube.com/watch?v=rfo_7J_0MGw
  https://www.albertcoronado.com/2020/05/05/contratar-un-certificado-ssl-gratis-con-lets-encrypt-y-configurar-nginx/
  
  
  Instalar Nginx

Lo primero que hemos hecho ha sido instalar Nginx que es super fácil porque ya viene por defecto en la mayorí­a de distribuciones Linux. En la mayorí­a de distribuciones basadas en Debian lo haremos con el siguiente comando(Primero hacemos un 'update' para actualizar la lista de paquetes):

# Actualizamos lista de paquetes
apt-get update

# Instalamos Nginx
apt-get install -y nginx

Una vez instalamos hemos arrancado el servicio para comprobar que estaba funcionando:

service nginx start

Después hemos parado el servicio porque con el servicio Nginx corriendo no podrí­amos contratar el certificado de seguridad:

service nginx stop

Contratar el certificado de seguridad SSL con Let's encrypt

Para contratar el certificado de seguridad primero deberemos instalar "certbot" que es la herramienta para gestionar los certificados de seguridad(Esta herramienta también viene por defecto en la mayorí­a de distribuciones Linux):

apt-get install -y certbot

Y ahora que ya tenemos la herramienta instalada podemos solicitar el certificado con un solo comando y sin que se nos pida nada(Ideal para automatizar procesos de devops):

certbot certonly \
    -d midominio.com \
    --noninteractive \
    --standalone \
    --agree-tos \
    --register-unsafely-without-email

Como se comenta en el ví­deo, certbot permite varios métodos para pedir el certificado, en nuestro caso vamos a usar '--standalone' que básicamente crear un servidor web interno para validar el dominio(Ese es el motivo por el que no podemos tener arrancado Nginx).

También le ponemos le activamos el modo no interactivo y le configuramos todo lo que nos va a pedir el script por defecto. De esta manera podemos usar este script para automatizar procesos de aprovisionamiento.

Configurar Nginx

Ahora que ya tenemos nuestros certificados ya podemos configurarlos donde sea, en este caso, en un servidor Nginx. Para ellos modificamos el fichero '/etc/nginx/sites-available/default' que contiene el 'site' por defecto en Nginx:

server {
        listen 80 default_server;
        return 301 https://$host$request_uri;
        }

server {
        listen 443 ssl;

        ssl_certificate     /etc/letsencrypt/live/test2.albertcoronado.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/test2.albertcoronado.com/privkey.pem;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        root /var/www/html;

        index index.html index.htm index.nginx-debian.html;

        location / {
                try_files $uri $uri/ =404;
                }
        }

Aquí­, básicamente lo que hacemos en configurar para que todas las llamadas por el puerto 80(http) sean redirigidas al puerto 443(https). El puerto 443, queda configurado como estaba el puerto 80 por defecto pero añadiendo las lí­neas que configuran el certificado SSL.

Acordaos que cada vez que hacéis cambios en este archivo hay que reiniciar el servicio de Nginx.

Renovar los certificados de Let's Encrypt

Los certificados de Let's Encrypt caducan cada seis meses, para renovarlos solo hay que ejecutar el siguiente comando:

certbot renew

Recordad que se debe ejecutar este comando con el Nginx parado para que "certbot" pueda validar que realmente el dominio es vuestro.
____________________________________________________________________________________________________________________________________________