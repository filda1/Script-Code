
______________________________________________________________________________________________________________________________________
Enrutamiento y Balanceo de carga con NGINX para tus aplicaciones de Microservicios

 https://www.albertcoronado.com/2021/01/15/guia-para-enrutado-y-balanceo-de-carga-con-nginx/



-----
Para arrancar los tres contenedores Docker que simulaban un servicio web cada uno hemos creado primero los tres ficheros 'index.x.html' donde la 'x' era el número de servidor(Hemos arrancado tres). Seguidamente hemos arrancado cada uno de los contenedores:

# Creación del fichero HTML x
echo '<h1>Hello server x</h1>' > index.x.html
# Arranque del servicio x
sudo docker run -v /home/albert/index.x.html:/usr/share/nginx/html/index.html nginx

Balanceo de carga

Para el balanceo de carga hemos creado primero un fichero 'default.conf'(Donde 172.18.0.x son las IPs de los servicios que acabamos de crear):

upstream myapp1 {
	#least_conn;
	#ip_hash;

	server 172.18.0.2;
	server 172.18.0.3;
	server 172.18.0.4;
	}

server {
	listen 80;
	
	location / {
		proxy_pass http://myapp1;
		}

	}

Para arrancar el contenedor con un NGINX con esta configuración:

sudo docker run -v /home/albert/default.conf:/etc/nginx/conf.d/default.conf nginx

Enrutamiento

Para ejemplarizar un enrutamiento hemos ampliado el ejemplo hasta quedar así­:

upstream myapp1 {
	#least_conn;
	#ip_hash;

	server 172.18.0.2;
	server 172.18.0.3;
	server 172.18.0.4;
	}

server {
	listen 80;
	
	location / {
		proxy_pass http://myapp1;
		}

	location /serv2/ {
		rewrite ^/serv2(.*) / break;

		proxy_pass http://172.18.0.3;
		}
	}


______________________________________________________________________________________________________________________________________
Como comunicar microservicios y ejemplo con Apache Kafka y Javascript

 https://www.youtube.com/watch?v=rHRSOWa0cqI


 el ví­deo de hoy hemos visto que, básicamente, existen dos maneras de comunicar microservicios: comunicación sí­ncrona y comunicación así­ncrona. Para la comunicación sí­ncrona la solución mas habitual son las APIs(Rest o GraphQL) y para las comunicaciones así­ncronas se usan sobretodo brokers de mensajes(Message brokers) donde la solución mas usada ahora mismo es Apache Kafka.

Vamos a ver ahora como instalar Apache Kafka y ponerlo a funcionar para después hacer un mini programa en Javascript que haga de publicador y consumidor de mensajes :

Instalar Apache kafka

Para instalar Apache Kafka nos lo podemos descargar de su página web http://kafka.apache.org/ y descomprimir en cualquier carpeta de nuestro PC.

Una vez descomprimido tendremos que, primero arrancar Zookeeper(El proyecto que usa Kafka para gestionar su cluster) y después podemos arrancar Kafka:

# Arrancamos Zookeeper
<KAFKA_HOME>/bin/zookeeper-server-start.sh config/zookeeper.properties

# Arrancamos Kafka
<KAFKA_HOME>/bin/kafka-server-start.sh config/server.properties

Crear 'topic' en Apache Kafka

Apache Kafka gestiona los mensajes mediante listas o 'topics'. Básicamente los mensajes se enví­an a una lista y uno se subscribe a la lista.

Esto lo hemos hecho de la siguiente manera:

# Creamos nuestro primer topic 'test'
<KAFKA_HOME>/bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test

# Comprovamos que existe
<KAFKA_HOME>/bin/kafka-topics.sh --list --bootstrap-server localhost:9092

Productores y consumidores mediante lí­nea de comandos

Podemos trastear el uso de mandar mensajes y recibirlos mediante un par de scripts que tenemos disponibles en Apache Kafka. Para crear tanto un productor como un consumidor lo haremos de la siguiente manera:

# Productor
<KAFKA_HOME>/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test

# Consumidor
<KAFKA_HOME>/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning

Creamos una aplicación en Javascript que use mensajerí­a con Kafka

Como siempre me estáis diciendo que use mas Javascript en mis ejemplo haremos todos los ejemplos de esta serie dedicada a los microservicios en Javascript. En el ví­deo detallo todos los pasos del proceso para todos los públicos y aquí­ os dejo el código(Solo requiere la dependencia de 'kafka-node'):

const kafka = require('kafka-node');

const client = new kafka.KafkaClient({kafkaHost: '127.0.0.1:9092'});

/* Consumidor */
var consumer = new kafka.Consumer(client, [ { topic: 'test' } ]);

consumer.on('message', function (message) {
    	console.log(message);
	});

/* Productor */
var producer = new kafka.Producer(client);

producer.on('ready', function () {

	setInterval(function() {
  		producer.send( [ { topic: "test", messages: "Mensaje automático cada 5 seg." } ], function (err,data) {} );
		}, 5000);


	});

______________________________________________________________________________________________________________________________________
  VARNISH (cache) + web

  https://www.albertcoronado.com/2020/09/09/instalacion-de-un-cluster-de-apache-kafka-paso-a-paso/
