TUTORIAL DE MEAN


  FAZT == https://www.youtube.com/watch?v=khCIunNAEHI (Parte 1)          
       == https://www.youtube.com/watch?v=ccBtSAMFjto (Parte 2)

       == https://github.com/FaztWeb/mean-employees

  -------------------------------------------------------------------
  EN SERVER: - Utiliza MVC
             - Al crear una clase (Model) == crea una TABLE BD + conexion BD
             - Los CONTROLLER pinta json


****************************************************************************************************************
  
   A. EJEMPLO CRUD (Formulario envia datos en la misma pagina, en la que se ve los datos)

    1. Crear Carpetas/archivos:     =====================================================================>SERVER

         server        
             controllers
              employee.controller.js
             models
             routes
               employee.routes.js
             database.js
             index.js

           
        1.1 Terminal (Afuera de la carpeta server):       npm init --yes
        1.2 Terminal (Afuera de la carpeta server):       npm install express

        1.3 en index.js

             const express = require('express');
             const cors = require('cors');               ...........................................> se puede usar morgan: const morgan = require('morgan');
             const app = express();

             const { mongoose } = require('./database');

              // Settings
             app.set('port', process.env.PORT || 3000);

             // Middlewares
             app.use(cors({origin: 'http://localhost:4200'}));      ...................................> se puede utilizar morgan:  app.use(morgan('dev'))
            (express.json());

             // Routes
             app.use('/api/employees', require('./routes/employee.routes'));

            // starting the server
            app.listen(app.get('port'), () => {
            console.log(`server on port ${app.get('port')}`);
            });



        1.4 Terminal: 
                     npm server/index.js (RUN)
                     npm install nodemon -D   ..........................................................................> RUN AUTOMATICO
                         (configurar: package.json : en "scripts"  ===============> borrar no q esta adentro y poner:  "dev":"nodemon server/index.js"

                     npm run dev ........................................................................................>(RUN NUEVO AUTOMATICO)

                 
                     npm install morgar .................................................................................> Ver por consola Peticiones/respuesas


                     npm install mongoose ................................................................................> DRIVER BD


                     mongod ...............................................................................................> INICIAR MONGODB

                        pass y luego exit....




        1.5 database.js:   


                        const mongoose = require('mongoose');
                        const URI = 'mongodb://localhost/nombreDB';

                        mongoose.connect(URI)
                        .then(db => console.log('db is connected'))
                        .catch(err => console.error(err));

                        module.exports = mongoose;




   
         1.6 Routes, en Routes => emplyeed.routes:


            const express = require('express');
            const router = express.Router();
              

             **********************************************************
            // route.get('/xxx', (req,res) => {
               res.send('Hello World');
            )}

             O

            // route.get('/xxx', (req,res) => {
               res.json(
                   status:'Hello World');
              )}


            ***********************************************************

             const employee = require('../controllers/employee.controller');

             router.get('/', employee.getEmployees);              ============================================> '/' no es la ruta verdadera, la verdadera esta index.js
             router.post('/', employee.createEmployee);
             router.get('/:id', employee.getEmployee);
             router.put('/:id', employee.editEmployee);
             router.delete('/:id', employee.deleteEmployee);

             module.exports = router;




           1.7 En models , crear TablaBD (EJ: employee.js):


            const mongoose = require('mongoose');
            const { Schema } = mongoose;

            const employeeSchema = new Schema({
                                   name: { type: String, required: true},
                                   position: { type: String, required: true },
                                   office: { type: String, required: true },
                                   salary: { type: Number, required: true}
            });

            module.exports = mongoose.model('Employee', employeeSchema);

            


          
            1.8 En Controlller, employee.controller.js:


                    const Employee = require('../models/employee');

                      const employeeCtrl = {};


                      employeeCtrl.getEmployees = async (req, res, next) => {
                      const employees = await Employee.find();
                      res.json(employees);
                      };


                     employeeCtrl.createEmployee = async (req, res, next) => {
                     const employee = new Employee({
                                      name: req.body.name,
                                      position: req.body.position,
                                      office: req.body.office,
                                      salary: req.body.salary
                                      });
                             await employee.save();
                            res.json({status: 'Employee created'});
                       };


                    employeeCtrl.getEmployee = async (req, res, next) => {
                    const { id } = req.params;
                    const employee = await Employee.findById(id);
                    res.json(employee);
                    };



                    employeeCtrl.editEmployee = async (req, res, next) => {
                    const { id } = req.params;
                    const employee = {
                    name: req.body.name,
                    position: req.body.position,
                    office: req.body.office,
                    salary: req.body.salary
                    };

                    await Employee.findByIdAndUpdate(id, {$set: employee}, {new: true});
                    res.json({status: 'Employee Updated'});
                    };




                    employeeCtrl.deleteEmployee = async (req, res, next) => {
                    await Employee.findByIdAndRemove(req.params.id);
                    res.json({status: 'Employee Deleted'});
                    };



                    module.exports = employeeCtrl;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      PARTE 2 (Angular)

            1. npm install -g @angular/cli
            2. cd carpeta/proyecto  ng new frontend
            3. cd carpeta/proyecto/frontend ng serve       ========================================> localhost:4200



            OTRA TERMINAL Para Servidor                    ========================================> localhost:3000
             A.   npm run dev
             B.   cd service mongod start                  ============================> inciar MongoDB
             C.   npm run dev


                     

                    4. carpetas/archivos:


                         src
                          app
                            components

                            models

                            services




            5. Terminal: 
                   en:  
                         src/app/components ng g c employees                     ==================================================> Crear componente

                         cd..
                         cd/models
       
                         src/app/models   ng g class employee                    ==================================================> Crear Modelo   

                          cd..
                         cd/services   

                         src/app/services  ng g s  employee                       ==================================================>  Crear servicio  

 


            6. En index.html       ==================================================> poner css ( Ej: Boostrapt, materializecss)   

    

                         
            7. employee.html:
                      <div class="card-content">
                       <form #employeeForm="ngForm" (ngSubmit)="addEmployee(employeeForm)">
                         <input type="hidden" name="_id" #_id="ngModel" [(ngModel)]="employeeService.selectedEmployee._id"> 
                             
                                       ===========> ngModel: llama a class en                                                                                                                                          service ===> va a la varible q                                                                                                                                          tiene el obeto y accede a la propiedad



            
            8. app.module.ts                  ===========================================================> configurar

                   import { BrowserModule } from '@angular/platform-browser';
                   import { NgModule } from '@angular/core';
                   import { FormsModule } from '@angular/forms';
                   import { HttpClientModule } from '@angular/common/http';



            9. modules/employee.ts:

                      
                     export class Employee {

                        
                         _id: string;
                         name: string;
                         position: string;
                         office: string;
                         salary: number;

                        constructor(_id = '', name = '', position = '', office = '', salary = 0) {
                                    this._id = _id;
                                    this.name = name;
                                    this.position = position;
                                    this.office = office;
                                    this.salary = salary;
                        }

                     }  

             10. services/employees.ts                             =======================================================> Consumir API

                         import { Injectable } from '@angular/core';
                         import { HttpClient } from '@angular/common/http';

                         import { Employee } from '../models/employee';

                        @Injectable({
                            providedIn: 'root'
                                   })

                      export class EmployeeService {

                            selectedEmployee: Employee;
                            employees: Employee[];
  
                             readonly URL_API = 'http://localhost:3000/api/employees';

                             constructor(private http: HttpClient) {

                             this.selectedEmployee = new Employee();
                             }

                             postEmployee(employee: Employee) {
                             return this.http.post(this.URL_API, employee);
                             }

                             getEmployees() {
                             return this.http.get(this.URL_API);
                             }

                             putEmployee(employee: Employee) {
                             return this.http.put(this.URL_API + `/${employee._id}`, employee);
                             }

                             deleteEmployee(_id: string) {
                             return this.http.delete(this.URL_API + `/${_id}`);
                              }
                        } 33:34


                        
                      